/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length)
/******/ 			resolves.shift()();
/******/ 		if(executeModules) {
/******/ 			for(i=0; i < executeModules.length; i++) {
/******/ 				result = __webpack_require__(__webpack_require__.s = executeModules[i]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	};
/******/ 	function hotDisposeChunk(chunkId) {
/******/ 		delete installedChunks[chunkId];
/******/ 	}
/******/ 	var parentHotUpdateCallback = this["webpackHotUpdate"];
/******/ 	this["webpackHotUpdate"] = 
/******/ 	function webpackHotUpdateCallback(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		hotAddUpdateChunk(chunkId, moreModules);
/******/ 		if(parentHotUpdateCallback) parentHotUpdateCallback(chunkId, moreModules);
/******/ 	} ;
/******/ 	
/******/ 	function hotDownloadUpdateChunk(chunkId) { // eslint-disable-line no-unused-vars
/******/ 		var head = document.getElementsByTagName("head")[0];
/******/ 		var script = document.createElement("script");
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = "utf-8";
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "." + hotCurrentHash + ".hot-update.js";
/******/ 		head.appendChild(script);
/******/ 	}
/******/ 	
/******/ 	function hotDownloadManifest() { // eslint-disable-line no-unused-vars
/******/ 		return new Promise(function(resolve, reject) {
/******/ 			if(typeof XMLHttpRequest === "undefined")
/******/ 				return reject(new Error("No browser support"));
/******/ 			try {
/******/ 				var request = new XMLHttpRequest();
/******/ 				var requestPath = __webpack_require__.p + "" + hotCurrentHash + ".hot-update.json";
/******/ 				request.open("GET", requestPath, true);
/******/ 				request.timeout = 10000;
/******/ 				request.send(null);
/******/ 			} catch(err) {
/******/ 				return reject(err);
/******/ 			}
/******/ 			request.onreadystatechange = function() {
/******/ 				if(request.readyState !== 4) return;
/******/ 				if(request.status === 0) {
/******/ 					// timeout
/******/ 					reject(new Error("Manifest request to " + requestPath + " timed out."));
/******/ 				} else if(request.status === 404) {
/******/ 					// no update available
/******/ 					resolve();
/******/ 				} else if(request.status !== 200 && request.status !== 304) {
/******/ 					// other failure
/******/ 					reject(new Error("Manifest request to " + requestPath + " failed."));
/******/ 				} else {
/******/ 					// success
/******/ 					try {
/******/ 						var update = JSON.parse(request.responseText);
/******/ 					} catch(e) {
/******/ 						reject(e);
/******/ 						return;
/******/ 					}
/******/ 					resolve(update);
/******/ 				}
/******/ 			};
/******/ 		});
/******/ 	}
/******/
/******/ 	
/******/ 	
/******/ 	var hotApplyOnUpdate = true;
/******/ 	var hotCurrentHash = "8587ca5bd2a2ab59cd55"; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentModuleData = {};
/******/ 	var hotMainModule = true; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentParents = []; // eslint-disable-line no-unused-vars
/******/ 	var hotCurrentParentsTemp = []; // eslint-disable-line no-unused-vars
/******/ 	
/******/ 	function hotCreateRequire(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var me = installedModules[moduleId];
/******/ 		if(!me) return __webpack_require__;
/******/ 		var fn = function(request) {
/******/ 			if(me.hot.active) {
/******/ 				if(installedModules[request]) {
/******/ 					if(installedModules[request].parents.indexOf(moduleId) < 0)
/******/ 						installedModules[request].parents.push(moduleId);
/******/ 				} else hotCurrentParents = [moduleId];
/******/ 				if(me.children.indexOf(request) < 0)
/******/ 					me.children.push(request);
/******/ 			} else {
/******/ 				console.warn("[HMR] unexpected require(" + request + ") from disposed module " + moduleId);
/******/ 				hotCurrentParents = [];
/******/ 			}
/******/ 			hotMainModule = false;
/******/ 			return __webpack_require__(request);
/******/ 		};
/******/ 		var ObjectFactory = function ObjectFactory(name) {
/******/ 			return {
/******/ 				configurable: true,
/******/ 				enumerable: true,
/******/ 				get: function() {
/******/ 					return __webpack_require__[name];
/******/ 				},
/******/ 				set: function(value) {
/******/ 					__webpack_require__[name] = value;
/******/ 				}
/******/ 			};
/******/ 		};
/******/ 		for(var name in __webpack_require__) {
/******/ 			if(Object.prototype.hasOwnProperty.call(__webpack_require__, name)) {
/******/ 				Object.defineProperty(fn, name, ObjectFactory(name));
/******/ 			}
/******/ 		}
/******/ 		Object.defineProperty(fn, "e", {
/******/ 			enumerable: true,
/******/ 			value: function(chunkId) {
/******/ 				if(hotStatus === "ready")
/******/ 					hotSetStatus("prepare");
/******/ 				hotChunksLoading++;
/******/ 				return __webpack_require__.e(chunkId).then(finishChunkLoading, function(err) {
/******/ 					finishChunkLoading();
/******/ 					throw err;
/******/ 				});
/******/ 	
/******/ 				function finishChunkLoading() {
/******/ 					hotChunksLoading--;
/******/ 					if(hotStatus === "prepare") {
/******/ 						if(!hotWaitingFilesMap[chunkId]) {
/******/ 							hotEnsureUpdateChunk(chunkId);
/******/ 						}
/******/ 						if(hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 							hotUpdateDownloaded();
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		});
/******/ 		return fn;
/******/ 	}
/******/ 	
/******/ 	function hotCreateModule(moduleId) { // eslint-disable-line no-unused-vars
/******/ 		var hot = {
/******/ 			// private stuff
/******/ 			_acceptedDependencies: {},
/******/ 			_declinedDependencies: {},
/******/ 			_selfAccepted: false,
/******/ 			_selfDeclined: false,
/******/ 			_disposeHandlers: [],
/******/ 			_main: hotMainModule,
/******/ 	
/******/ 			// Module API
/******/ 			active: true,
/******/ 			accept: function(dep, callback) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfAccepted = true;
/******/ 				else if(typeof dep === "function")
/******/ 					hot._selfAccepted = dep;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._acceptedDependencies[dep[i]] = callback || function() {};
/******/ 				else
/******/ 					hot._acceptedDependencies[dep] = callback || function() {};
/******/ 			},
/******/ 			decline: function(dep) {
/******/ 				if(typeof dep === "undefined")
/******/ 					hot._selfDeclined = true;
/******/ 				else if(typeof dep === "object")
/******/ 					for(var i = 0; i < dep.length; i++)
/******/ 						hot._declinedDependencies[dep[i]] = true;
/******/ 				else
/******/ 					hot._declinedDependencies[dep] = true;
/******/ 			},
/******/ 			dispose: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			addDisposeHandler: function(callback) {
/******/ 				hot._disposeHandlers.push(callback);
/******/ 			},
/******/ 			removeDisposeHandler: function(callback) {
/******/ 				var idx = hot._disposeHandlers.indexOf(callback);
/******/ 				if(idx >= 0) hot._disposeHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			// Management API
/******/ 			check: hotCheck,
/******/ 			apply: hotApply,
/******/ 			status: function(l) {
/******/ 				if(!l) return hotStatus;
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			addStatusHandler: function(l) {
/******/ 				hotStatusHandlers.push(l);
/******/ 			},
/******/ 			removeStatusHandler: function(l) {
/******/ 				var idx = hotStatusHandlers.indexOf(l);
/******/ 				if(idx >= 0) hotStatusHandlers.splice(idx, 1);
/******/ 			},
/******/ 	
/******/ 			//inherit from previous dispose call
/******/ 			data: hotCurrentModuleData[moduleId]
/******/ 		};
/******/ 		hotMainModule = true;
/******/ 		return hot;
/******/ 	}
/******/ 	
/******/ 	var hotStatusHandlers = [];
/******/ 	var hotStatus = "idle";
/******/ 	
/******/ 	function hotSetStatus(newStatus) {
/******/ 		hotStatus = newStatus;
/******/ 		for(var i = 0; i < hotStatusHandlers.length; i++)
/******/ 			hotStatusHandlers[i].call(null, newStatus);
/******/ 	}
/******/ 	
/******/ 	// while downloading
/******/ 	var hotWaitingFiles = 0;
/******/ 	var hotChunksLoading = 0;
/******/ 	var hotWaitingFilesMap = {};
/******/ 	var hotRequestedFilesMap = {};
/******/ 	var hotAvailableFilesMap = {};
/******/ 	var hotDeferred;
/******/ 	
/******/ 	// The update info
/******/ 	var hotUpdate, hotUpdateNewHash;
/******/ 	
/******/ 	function toModuleId(id) {
/******/ 		var isNumber = (+id) + "" === id;
/******/ 		return isNumber ? +id : id;
/******/ 	}
/******/ 	
/******/ 	function hotCheck(apply) {
/******/ 		if(hotStatus !== "idle") throw new Error("check() is only allowed in idle status");
/******/ 		hotApplyOnUpdate = apply;
/******/ 		hotSetStatus("check");
/******/ 		return hotDownloadManifest().then(function(update) {
/******/ 			if(!update) {
/******/ 				hotSetStatus("idle");
/******/ 				return null;
/******/ 			}
/******/ 	
/******/ 			hotRequestedFilesMap = {};
/******/ 			hotWaitingFilesMap = {};
/******/ 			hotAvailableFilesMap = update.c;
/******/ 			hotUpdateNewHash = update.h;
/******/ 	
/******/ 			hotSetStatus("prepare");
/******/ 			var promise = new Promise(function(resolve, reject) {
/******/ 				hotDeferred = {
/******/ 					resolve: resolve,
/******/ 					reject: reject
/******/ 				};
/******/ 			});
/******/ 			hotUpdate = {};
/******/ 			for(var chunkId in installedChunks)
/******/ 			{ // eslint-disable-line no-lone-blocks
/******/ 				/*globals chunkId */
/******/ 				hotEnsureUpdateChunk(chunkId);
/******/ 			}
/******/ 			if(hotStatus === "prepare" && hotChunksLoading === 0 && hotWaitingFiles === 0) {
/******/ 				hotUpdateDownloaded();
/******/ 			}
/******/ 			return promise;
/******/ 		});
/******/ 	}
/******/ 	
/******/ 	function hotAddUpdateChunk(chunkId, moreModules) { // eslint-disable-line no-unused-vars
/******/ 		if(!hotAvailableFilesMap[chunkId] || !hotRequestedFilesMap[chunkId])
/******/ 			return;
/******/ 		hotRequestedFilesMap[chunkId] = false;
/******/ 		for(var moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				hotUpdate[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(--hotWaitingFiles === 0 && hotChunksLoading === 0) {
/******/ 			hotUpdateDownloaded();
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotEnsureUpdateChunk(chunkId) {
/******/ 		if(!hotAvailableFilesMap[chunkId]) {
/******/ 			hotWaitingFilesMap[chunkId] = true;
/******/ 		} else {
/******/ 			hotRequestedFilesMap[chunkId] = true;
/******/ 			hotWaitingFiles++;
/******/ 			hotDownloadUpdateChunk(chunkId);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotUpdateDownloaded() {
/******/ 		hotSetStatus("ready");
/******/ 		var deferred = hotDeferred;
/******/ 		hotDeferred = null;
/******/ 		if(!deferred) return;
/******/ 		if(hotApplyOnUpdate) {
/******/ 			hotApply(hotApplyOnUpdate).then(function(result) {
/******/ 				deferred.resolve(result);
/******/ 			}, function(err) {
/******/ 				deferred.reject(err);
/******/ 			});
/******/ 		} else {
/******/ 			var outdatedModules = [];
/******/ 			for(var id in hotUpdate) {
/******/ 				if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 					outdatedModules.push(toModuleId(id));
/******/ 				}
/******/ 			}
/******/ 			deferred.resolve(outdatedModules);
/******/ 		}
/******/ 	}
/******/ 	
/******/ 	function hotApply(options) {
/******/ 		if(hotStatus !== "ready") throw new Error("apply() is only allowed in ready status");
/******/ 		options = options || {};
/******/ 	
/******/ 		var cb;
/******/ 		var i;
/******/ 		var j;
/******/ 		var module;
/******/ 		var moduleId;
/******/ 	
/******/ 		function getAffectedStuff(updateModuleId) {
/******/ 			var outdatedModules = [updateModuleId];
/******/ 			var outdatedDependencies = {};
/******/ 	
/******/ 			var queue = outdatedModules.slice().map(function(id) {
/******/ 				return {
/******/ 					chain: [id],
/******/ 					id: id
/******/ 				};
/******/ 			});
/******/ 			while(queue.length > 0) {
/******/ 				var queueItem = queue.pop();
/******/ 				var moduleId = queueItem.id;
/******/ 				var chain = queueItem.chain;
/******/ 				module = installedModules[moduleId];
/******/ 				if(!module || module.hot._selfAccepted)
/******/ 					continue;
/******/ 				if(module.hot._selfDeclined) {
/******/ 					return {
/******/ 						type: "self-declined",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				if(module.hot._main) {
/******/ 					return {
/******/ 						type: "unaccepted",
/******/ 						chain: chain,
/******/ 						moduleId: moduleId
/******/ 					};
/******/ 				}
/******/ 				for(var i = 0; i < module.parents.length; i++) {
/******/ 					var parentId = module.parents[i];
/******/ 					var parent = installedModules[parentId];
/******/ 					if(!parent) continue;
/******/ 					if(parent.hot._declinedDependencies[moduleId]) {
/******/ 						return {
/******/ 							type: "declined",
/******/ 							chain: chain.concat([parentId]),
/******/ 							moduleId: moduleId,
/******/ 							parentId: parentId
/******/ 						};
/******/ 					}
/******/ 					if(outdatedModules.indexOf(parentId) >= 0) continue;
/******/ 					if(parent.hot._acceptedDependencies[moduleId]) {
/******/ 						if(!outdatedDependencies[parentId])
/******/ 							outdatedDependencies[parentId] = [];
/******/ 						addAllToSet(outdatedDependencies[parentId], [moduleId]);
/******/ 						continue;
/******/ 					}
/******/ 					delete outdatedDependencies[parentId];
/******/ 					outdatedModules.push(parentId);
/******/ 					queue.push({
/******/ 						chain: chain.concat([parentId]),
/******/ 						id: parentId
/******/ 					});
/******/ 				}
/******/ 			}
/******/ 	
/******/ 			return {
/******/ 				type: "accepted",
/******/ 				moduleId: updateModuleId,
/******/ 				outdatedModules: outdatedModules,
/******/ 				outdatedDependencies: outdatedDependencies
/******/ 			};
/******/ 		}
/******/ 	
/******/ 		function addAllToSet(a, b) {
/******/ 			for(var i = 0; i < b.length; i++) {
/******/ 				var item = b[i];
/******/ 				if(a.indexOf(item) < 0)
/******/ 					a.push(item);
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// at begin all updates modules are outdated
/******/ 		// the "outdated" status can propagate to parents if they don't accept the children
/******/ 		var outdatedDependencies = {};
/******/ 		var outdatedModules = [];
/******/ 		var appliedUpdate = {};
/******/ 	
/******/ 		var warnUnexpectedRequire = function warnUnexpectedRequire() {
/******/ 			console.warn("[HMR] unexpected require(" + result.moduleId + ") to disposed module");
/******/ 		};
/******/ 	
/******/ 		for(var id in hotUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(hotUpdate, id)) {
/******/ 				moduleId = toModuleId(id);
/******/ 				var result;
/******/ 				if(hotUpdate[id]) {
/******/ 					result = getAffectedStuff(moduleId);
/******/ 				} else {
/******/ 					result = {
/******/ 						type: "disposed",
/******/ 						moduleId: id
/******/ 					};
/******/ 				}
/******/ 				var abortError = false;
/******/ 				var doApply = false;
/******/ 				var doDispose = false;
/******/ 				var chainInfo = "";
/******/ 				if(result.chain) {
/******/ 					chainInfo = "\nUpdate propagation: " + result.chain.join(" -> ");
/******/ 				}
/******/ 				switch(result.type) {
/******/ 					case "self-declined":
/******/ 						if(options.onDeclined)
/******/ 							options.onDeclined(result);
/******/ 						if(!options.ignoreDeclined)
/******/ 							abortError = new Error("Aborted because of self decline: " + result.moduleId + chainInfo);
/******/ 						break;
/******/ 					case "declined":
/******/ 						if(options.onDeclined)
/******/ 							options.onDeclined(result);
/******/ 						if(!options.ignoreDeclined)
/******/ 							abortError = new Error("Aborted because of declined dependency: " + result.moduleId + " in " + result.parentId + chainInfo);
/******/ 						break;
/******/ 					case "unaccepted":
/******/ 						if(options.onUnaccepted)
/******/ 							options.onUnaccepted(result);
/******/ 						if(!options.ignoreUnaccepted)
/******/ 							abortError = new Error("Aborted because " + moduleId + " is not accepted" + chainInfo);
/******/ 						break;
/******/ 					case "accepted":
/******/ 						if(options.onAccepted)
/******/ 							options.onAccepted(result);
/******/ 						doApply = true;
/******/ 						break;
/******/ 					case "disposed":
/******/ 						if(options.onDisposed)
/******/ 							options.onDisposed(result);
/******/ 						doDispose = true;
/******/ 						break;
/******/ 					default:
/******/ 						throw new Error("Unexception type " + result.type);
/******/ 				}
/******/ 				if(abortError) {
/******/ 					hotSetStatus("abort");
/******/ 					return Promise.reject(abortError);
/******/ 				}
/******/ 				if(doApply) {
/******/ 					appliedUpdate[moduleId] = hotUpdate[moduleId];
/******/ 					addAllToSet(outdatedModules, result.outdatedModules);
/******/ 					for(moduleId in result.outdatedDependencies) {
/******/ 						if(Object.prototype.hasOwnProperty.call(result.outdatedDependencies, moduleId)) {
/******/ 							if(!outdatedDependencies[moduleId])
/******/ 								outdatedDependencies[moduleId] = [];
/******/ 							addAllToSet(outdatedDependencies[moduleId], result.outdatedDependencies[moduleId]);
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 				if(doDispose) {
/******/ 					addAllToSet(outdatedModules, [result.moduleId]);
/******/ 					appliedUpdate[moduleId] = warnUnexpectedRequire;
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Store self accepted outdated modules to require them later by the module system
/******/ 		var outdatedSelfAcceptedModules = [];
/******/ 		for(i = 0; i < outdatedModules.length; i++) {
/******/ 			moduleId = outdatedModules[i];
/******/ 			if(installedModules[moduleId] && installedModules[moduleId].hot._selfAccepted)
/******/ 				outdatedSelfAcceptedModules.push({
/******/ 					module: moduleId,
/******/ 					errorHandler: installedModules[moduleId].hot._selfAccepted
/******/ 				});
/******/ 		}
/******/ 	
/******/ 		// Now in "dispose" phase
/******/ 		hotSetStatus("dispose");
/******/ 		Object.keys(hotAvailableFilesMap).forEach(function(chunkId) {
/******/ 			if(hotAvailableFilesMap[chunkId] === false) {
/******/ 				hotDisposeChunk(chunkId);
/******/ 			}
/******/ 		});
/******/ 	
/******/ 		var idx;
/******/ 		var queue = outdatedModules.slice();
/******/ 		while(queue.length > 0) {
/******/ 			moduleId = queue.pop();
/******/ 			module = installedModules[moduleId];
/******/ 			if(!module) continue;
/******/ 	
/******/ 			var data = {};
/******/ 	
/******/ 			// Call dispose handlers
/******/ 			var disposeHandlers = module.hot._disposeHandlers;
/******/ 			for(j = 0; j < disposeHandlers.length; j++) {
/******/ 				cb = disposeHandlers[j];
/******/ 				cb(data);
/******/ 			}
/******/ 			hotCurrentModuleData[moduleId] = data;
/******/ 	
/******/ 			// disable module (this disables requires from this module)
/******/ 			module.hot.active = false;
/******/ 	
/******/ 			// remove module from cache
/******/ 			delete installedModules[moduleId];
/******/ 	
/******/ 			// remove "parents" references from all children
/******/ 			for(j = 0; j < module.children.length; j++) {
/******/ 				var child = installedModules[module.children[j]];
/******/ 				if(!child) continue;
/******/ 				idx = child.parents.indexOf(moduleId);
/******/ 				if(idx >= 0) {
/******/ 					child.parents.splice(idx, 1);
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// remove outdated dependency from module children
/******/ 		var dependency;
/******/ 		var moduleOutdatedDependencies;
/******/ 		for(moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				module = installedModules[moduleId];
/******/ 				if(module) {
/******/ 					moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 					for(j = 0; j < moduleOutdatedDependencies.length; j++) {
/******/ 						dependency = moduleOutdatedDependencies[j];
/******/ 						idx = module.children.indexOf(dependency);
/******/ 						if(idx >= 0) module.children.splice(idx, 1);
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Not in "apply" phase
/******/ 		hotSetStatus("apply");
/******/ 	
/******/ 		hotCurrentHash = hotUpdateNewHash;
/******/ 	
/******/ 		// insert new code
/******/ 		for(moduleId in appliedUpdate) {
/******/ 			if(Object.prototype.hasOwnProperty.call(appliedUpdate, moduleId)) {
/******/ 				modules[moduleId] = appliedUpdate[moduleId];
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// call accept handlers
/******/ 		var error = null;
/******/ 		for(moduleId in outdatedDependencies) {
/******/ 			if(Object.prototype.hasOwnProperty.call(outdatedDependencies, moduleId)) {
/******/ 				module = installedModules[moduleId];
/******/ 				moduleOutdatedDependencies = outdatedDependencies[moduleId];
/******/ 				var callbacks = [];
/******/ 				for(i = 0; i < moduleOutdatedDependencies.length; i++) {
/******/ 					dependency = moduleOutdatedDependencies[i];
/******/ 					cb = module.hot._acceptedDependencies[dependency];
/******/ 					if(callbacks.indexOf(cb) >= 0) continue;
/******/ 					callbacks.push(cb);
/******/ 				}
/******/ 				for(i = 0; i < callbacks.length; i++) {
/******/ 					cb = callbacks[i];
/******/ 					try {
/******/ 						cb(moduleOutdatedDependencies);
/******/ 					} catch(err) {
/******/ 						if(options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "accept-errored",
/******/ 								moduleId: moduleId,
/******/ 								dependencyId: moduleOutdatedDependencies[i],
/******/ 								error: err
/******/ 							});
/******/ 						}
/******/ 						if(!options.ignoreErrored) {
/******/ 							if(!error)
/******/ 								error = err;
/******/ 						}
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// Load self accepted modules
/******/ 		for(i = 0; i < outdatedSelfAcceptedModules.length; i++) {
/******/ 			var item = outdatedSelfAcceptedModules[i];
/******/ 			moduleId = item.module;
/******/ 			hotCurrentParents = [moduleId];
/******/ 			try {
/******/ 				__webpack_require__(moduleId);
/******/ 			} catch(err) {
/******/ 				if(typeof item.errorHandler === "function") {
/******/ 					try {
/******/ 						item.errorHandler(err);
/******/ 					} catch(err2) {
/******/ 						if(options.onErrored) {
/******/ 							options.onErrored({
/******/ 								type: "self-accept-error-handler-errored",
/******/ 								moduleId: moduleId,
/******/ 								error: err2,
/******/ 								orginalError: err
/******/ 							});
/******/ 						}
/******/ 						if(!options.ignoreErrored) {
/******/ 							if(!error)
/******/ 								error = err2;
/******/ 						}
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				} else {
/******/ 					if(options.onErrored) {
/******/ 						options.onErrored({
/******/ 							type: "self-accept-errored",
/******/ 							moduleId: moduleId,
/******/ 							error: err
/******/ 						});
/******/ 					}
/******/ 					if(!options.ignoreErrored) {
/******/ 						if(!error)
/******/ 							error = err;
/******/ 					}
/******/ 				}
/******/ 			}
/******/ 		}
/******/ 	
/******/ 		// handle errors in accept handlers and self accepted module load
/******/ 		if(error) {
/******/ 			hotSetStatus("fail");
/******/ 			return Promise.reject(error);
/******/ 		}
/******/ 	
/******/ 		hotSetStatus("idle");
/******/ 		return Promise.resolve(outdatedModules);
/******/ 	}
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		4: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {},
/******/ 			hot: hotCreateModule(moduleId),
/******/ 			parents: (hotCurrentParentsTemp = hotCurrentParents, hotCurrentParents = [], hotCurrentParentsTemp),
/******/ 			children: []
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		var threw = true;
/******/ 		try {
/******/ 			modules[moduleId].call(module.exports, module, module.exports, hotCreateRequire(moduleId));
/******/ 			threw = false;
/******/ 		} finally {
/******/ 			if(threw) delete installedModules[moduleId];
/******/ 		}
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return Promise.resolve();
/******/
/******/ 		// an Promise means "currently loading".
/******/ 		if(installedChunks[chunkId]) {
/******/ 			return installedChunks[chunkId][2];
/******/ 		}
/******/ 		// start chunk loading
/******/ 		var head = document.getElementsByTagName('head')[0];
/******/ 		var script = document.createElement('script');
/******/ 		script.type = 'text/javascript';
/******/ 		script.charset = 'utf-8';
/******/ 		script.async = true;
/******/ 		script.timeout = 120000;
/******/
/******/ 		if (__webpack_require__.nc) {
/******/ 			script.setAttribute("nonce", __webpack_require__.nc);
/******/ 		}
/******/ 		script.src = __webpack_require__.p + "" + chunkId + "";
/******/ 		var timeout = setTimeout(onScriptComplete, 120000);
/******/ 		script.onerror = script.onload = onScriptComplete;
/******/ 		function onScriptComplete() {
/******/ 			// avoid mem leaks in IE.
/******/ 			script.onerror = script.onload = null;
/******/ 			clearTimeout(timeout);
/******/ 			var chunk = installedChunks[chunkId];
/******/ 			if(chunk !== 0) {
/******/ 				if(chunk) chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));
/******/ 				installedChunks[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/
/******/ 		var promise = new Promise(function(resolve, reject) {
/******/ 			installedChunks[chunkId] = [resolve, reject];
/******/ 		});
/******/ 		installedChunks[chunkId][2] = promise;
/******/
/******/ 		head.appendChild(script);
/******/ 		return promise;
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/_webpack/";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// __webpack_hash__
/******/ 	__webpack_require__.h = function() { return hotCurrentHash; };
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyFunction = __webpack_require__(15);

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // --- Welcome to debugging React ---
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return; // Ignore CompositeComponent proptype check.
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 3 */,
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/* eslint-disable no-unused-vars */
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (e) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (Object.getOwnPropertySymbols) {
			symbols = Object.getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 5 */,
/* 6 */
/***/ (function(module, exports) {

var core = module.exports = {version: '2.4.0'};
if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ }),
/* 7 */,
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = __webpack_require__(46);


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

var store      = __webpack_require__(106)('wks')
  , uid        = __webpack_require__(74)
  , Symbol     = __webpack_require__(10).Symbol
  , USE_SYMBOL = typeof Symbol == 'function';

var $exports = module.exports = function(name){
  return store[name] || (store[name] =
    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
};

$exports.store = store;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
var global = module.exports = typeof window != 'undefined' && window.Math == Math
  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2016-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(39);

var ReactCurrentOwner = __webpack_require__(18);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(1);

function isNative(fn) {
  // Based on isNative() from Lodash
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString
  // Take an example native function source for comparison
  .call(hasOwnProperty)
  // Strip regex characters so we can use it for regex
  .replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  // Remove hasOwnProperty from the template to make it generic
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections =
// Array.from
typeof Array.from === 'function' &&
// Map
typeof Map === 'function' && isNative(Map) &&
// Map.prototype.keys
Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) &&
// Set
typeof Set === 'function' && isNative(Set) &&
// Set.prototype.keys
Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function (id, item) {
    itemMap.set(id, item);
  };
  getItem = function (id) {
    return itemMap.get(id);
  };
  removeItem = function (id) {
    itemMap['delete'](id);
  };
  getItemIDs = function () {
    return Array.from(itemMap.keys());
  };

  addRoot = function (id) {
    rootIDSet.add(id);
  };
  removeRoot = function (id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function () {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  // Use non-numeric keys to prevent V8 performance issues:
  // https://github.com/facebook/react/pull/7232
  var getKeyFromID = function (id) {
    return '.' + id;
  };
  var getIDFromKey = function (key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function (id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function (id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function (id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function () {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function (id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function (id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function () {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function (id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
        // TODO: This shouldn't be necessary but mounting a new root during in
        // componentWillMount currently causes not-yet-mounted components to
        // be purged from our tree data so their parent id is missing.
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function (id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function (id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.element = element;
  },
  onMountComponent: function (id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function (id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      // We may end up here as a result of setState() in componentWillUnmount().
      // In this case, ignore the element.
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function (id) {
    var item = getItem(id);
    if (item) {
      // We need to check if it exists.
      // `item` might not exist if it is inside an error boundary, and a sibling
      // error boundary child threw while mounting. Then this instance never
      // got a chance to mount, but it still gets an unmounting event during
      // the error boundary cleanup.
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function () {
    if (ReactComponentTreeHook._preventPurging) {
      // Should only be used for testing.
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function (id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function (topElement) {
    var info = '';
    if (topElement) {
      var name = getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function (id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function (id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return getDisplayName(element);
  },
  getElement: function (id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function (id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function (id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function (id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function (id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },


  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs
};

module.exports = ReactComponentTreeHook;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(10)
  , core      = __webpack_require__(6)
  , ctx       = __webpack_require__(28)
  , hide      = __webpack_require__(29)
  , PROTOTYPE = 'prototype';

var $export = function(type, name, source){
  var IS_FORCED = type & $export.F
    , IS_GLOBAL = type & $export.G
    , IS_STATIC = type & $export.S
    , IS_PROTO  = type & $export.P
    , IS_BIND   = type & $export.B
    , IS_WRAP   = type & $export.W
    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
    , expProto  = exports[PROTOTYPE]
    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
    , key, own, out;
  if(IS_GLOBAL)source = name;
  for(key in source){
    // contains in native
    own = !IS_FORCED && target && target[key] !== undefined;
    if(own && key in exports)continue;
    // export native or passed
    out = own ? target[key] : source[key];
    // prevent global pollution for namespaces
    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
    // bind timers to global for call from export context
    : IS_BIND && own ? ctx(out, global)
    // wrap global constructors for prevent change them in library
    : IS_WRAP && target[key] == out ? (function(C){
      var F = function(a, b, c){
        if(this instanceof C){
          switch(arguments.length){
            case 0: return new C;
            case 1: return new C(a);
            case 2: return new C(a, b);
          } return new C(a, b, c);
        } return C.apply(this, arguments);
      };
      F[PROTOTYPE] = C[PROTOTYPE];
      return F;
    // make static versions for prototype methods
    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
    if(IS_PROTO){
      (exports.virtual || (exports.virtual = {}))[key] = out;
      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
      if(type & $export.R && expProto && !expProto[key])hide(expProto, key, out);
    }
  }
};
// type bitmap
$export.F = 1;   // forced
$export.G = 2;   // global
$export.S = 4;   // static
$export.P = 8;   // proto
$export.B = 16;  // bind
$export.W = 32;  // wrap
$export.U = 64;  // safe
$export.R = 128; // real proto method for `library` 
module.exports = $export;

/***/ }),
/* 13 */,
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

var anObject       = __webpack_require__(21)
  , IE8_DOM_DEFINE = __webpack_require__(150)
  , toPrimitive    = __webpack_require__(108)
  , dP             = Object.defineProperty;

exports.f = __webpack_require__(16) ? Object.defineProperty : function defineProperty(O, P, Attributes){
  anObject(O);
  P = toPrimitive(P, true);
  anObject(Attributes);
  if(IE8_DOM_DEFINE)try {
    return dP(O, P, Attributes);
  } catch(e){ /* empty */ }
  if('get' in Attributes || 'set' in Attributes)throw TypeError('Accessors not supported!');
  if('value' in Attributes)O[P] = Attributes.value;
  return O;
};

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

/**
 * This function accepts and discards inputs; it has no side effects. This is
 * primarily useful idiomatically for overridable function endpoints which
 * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
 */
var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

// Thank's IE8 for his funny defineProperty
module.exports = !__webpack_require__(33)(function(){
  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 17 */,
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {

  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null

};

module.exports = ReactCurrentOwner;

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(92);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(30);
module.exports = function(it){
  if(!isObject(it))throw TypeError(it + ' is not an object!');
  return it;
};

/***/ }),
/* 22 */,
/* 23 */,
/* 24 */,
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(258), __esModule: true };

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _setPrototypeOf = __webpack_require__(246);

var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);

var _create = __webpack_require__(244);

var _create2 = _interopRequireDefault(_create);

var _typeof2 = __webpack_require__(148);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
  }

  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
};

/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _typeof2 = __webpack_require__(148);

var _typeof3 = _interopRequireDefault(_typeof2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
};

/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

// optional / simple context binding
var aFunction = __webpack_require__(96);
module.exports = function(fn, that, length){
  aFunction(fn);
  if(that === undefined)return fn;
  switch(length){
    case 1: return function(a){
      return fn.call(that, a);
    };
    case 2: return function(a, b){
      return fn.call(that, a, b);
    };
    case 3: return function(a, b, c){
      return fn.call(that, a, b, c);
    };
  }
  return function(/* ...args */){
    return fn.apply(that, arguments);
  };
};

/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

var dP         = __webpack_require__(14)
  , createDesc = __webpack_require__(51);
module.exports = __webpack_require__(16) ? function(object, key, value){
  return dP.f(object, key, createDesc(1, value));
} : function(object, key, value){
  object[key] = value;
  return object;
};

/***/ }),
/* 30 */
/***/ (function(module, exports) {

module.exports = function(it){
  return typeof it === 'object' ? it !== null : typeof it === 'function';
};

/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

// to indexed object, toObject with fallback for non-array-like ES3 strings
var IObject = __webpack_require__(100)
  , defined = __webpack_require__(69);
module.exports = function(it){
  return IObject(defined(it));
};

/***/ }),
/* 32 */,
/* 33 */
/***/ (function(module, exports) {

module.exports = function(exec){
  try {
    return !!exec();
  } catch(e){
    return true;
  }
};

/***/ }),
/* 34 */
/***/ (function(module, exports) {

var hasOwnProperty = {}.hasOwnProperty;
module.exports = function(it, key){
  return hasOwnProperty.call(it, key);
};

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 / 15.2.3.14 Object.keys(O)
var $keys       = __webpack_require__(159)
  , enumBugKeys = __webpack_require__(99);

module.exports = Object.keys || function keys(O){
  return $keys(O, enumBugKeys);
};

/***/ }),
/* 36 */,
/* 37 */,
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactCurrentOwner = __webpack_require__(18);

var warning = __webpack_require__(1);
var canDefineProperty = __webpack_require__(143);
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = __webpack_require__(231);

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, no instanceof check
 * will work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} key
 * @param {string|object} ref
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @param {*} owner
 * @param {*} props
 * @internal
 */
var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allow us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,

    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,

    // Record the component responsible for creating this element.
    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {};

    // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.
    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });
      // self and source are DEV only properties.
      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });
      // Two elements created in two different places should be considered
      // equal for testing purposes and therefore we hide it from enumeration.
      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

/**
 * Create and return a new ReactElement of the given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createelement
 */
ReactElement.createElement = function (type, config, children) {
  var propName;

  // Reserved names are extracted
  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;
    // Remaining properties are added to a new props object
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  // Resolve default props
  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

/**
 * Return a function that produces ReactElements of a given type.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.createfactory
 */
ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);
  // Expose the type on the factory and the prototype so that it can be
  // easily accessed on elements. E.g. `<Foo />.type === Foo`.
  // This should not be named `constructor` since this may not be the function
  // that created the element, and it may not even be a constructor.
  // Legacy hook TODO: Warn if this is accessed
  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.cloneelement
 */
ReactElement.cloneElement = function (element, config, children) {
  var propName;

  // Original props are copied
  var props = _assign({}, element.props);

  // Reserved names are extracted
  var key = element.key;
  var ref = element.ref;
  // Self is preserved since the owner is preserved.
  var self = element._self;
  // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.
  var source = element._source;

  // Owner will be preserved, unless ref is overridden
  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    // Remaining properties override existing props
    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.
  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

/**
 * Verifies the object is a ReactElement.
 * See https://facebook.github.io/react/docs/top-level-api.html#react.isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a valid component.
 * @final
 */
ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */


/**
 * WARNING: DO NOT manually require this module.
 * This is a replacement for `invariant(...)` used by the error code system
 * and will _only_ be required by the corresponding babel pass.
 * It always throws.
 */

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1; // we don't care about reactProdInvariant's own frame

  throw error;
}

module.exports = reactProdInvariant;

/***/ }),
/* 40 */
/***/ (function(module, exports) {

module.exports = {};

/***/ }),
/* 41 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.13 ToObject(argument)
var defined = __webpack_require__(69);
module.exports = function(it){
  return Object(defined(it));
};

/***/ }),
/* 42 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $at  = __webpack_require__(286)(true);

// 21.1.3.27 String.prototype[@@iterator]()
__webpack_require__(101)(String, 'String', function(iterated){
  this._t = String(iterated); // target
  this._i = 0;                // next index
// 21.1.5.2.1 %StringIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , index = this._i
    , point;
  if(index >= O.length)return {value: undefined, done: true};
  point = $at(O, index);
  this._i += point.length;
  return {value: point, done: false};
});

/***/ }),
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactChildren = __webpack_require__(545);
var ReactComponent = __webpack_require__(140);
var ReactPureComponent = __webpack_require__(549);
var ReactClass = __webpack_require__(546);
var ReactDOMFactories = __webpack_require__(547);
var ReactElement = __webpack_require__(38);
var ReactPropTypes = __webpack_require__(548);
var ReactVersion = __webpack_require__(550);

var onlyChild = __webpack_require__(552);
var warning = __webpack_require__(1);

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(232);
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if (process.env.NODE_ENV !== 'production') {
  var warned = false;
  __spread = function () {
    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;
    return _assign.apply(null, arguments);
  };
}

var React = {

  // Modern

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,
  PureComponent: ReactPureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  // Classic

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function (mixin) {
    // Currently a noop. Will be used to validate and trace mixins.
    return mixin;
  },

  // This looks DOM specific but these are actually isomorphic helpers
  // since they are just generating DOM strings.
  DOM: ReactDOMFactories,

  version: ReactVersion,

  // Deprecated hook for JSX spread, don't use this for anything.
  __spread: __spread
};

module.exports = React;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 47 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(261), __esModule: true };

/***/ }),
/* 48 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var cov_2abd1ni5ez = function () {
  var path = '/data/zeit/next.js/client/webpack-hot-middleware-client.js',
      hash = '3ca9981a3f9c84b2bd3cbd1efe63180b82c23205',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/client/webpack-hot-middleware-client.js',
    statementMap: {
      '0': {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 16,
          column: 5
        }
      },
      '1': {
        start: {
          line: 7,
          column: 6
        },
        end: {
          line: 14,
          column: 7
        }
      },
      '2': {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 13,
          column: 9
        }
      },
      '3': {
        start: {
          line: 12,
          column: 10
        },
        end: {
          line: 12,
          column: 26
        }
      },
      '4': {
        start: {
          line: 15,
          column: 6
        },
        end: {
          line: 15,
          column: 12
        }
      },
      '5': {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 21,
          column: 5
        }
      },
      '6': {
        start: {
          line: 19,
          column: 6
        },
        end: {
          line: 19,
          column: 30
        }
      },
      '7': {
        start: {
          line: 20,
          column: 6
        },
        end: {
          line: 20,
          column: 12
        }
      },
      '8': {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 24
        }
      },
      '9': {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 30,
          column: 5
        }
      },
      '10': {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 30
        }
      },
      '11': {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 29,
          column: 12
        }
      },
      '12': {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      '13': {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 26
        }
      },
      '14': {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 48,
          column: 2
        }
      },
      '15': {
        start: {
          line: 42,
          column: 2
        },
        end: {
          line: 47,
          column: 3
        }
      },
      '16': {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 15
        }
      },
      '17': {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 54
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 40,
            column: 37
          },
          end: {
            line: 40,
            column: 38
          }
        },
        loc: {
          start: {
            line: 40,
            column: 46
          },
          end: {
            line: 48,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        }, {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 13,
            column: 9
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 13,
            column: 9
          }
        }, {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 13,
            column: 9
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        }, {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        }, {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 32,
            column: 20
          },
          end: {
            line: 32,
            column: 50
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        }, {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 42,
            column: 2
          },
          end: {
            line: 47,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 42,
            column: 2
          },
          end: {
            line: 47,
            column: 3
          }
        }, {
          start: {
            line: 42,
            column: 2
          },
          end: {
            line: 47,
            column: 3
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 43,
            column: 17
          },
          end: {
            line: 43,
            column: 31
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0
    },
    f: {
      '0': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var _toConsumableArray2 = __webpack_require__(95);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _keys = __webpack_require__(147);

var _keys2 = _interopRequireDefault(_keys);

var _getIterator2 = __webpack_require__(90);

var _getIterator3 = _interopRequireDefault(_getIterator2);

var cov_2abd1ni5ez = function () {
  var path = '/data/zeit/next.js/client/webpack-hot-middleware-client.js',
      hash = '632f257fc40f862dd5c8f8e137271239004cce7d',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/client/webpack-hot-middleware-client.js',
    statementMap: {
      '0': {
        start: {
          line: 4,
          column: 17
        },
        end: {
          line: 38,
          column: 1
        }
      },
      '1': {
        start: {
          line: 6,
          column: 4
        },
        end: {
          line: 16,
          column: 5
        }
      },
      '2': {
        start: {
          line: 7,
          column: 6
        },
        end: {
          line: 14,
          column: 7
        }
      },
      '3': {
        start: {
          line: 8,
          column: 24
        },
        end: {
          line: 8,
          column: 44
        }
      },
      '4': {
        start: {
          line: 9,
          column: 8
        },
        end: {
          line: 13,
          column: 9
        }
      },
      '5': {
        start: {
          line: 12,
          column: 10
        },
        end: {
          line: 12,
          column: 26
        }
      },
      '6': {
        start: {
          line: 15,
          column: 6
        },
        end: {
          line: 15,
          column: 12
        }
      },
      '7': {
        start: {
          line: 18,
          column: 4
        },
        end: {
          line: 21,
          column: 5
        }
      },
      '8': {
        start: {
          line: 19,
          column: 6
        },
        end: {
          line: 19,
          column: 30
        }
      },
      '9': {
        start: {
          line: 20,
          column: 6
        },
        end: {
          line: 20,
          column: 12
        }
      },
      '10': {
        start: {
          line: 23,
          column: 4
        },
        end: {
          line: 23,
          column: 24
        }
      },
      '11': {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 30,
          column: 5
        }
      },
      '12': {
        start: {
          line: 28,
          column: 6
        },
        end: {
          line: 28,
          column: 30
        }
      },
      '13': {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 29,
          column: 12
        }
      },
      '14': {
        start: {
          line: 32,
          column: 20
        },
        end: {
          line: 32,
          column: 50
        }
      },
      '15': {
        start: {
          line: 33,
          column: 4
        },
        end: {
          line: 36,
          column: 5
        }
      },
      '16': {
        start: {
          line: 35,
          column: 6
        },
        end: {
          line: 35,
          column: 26
        }
      },
      '17': {
        start: {
          line: 40,
          column: 0
        },
        end: {
          line: 48,
          column: 2
        }
      },
      '18': {
        start: {
          line: 41,
          column: 13
        },
        end: {
          line: 41,
          column: 33
        }
      },
      '19': {
        start: {
          line: 42,
          column: 2
        },
        end: {
          line: 47,
          column: 3
        }
      },
      '20': {
        start: {
          line: 43,
          column: 17
        },
        end: {
          line: 43,
          column: 31
        }
      },
      '21': {
        start: {
          line: 44,
          column: 4
        },
        end: {
          line: 44,
          column: 15
        }
      },
      '22': {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 46,
          column: 54
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 40,
            column: 37
          },
          end: {
            line: 40,
            column: 38
          }
        },
        loc: {
          start: {
            line: 40,
            column: 46
          },
          end: {
            line: 48,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        }, {
          start: {
            line: 6,
            column: 4
          },
          end: {
            line: 16,
            column: 5
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 13,
            column: 9
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 13,
            column: 9
          }
        }, {
          start: {
            line: 9,
            column: 8
          },
          end: {
            line: 13,
            column: 9
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        }, {
          start: {
            line: 18,
            column: 4
          },
          end: {
            line: 21,
            column: 5
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        }, {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 30,
            column: 5
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 32,
            column: 20
          },
          end: {
            line: 32,
            column: 50
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 32,
            column: 20
          },
          end: {
            line: 32,
            column: 44
          }
        }, {
          start: {
            line: 32,
            column: 48
          },
          end: {
            line: 32,
            column: 50
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        }, {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 36,
            column: 5
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 42,
            column: 2
          },
          end: {
            line: 47,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 42,
            column: 2
          },
          end: {
            line: 47,
            column: 3
          }
        }, {
          start: {
            line: 42,
            column: 2
          },
          end: {
            line: 47,
            column: 3
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 43,
            column: 17
          },
          end: {
            line: 43,
            column: 31
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 43,
            column: 17
          },
          end: {
            line: 43,
            column: 25
          }
        }, {
          start: {
            line: 43,
            column: 29
          },
          end: {
            line: 43,
            column: 31
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0
    },
    f: {
      '0': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var _clientOverlayFalseReloadTrue = __webpack_require__(567);

var _clientOverlayFalseReloadTrue2 = _interopRequireDefault(_clientOverlayFalseReloadTrue);

var _router = __webpack_require__(139);

var _router2 = _interopRequireDefault(_router);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var handlers = (++cov_2abd1ni5ez.s[0], {
  reload: function reload(route) {
    ++cov_2abd1ni5ez.s[1];
    ++cov_2abd1ni5ez.s[0];

    if (route === '/_error') {
      ++cov_2abd1ni5ez.b[0][0];
      ++cov_2abd1ni5ez.b[0][0];
      ++cov_2abd1ni5ez.s[2];
      ++cov_2abd1ni5ez.s[1];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = (0, _getIterator3.default)((0, _keys2.default)(_router2.default.components)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var r = _step.value;

          var _ref = (++cov_2abd1ni5ez.s[3], _router2.default.components[r]),
              err = _ref.err;

          ++cov_2abd1ni5ez.s[4];
          ++cov_2abd1ni5ez.s[2];

          if (err) {
            ++cov_2abd1ni5ez.b[1][0];
            ++cov_2abd1ni5ez.b[1][0];
            ++cov_2abd1ni5ez.s[5];
            ++cov_2abd1ni5ez.s[3];

            // reload all error routes
            // which are expected to be errors of '/_error' routes
            _router2.default.reload(r);
          } else {
            ++cov_2abd1ni5ez.b[1][1];
            ++cov_2abd1ni5ez.b[1][1];
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      ++cov_2abd1ni5ez.s[6];
      ++cov_2abd1ni5ez.s[4];
      return;
    } else {
      ++cov_2abd1ni5ez.b[0][1];
      ++cov_2abd1ni5ez.b[0][1];
    }

    ++cov_2abd1ni5ez.s[7];
    ++cov_2abd1ni5ez.s[5];
    if (route === '/_document') {
      ++cov_2abd1ni5ez.b[2][0];
      ++cov_2abd1ni5ez.b[2][0];
      ++cov_2abd1ni5ez.s[8];
      ++cov_2abd1ni5ez.s[6];

      window.location.reload();
      ++cov_2abd1ni5ez.s[9];
      ++cov_2abd1ni5ez.s[7];
      return;
    } else {
      ++cov_2abd1ni5ez.b[2][1];
      ++cov_2abd1ni5ez.b[2][1];
    }

    ++cov_2abd1ni5ez.s[10];
    ++cov_2abd1ni5ez.s[8];
    _router2.default.reload(route);
  },
  change: function change(route) {
    ++cov_2abd1ni5ez.s[11];
    ++cov_2abd1ni5ez.s[9];

    if (route === '/_document') {
      ++cov_2abd1ni5ez.b[3][0];
      ++cov_2abd1ni5ez.b[3][0];
      ++cov_2abd1ni5ez.s[12];
      ++cov_2abd1ni5ez.s[10];

      window.location.reload();
      ++cov_2abd1ni5ez.s[13];
      ++cov_2abd1ni5ez.s[11];
      return;
    } else {
      ++cov_2abd1ni5ez.b[3][1];
      ++cov_2abd1ni5ez.b[3][1];
    }

    var _ref2 = (++cov_2abd1ni5ez.s[14], (++cov_2abd1ni5ez.b[4][0], (++cov_2abd1ni5ez.b[4][0], _router2.default.components[route])) || (++cov_2abd1ni5ez.b[4][1], (++cov_2abd1ni5ez.b[4][1], {}))),
        err = _ref2.err;

    ++cov_2abd1ni5ez.s[15];
    ++cov_2abd1ni5ez.s[12];

    if (err) {
      ++cov_2abd1ni5ez.b[5][0];
      ++cov_2abd1ni5ez.b[5][0];
      ++cov_2abd1ni5ez.s[16];
      ++cov_2abd1ni5ez.s[13];

      // reload to recover from runtime errors
      _router2.default.reload(route);
    } else {
      ++cov_2abd1ni5ez.b[5][1];
      ++cov_2abd1ni5ez.b[5][1];
    }
  }
});

++cov_2abd1ni5ez.s[17];
++cov_2abd1ni5ez.s[14];
_clientOverlayFalseReloadTrue2.default.subscribe(function (obj) {
  ++cov_2abd1ni5ez.f[0];
  ++cov_2abd1ni5ez.f[0];

  var fn = (++cov_2abd1ni5ez.s[18], handlers[obj.action]);
  ++cov_2abd1ni5ez.s[19];
  ++cov_2abd1ni5ez.s[15];
  if (fn) {
    ++cov_2abd1ni5ez.b[6][0];
    ++cov_2abd1ni5ez.b[6][0];

    var data = (++cov_2abd1ni5ez.s[20], (++cov_2abd1ni5ez.b[7][0], (++cov_2abd1ni5ez.b[7][0], obj.data)) || (++cov_2abd1ni5ez.b[7][1], (++cov_2abd1ni5ez.b[7][1], [])));
    ++cov_2abd1ni5ez.s[21];
    ++cov_2abd1ni5ez.s[16];
    fn.apply(undefined, (0, _toConsumableArray3.default)(data));
  } else {
    ++cov_2abd1ni5ez.b[6][1];
    ++cov_2abd1ni5ez.b[6][1];
    ++cov_2abd1ni5ez.s[22];
    ++cov_2abd1ni5ez.s[17];

    throw new Error('Unexpected action ' + obj.action);
  }
});

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/data/zeit/next.js/dist/client/webpack-hot-middleware-client.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/data/zeit/next.js/dist/client/webpack-hot-middleware-client.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 49 */
/***/ (function(module, exports) {

var toString = {}.toString;

module.exports = function(it){
  return toString.call(it).slice(8, -1);
};

/***/ }),
/* 50 */
/***/ (function(module, exports) {

exports.f = {}.propertyIsEnumerable;

/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = function(bitmap, value){
  return {
    enumerable  : !(bitmap & 1),
    configurable: !(bitmap & 2),
    writable    : !(bitmap & 4),
    value       : value
  };
};

/***/ }),
/* 52 */
/***/ (function(module, exports, __webpack_require__) {

var def = __webpack_require__(14).f
  , has = __webpack_require__(34)
  , TAG = __webpack_require__(9)('toStringTag');

module.exports = function(it, tag, stat){
  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
};

/***/ }),
/* 53 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(291);
var global        = __webpack_require__(10)
  , hide          = __webpack_require__(29)
  , Iterators     = __webpack_require__(40)
  , TO_STRING_TAG = __webpack_require__(9)('toStringTag');

for(var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++){
  var NAME       = collections[i]
    , Collection = global[NAME]
    , proto      = Collection && Collection.prototype;
  if(proto && !proto[TO_STRING_TAG])hide(proto, TO_STRING_TAG, NAME);
  Iterators[NAME] = Iterators.Array;
}

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.decode = exports.parse = __webpack_require__(447);
exports.encode = exports.stringify = __webpack_require__(448);


/***/ }),
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var cov_1pwuz9v2g2 = function () {
  var path = '/data/zeit/next.js/lib/utils.js',
      hash = '78a281ef5c0f5c575d1021849087ce71cd9e5cf2',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/utils.js',
    statementMap: {
      '0': {
        start: {
          line: 2,
          column: 2
        },
        end: {
          line: 4,
          column: 3
        }
      },
      '1': {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 26
        }
      },
      '2': {
        start: {
          line: 9,
          column: 2
        },
        end: {
          line: 14,
          column: 3
        }
      },
      '3': {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 13,
          column: 5
        }
      },
      '4': {
        start: {
          line: 11,
          column: 6
        },
        end: {
          line: 11,
          column: 17
        }
      },
      '5': {
        start: {
          line: 12,
          column: 6
        },
        end: {
          line: 12,
          column: 26
        }
      },
      '6': {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 18,
          column: 54
        }
      },
      '7': {
        start: {
          line: 18,
          column: 45
        },
        end: {
          line: 18,
          column: 54
        }
      },
      '8': {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 27,
          column: 3
        }
      },
      '9': {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      '10': {
        start: {
          line: 23,
          column: 6
        },
        end: {
          line: 23,
          column: 19
        }
      },
      '11': {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 24,
          column: 28
        }
      },
      '12': {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 31
        }
      },
      '13': {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 30,
          column: 26
        }
      },
      '14': {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 32,
          column: 14
        }
      },
      '15': {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 40,
          column: 3
        }
      },
      '16': {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 24
        }
      },
      '17': {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 26
        }
      },
      '18': {
        start: {
          line: 42,
          column: 2
        },
        end: {
          line: 42,
          column: 20
        }
      },
      '19': {
        start: {
          line: 46,
          column: 2
        },
        end: {
          line: 46,
          column: 43
        }
      },
      '20': {
        start: {
          line: 46,
          column: 34
        },
        end: {
          line: 46,
          column: 43
        }
      },
      '21': {
        start: {
          line: 49,
          column: 2
        },
        end: {
          line: 53,
          column: 3
        }
      },
      '22': {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 28
        }
      },
      '23': {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 54,
          column: 14
        }
      }
    },
    fnMap: {
      '0': {
        name: 'warn',
        decl: {
          start: {
            line: 1,
            column: 16
          },
          end: {
            line: 1,
            column: 20
          }
        },
        loc: {
          start: {
            line: 1,
            column: 31
          },
          end: {
            line: 5,
            column: 1
          }
        }
      },
      '1': {
        name: 'execOnce',
        decl: {
          start: {
            line: 7,
            column: 16
          },
          end: {
            line: 7,
            column: 24
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 15,
            column: 1
          }
        }
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 9,
            column: 9
          },
          end: {
            line: 9,
            column: 10
          }
        },
        loc: {
          start: {
            line: 9,
            column: 22
          },
          end: {
            line: 14,
            column: 3
          }
        }
      },
      '3': {
        name: 'deprecated',
        decl: {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 17,
            column: 26
          }
        },
        loc: {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 33,
            column: 1
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 17
          }
        },
        loc: {
          start: {
            line: 21,
            column: 35
          },
          end: {
            line: 27,
            column: 3
          }
        }
      },
      '5': {
        name: 'printAndExit',
        decl: {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 35,
            column: 28
          }
        },
        loc: {
          start: {
            line: 35,
            column: 49
          },
          end: {
            line: 43,
            column: 1
          }
        }
      },
      '6': {
        name: 'loadGetInitialProps',
        decl: {
          start: {
            line: 45,
            column: 22
          },
          end: {
            line: 45,
            column: 41
          }
        },
        loc: {
          start: {
            line: 45,
            column: 59
          },
          end: {
            line: 55,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 4,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 4,
            column: 3
          }
        }, {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 4,
            column: 3
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        }, {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 18,
            column: 54
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 18,
            column: 54
          }
        }, {
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 18,
            column: 54
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }, {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 35,
            column: 39
          },
          end: {
            line: 35,
            column: 47
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        }, {
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 43
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 43
          }
        }, {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 43
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 53,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 53,
            column: 3
          }
        }, {
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 53,
            column: 3
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 50,
            column: 21
          },
          end: {
            line: 50,
            column: 60
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.loadGetInitialProps = undefined;

var _regenerator = __webpack_require__(67);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(66);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _assign = __webpack_require__(91);

var _assign2 = _interopRequireDefault(_assign);

var cov_1pwuz9v2g2 = function () {
  var path = '/data/zeit/next.js/lib/utils.js',
      hash = 'd69fff705c913f3dd18c9b5c1b261ba9088ab5d6',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/utils.js',
    statementMap: {
      '0': {
        start: {
          line: 2,
          column: 2
        },
        end: {
          line: 4,
          column: 3
        }
      },
      '1': {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 26
        }
      },
      '2': {
        start: {
          line: 8,
          column: 13
        },
        end: {
          line: 8,
          column: 18
        }
      },
      '3': {
        start: {
          line: 9,
          column: 2
        },
        end: {
          line: 14,
          column: 3
        }
      },
      '4': {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 13,
          column: 5
        }
      },
      '5': {
        start: {
          line: 11,
          column: 6
        },
        end: {
          line: 11,
          column: 17
        }
      },
      '6': {
        start: {
          line: 12,
          column: 6
        },
        end: {
          line: 12,
          column: 26
        }
      },
      '7': {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 18,
          column: 54
        }
      },
      '8': {
        start: {
          line: 18,
          column: 45
        },
        end: {
          line: 18,
          column: 54
        }
      },
      '9': {
        start: {
          line: 20,
          column: 15
        },
        end: {
          line: 20,
          column: 20
        }
      },
      '10': {
        start: {
          line: 21,
          column: 16
        },
        end: {
          line: 27,
          column: 3
        }
      },
      '11': {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 25,
          column: 5
        }
      },
      '12': {
        start: {
          line: 23,
          column: 6
        },
        end: {
          line: 23,
          column: 19
        }
      },
      '13': {
        start: {
          line: 24,
          column: 6
        },
        end: {
          line: 24,
          column: 28
        }
      },
      '14': {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 31
        }
      },
      '15': {
        start: {
          line: 30,
          column: 2
        },
        end: {
          line: 30,
          column: 26
        }
      },
      '16': {
        start: {
          line: 32,
          column: 2
        },
        end: {
          line: 32,
          column: 14
        }
      },
      '17': {
        start: {
          line: 36,
          column: 2
        },
        end: {
          line: 40,
          column: 3
        }
      },
      '18': {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 24
        }
      },
      '19': {
        start: {
          line: 39,
          column: 4
        },
        end: {
          line: 39,
          column: 26
        }
      },
      '20': {
        start: {
          line: 42,
          column: 2
        },
        end: {
          line: 42,
          column: 20
        }
      },
      '21': {
        start: {
          line: 46,
          column: 2
        },
        end: {
          line: 46,
          column: 43
        }
      },
      '22': {
        start: {
          line: 46,
          column: 34
        },
        end: {
          line: 46,
          column: 43
        }
      },
      '23': {
        start: {
          line: 48,
          column: 16
        },
        end: {
          line: 48,
          column: 52
        }
      },
      '24': {
        start: {
          line: 49,
          column: 2
        },
        end: {
          line: 53,
          column: 3
        }
      },
      '25': {
        start: {
          line: 50,
          column: 21
        },
        end: {
          line: 50,
          column: 60
        }
      },
      '26': {
        start: {
          line: 51,
          column: 20
        },
        end: {
          line: 51,
          column: 112
        }
      },
      '27': {
        start: {
          line: 52,
          column: 4
        },
        end: {
          line: 52,
          column: 28
        }
      },
      '28': {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 54,
          column: 14
        }
      }
    },
    fnMap: {
      '0': {
        name: 'warn',
        decl: {
          start: {
            line: 1,
            column: 16
          },
          end: {
            line: 1,
            column: 20
          }
        },
        loc: {
          start: {
            line: 1,
            column: 31
          },
          end: {
            line: 5,
            column: 1
          }
        }
      },
      '1': {
        name: 'execOnce',
        decl: {
          start: {
            line: 7,
            column: 16
          },
          end: {
            line: 7,
            column: 24
          }
        },
        loc: {
          start: {
            line: 7,
            column: 30
          },
          end: {
            line: 15,
            column: 1
          }
        }
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 9,
            column: 9
          },
          end: {
            line: 9,
            column: 10
          }
        },
        loc: {
          start: {
            line: 9,
            column: 22
          },
          end: {
            line: 14,
            column: 3
          }
        }
      },
      '3': {
        name: 'deprecated',
        decl: {
          start: {
            line: 17,
            column: 16
          },
          end: {
            line: 17,
            column: 26
          }
        },
        loc: {
          start: {
            line: 17,
            column: 41
          },
          end: {
            line: 33,
            column: 1
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 21,
            column: 16
          },
          end: {
            line: 21,
            column: 17
          }
        },
        loc: {
          start: {
            line: 21,
            column: 35
          },
          end: {
            line: 27,
            column: 3
          }
        }
      },
      '5': {
        name: 'printAndExit',
        decl: {
          start: {
            line: 35,
            column: 16
          },
          end: {
            line: 35,
            column: 28
          }
        },
        loc: {
          start: {
            line: 35,
            column: 49
          },
          end: {
            line: 43,
            column: 1
          }
        }
      },
      '6': {
        name: 'loadGetInitialProps',
        decl: {
          start: {
            line: 45,
            column: 22
          },
          end: {
            line: 45,
            column: 41
          }
        },
        loc: {
          start: {
            line: 45,
            column: 59
          },
          end: {
            line: 55,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 4,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 4,
            column: 3
          }
        }, {
          start: {
            line: 2,
            column: 2
          },
          end: {
            line: 4,
            column: 3
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        }, {
          start: {
            line: 10,
            column: 4
          },
          end: {
            line: 13,
            column: 5
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 18,
            column: 54
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 18,
            column: 54
          }
        }, {
          start: {
            line: 18,
            column: 2
          },
          end: {
            line: 18,
            column: 54
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }, {
          start: {
            line: 22,
            column: 4
          },
          end: {
            line: 25,
            column: 5
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 35,
            column: 39
          },
          end: {
            line: 35,
            column: 47
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 35,
            column: 46
          },
          end: {
            line: 35,
            column: 47
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        }, {
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 40,
            column: 3
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 43
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 43
          }
        }, {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 43
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 53,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 53,
            column: 3
          }
        }, {
          start: {
            line: 49,
            column: 2
          },
          end: {
            line: 53,
            column: 3
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 50,
            column: 21
          },
          end: {
            line: 50,
            column: 60
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 50,
            column: 21
          },
          end: {
            line: 50,
            column: 42
          }
        }, {
          start: {
            line: 50,
            column: 46
          },
          end: {
            line: 50,
            column: 60
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var loadGetInitialProps = exports.loadGetInitialProps = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(Component, ctx) {
    var props, compName, message;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            ++cov_1pwuz9v2g2.f[6];
            ++cov_1pwuz9v2g2.f[6];
            ++cov_1pwuz9v2g2.s[21];
            ++cov_1pwuz9v2g2.s[19];

            if (Component.getInitialProps) {
              _context.next = 12;
              break;
            }

            ++cov_1pwuz9v2g2.b[6][0];
            ++cov_1pwuz9v2g2.b[6][0];
            ++cov_1pwuz9v2g2.s[22];
            ++cov_1pwuz9v2g2.s[20];
            return _context.abrupt('return', {});

          case 12:
            ++cov_1pwuz9v2g2.b[6][1];
            ++cov_1pwuz9v2g2.b[6][1];

          case 14:
            ++cov_1pwuz9v2g2.s[23];
            _context.next = 17;
            return Component.getInitialProps(ctx);

          case 17:
            props = _context.sent;
            ++cov_1pwuz9v2g2.s[24];
            ++cov_1pwuz9v2g2.s[21];

            if (props) {
              _context.next = 30;
              break;
            }

            ++cov_1pwuz9v2g2.b[7][0];
            ++cov_1pwuz9v2g2.b[7][0];
            compName = (++cov_1pwuz9v2g2.s[25], (++cov_1pwuz9v2g2.b[8][0], (++cov_1pwuz9v2g2.b[8][0], Component.displayName)) || (++cov_1pwuz9v2g2.b[8][1], (++cov_1pwuz9v2g2.b[8][1], Component.name)));
            message = (++cov_1pwuz9v2g2.s[26], '"' + compName + '.getInitialProps()" should resolve to an object. But found "' + props + '" instead.');
            ++cov_1pwuz9v2g2.s[27];
            ++cov_1pwuz9v2g2.s[22];
            throw new Error(message);

          case 30:
            ++cov_1pwuz9v2g2.b[7][1];
            ++cov_1pwuz9v2g2.b[7][1];

          case 32:
            ++cov_1pwuz9v2g2.s[28];
            ++cov_1pwuz9v2g2.s[23];
            return _context.abrupt('return', props);

          case 35:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function loadGetInitialProps(_x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

exports.warn = warn;
exports.execOnce = execOnce;
exports.deprecated = deprecated;
exports.printAndExit = printAndExit;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function warn(message) {
  ++cov_1pwuz9v2g2.f[0];
  ++cov_1pwuz9v2g2.f[0];
  ++cov_1pwuz9v2g2.s[0];
  ++cov_1pwuz9v2g2.s[0];

  if (process.env.NODE_ENV !== 'production') {
    ++cov_1pwuz9v2g2.b[0][0];
    ++cov_1pwuz9v2g2.b[0][0];
    ++cov_1pwuz9v2g2.s[1];
    ++cov_1pwuz9v2g2.s[1];

    console.error(message);
  } else {
    ++cov_1pwuz9v2g2.b[0][1];
    ++cov_1pwuz9v2g2.b[0][1];
  }
}

function execOnce(fn) {
  var _this = this;

  ++cov_1pwuz9v2g2.f[1];
  ++cov_1pwuz9v2g2.f[1];

  var used = (++cov_1pwuz9v2g2.s[2], false);
  ++cov_1pwuz9v2g2.s[3];
  ++cov_1pwuz9v2g2.s[2];
  return function () {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    ++cov_1pwuz9v2g2.f[2];
    ++cov_1pwuz9v2g2.f[2];
    ++cov_1pwuz9v2g2.s[4];
    ++cov_1pwuz9v2g2.s[3];

    if (!used) {
      ++cov_1pwuz9v2g2.b[1][0];
      ++cov_1pwuz9v2g2.b[1][0];
      ++cov_1pwuz9v2g2.s[5];
      ++cov_1pwuz9v2g2.s[4];

      used = true;
      ++cov_1pwuz9v2g2.s[6];
      ++cov_1pwuz9v2g2.s[5];
      fn.apply(_this, args);
    } else {
      ++cov_1pwuz9v2g2.b[1][1];
      ++cov_1pwuz9v2g2.b[1][1];
    }
  };
}

function deprecated(fn, message) {
  ++cov_1pwuz9v2g2.f[3];
  ++cov_1pwuz9v2g2.f[3];
  ++cov_1pwuz9v2g2.s[7];
  ++cov_1pwuz9v2g2.s[6];

  if (process.env.NODE_ENV === 'production') {
      ++cov_1pwuz9v2g2.b[2][0];
      ++cov_1pwuz9v2g2.b[2][0];
      ++cov_1pwuz9v2g2.s[8];
      ++cov_1pwuz9v2g2.s[7];
      return fn;
    } else {
    ++cov_1pwuz9v2g2.b[2][1];
    ++cov_1pwuz9v2g2.b[2][1];
  }var warned = (++cov_1pwuz9v2g2.s[9], false);
  ++cov_1pwuz9v2g2.s[10];
  ++cov_1pwuz9v2g2.s[8];
  var newFn = function newFn() {
    ++cov_1pwuz9v2g2.f[4];
    ++cov_1pwuz9v2g2.f[4];
    ++cov_1pwuz9v2g2.s[11];
    ++cov_1pwuz9v2g2.s[9];

    if (!warned) {
      ++cov_1pwuz9v2g2.b[3][0];
      ++cov_1pwuz9v2g2.b[3][0];
      ++cov_1pwuz9v2g2.s[12];
      ++cov_1pwuz9v2g2.s[10];

      warned = true;
      ++cov_1pwuz9v2g2.s[13];
      ++cov_1pwuz9v2g2.s[11];
      console.error(message);
    } else {
      ++cov_1pwuz9v2g2.b[3][1];
      ++cov_1pwuz9v2g2.b[3][1];
    }
    ++cov_1pwuz9v2g2.s[14];
    ++cov_1pwuz9v2g2.s[12];

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return fn.apply(this, args);
  };

  // copy all properties
  ++cov_1pwuz9v2g2.s[15];
  ++cov_1pwuz9v2g2.s[13];
  (0, _assign2.default)(newFn, fn);

  ++cov_1pwuz9v2g2.s[16];
  ++cov_1pwuz9v2g2.s[14];
  return newFn;
}

function printAndExit(message) {
  var code = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (++cov_1pwuz9v2g2.b[4][0], (++cov_1pwuz9v2g2.b[4][0], 1));
  ++cov_1pwuz9v2g2.f[5];
  ++cov_1pwuz9v2g2.f[5];
  ++cov_1pwuz9v2g2.s[17];
  ++cov_1pwuz9v2g2.s[15];

  if (code === 0) {
    ++cov_1pwuz9v2g2.b[5][0];
    ++cov_1pwuz9v2g2.b[5][0];
    ++cov_1pwuz9v2g2.s[18];
    ++cov_1pwuz9v2g2.s[16];

    console.log(message);
  } else {
    ++cov_1pwuz9v2g2.b[5][1];
    ++cov_1pwuz9v2g2.b[5][1];
    ++cov_1pwuz9v2g2.s[19];
    ++cov_1pwuz9v2g2.s[17];

    console.error(message);
  }

  ++cov_1pwuz9v2g2.s[20];
  ++cov_1pwuz9v2g2.s[18];
  process.exit(code);
}

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/data/zeit/next.js/dist/lib/utils.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/data/zeit/next.js/dist/lib/utils.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 65 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _promise = __webpack_require__(47);

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (fn) {
  return function () {
    var gen = fn.apply(this, arguments);
    return new _promise2.default(function (resolve, reject) {
      function step(key, arg) {
        try {
          var info = gen[key](arg);
          var value = info.value;
        } catch (error) {
          reject(error);
          return;
        }

        if (info.done) {
          resolve(value);
        } else {
          return _promise2.default.resolve(value).then(function (value) {
            step("next", value);
          }, function (err) {
            step("throw", err);
          });
        }
      }

      return step("next");
    });
  };
};

/***/ }),
/* 67 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(557);


/***/ }),
/* 68 */
/***/ (function(module, exports, __webpack_require__) {

// getting tag from 19.1.3.6 Object.prototype.toString()
var cof = __webpack_require__(49)
  , TAG = __webpack_require__(9)('toStringTag')
  // ES3 wrong here
  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

// fallback for IE11 Script Access Denied error
var tryGet = function(it, key){
  try {
    return it[key];
  } catch(e){ /* empty */ }
};

module.exports = function(it){
  var O, T, B;
  return it === undefined ? 'Undefined' : it === null ? 'Null'
    // @@toStringTag case
    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T
    // builtinTag case
    : ARG ? cof(O)
    // ES3 arguments fallback
    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
};

/***/ }),
/* 69 */
/***/ (function(module, exports) {

// 7.2.1 RequireObjectCoercible(argument)
module.exports = function(it){
  if(it == undefined)throw TypeError("Can't call method on  " + it);
  return it;
};

/***/ }),
/* 70 */
/***/ (function(module, exports, __webpack_require__) {

var ctx         = __webpack_require__(28)
  , call        = __webpack_require__(153)
  , isArrayIter = __webpack_require__(151)
  , anObject    = __webpack_require__(21)
  , toLength    = __webpack_require__(73)
  , getIterFn   = __webpack_require__(111)
  , BREAK       = {}
  , RETURN      = {};
var exports = module.exports = function(iterable, entries, fn, that, ITERATOR){
  var iterFn = ITERATOR ? function(){ return iterable; } : getIterFn(iterable)
    , f      = ctx(fn, that, entries ? 2 : 1)
    , index  = 0
    , length, step, iterator, result;
  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
  // fast case for arrays with default iterator
  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
    if(result === BREAK || result === RETURN)return result;
  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
    result = call(iterator, f, step.value, entries);
    if(result === BREAK || result === RETURN)return result;
  }
};
exports.BREAK  = BREAK;
exports.RETURN = RETURN;

/***/ }),
/* 71 */
/***/ (function(module, exports) {

module.exports = true;

/***/ }),
/* 72 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
var anObject    = __webpack_require__(21)
  , dPs         = __webpack_require__(281)
  , enumBugKeys = __webpack_require__(99)
  , IE_PROTO    = __webpack_require__(105)('IE_PROTO')
  , Empty       = function(){ /* empty */ }
  , PROTOTYPE   = 'prototype';

// Create object with fake `null` prototype: use iframe Object with cleared prototype
var createDict = function(){
  // Thrash, waste and sodomy: IE GC bug
  var iframe = __webpack_require__(98)('iframe')
    , i      = enumBugKeys.length
    , lt     = '<'
    , gt     = '>'
    , iframeDocument;
  iframe.style.display = 'none';
  __webpack_require__(149).appendChild(iframe);
  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
  // createDict = iframe.contentWindow.Object;
  // html.removeChild(iframe);
  iframeDocument = iframe.contentWindow.document;
  iframeDocument.open();
  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
  iframeDocument.close();
  createDict = iframeDocument.F;
  while(i--)delete createDict[PROTOTYPE][enumBugKeys[i]];
  return createDict();
};

module.exports = Object.create || function create(O, Properties){
  var result;
  if(O !== null){
    Empty[PROTOTYPE] = anObject(O);
    result = new Empty;
    Empty[PROTOTYPE] = null;
    // add "__proto__" for Object.getPrototypeOf polyfill
    result[IE_PROTO] = O;
  } else result = createDict();
  return Properties === undefined ? result : dPs(result, Properties);
};


/***/ }),
/* 73 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.15 ToLength
var toInteger = __webpack_require__(107)
  , min       = Math.min;
module.exports = function(it){
  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
};

/***/ }),
/* 74 */
/***/ (function(module, exports) {

var id = 0
  , px = Math.random();
module.exports = function(key){
  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
};

/***/ }),
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			configurable: false,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			configurable: false,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(252), __esModule: true };

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(254), __esModule: true };

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(256), __esModule: true };

/***/ }),
/* 93 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(262), __esModule: true };

/***/ }),
/* 94 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _assign = __webpack_require__(91);

var _assign2 = _interopRequireDefault(_assign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = _assign2.default || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

/***/ }),
/* 95 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _from = __webpack_require__(242);

var _from2 = _interopRequireDefault(_from);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  } else {
    return (0, _from2.default)(arr);
  }
};

/***/ }),
/* 96 */
/***/ (function(module, exports) {

module.exports = function(it){
  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
  return it;
};

/***/ }),
/* 97 */
/***/ (function(module, exports) {

module.exports = function(it, Constructor, name, forbiddenField){
  if(!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)){
    throw TypeError(name + ': incorrect invocation!');
  } return it;
};

/***/ }),
/* 98 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(30)
  , document = __webpack_require__(10).document
  // in old IE typeof document.createElement is 'object'
  , is = isObject(document) && isObject(document.createElement);
module.exports = function(it){
  return is ? document.createElement(it) : {};
};

/***/ }),
/* 99 */
/***/ (function(module, exports) {

// IE 8- don't enum bug keys
module.exports = (
  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
).split(',');

/***/ }),
/* 100 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for non-array-like ES3 and non-enumerable old V8 strings
var cof = __webpack_require__(49);
module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
  return cof(it) == 'String' ? it.split('') : Object(it);
};

/***/ }),
/* 101 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY        = __webpack_require__(71)
  , $export        = __webpack_require__(12)
  , redefine       = __webpack_require__(161)
  , hide           = __webpack_require__(29)
  , has            = __webpack_require__(34)
  , Iterators      = __webpack_require__(40)
  , $iterCreate    = __webpack_require__(277)
  , setToStringTag = __webpack_require__(52)
  , getPrototypeOf = __webpack_require__(158)
  , ITERATOR       = __webpack_require__(9)('iterator')
  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
  , FF_ITERATOR    = '@@iterator'
  , KEYS           = 'keys'
  , VALUES         = 'values';

var returnThis = function(){ return this; };

module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
  $iterCreate(Constructor, NAME, next);
  var getMethod = function(kind){
    if(!BUGGY && kind in proto)return proto[kind];
    switch(kind){
      case KEYS: return function keys(){ return new Constructor(this, kind); };
      case VALUES: return function values(){ return new Constructor(this, kind); };
    } return function entries(){ return new Constructor(this, kind); };
  };
  var TAG        = NAME + ' Iterator'
    , DEF_VALUES = DEFAULT == VALUES
    , VALUES_BUG = false
    , proto      = Base.prototype
    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
    , $default   = $native || getMethod(DEFAULT)
    , $entries   = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined
    , $anyNative = NAME == 'Array' ? proto.entries || $native : $native
    , methods, key, IteratorPrototype;
  // Fix native
  if($anyNative){
    IteratorPrototype = getPrototypeOf($anyNative.call(new Base));
    if(IteratorPrototype !== Object.prototype){
      // Set @@toStringTag to native iterators
      setToStringTag(IteratorPrototype, TAG, true);
      // fix for some old engines
      if(!LIBRARY && !has(IteratorPrototype, ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
    }
  }
  // fix Array#{values, @@iterator}.name in V8 / FF
  if(DEF_VALUES && $native && $native.name !== VALUES){
    VALUES_BUG = true;
    $default = function values(){ return $native.call(this); };
  }
  // Define iterator
  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
    hide(proto, ITERATOR, $default);
  }
  // Plug for library
  Iterators[NAME] = $default;
  Iterators[TAG]  = returnThis;
  if(DEFAULT){
    methods = {
      values:  DEF_VALUES ? $default : getMethod(VALUES),
      keys:    IS_SET     ? $default : getMethod(KEYS),
      entries: $entries
    };
    if(FORCED)for(key in methods){
      if(!(key in proto))redefine(proto, key, methods[key]);
    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
  }
  return methods;
};

/***/ }),
/* 102 */
/***/ (function(module, exports, __webpack_require__) {

var META     = __webpack_require__(74)('meta')
  , isObject = __webpack_require__(30)
  , has      = __webpack_require__(34)
  , setDesc  = __webpack_require__(14).f
  , id       = 0;
var isExtensible = Object.isExtensible || function(){
  return true;
};
var FREEZE = !__webpack_require__(33)(function(){
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function(it){
  setDesc(it, META, {value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  }});
};
var fastKey = function(it, create){
  // return primitive with prefix
  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return 'F';
    // not necessary to add metadata
    if(!create)return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function(it, create){
  if(!has(it, META)){
    // can't set metadata to uncaught frozen object
    if(!isExtensible(it))return true;
    // not necessary to add metadata
    if(!create)return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function(it){
  if(FREEZE && meta.NEED && isExtensible(it) && !has(it, META))setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY:      META,
  NEED:     false,
  fastKey:  fastKey,
  getWeak:  getWeak,
  onFreeze: onFreeze
};

/***/ }),
/* 103 */
/***/ (function(module, exports) {

exports.f = Object.getOwnPropertySymbols;

/***/ }),
/* 104 */
/***/ (function(module, exports, __webpack_require__) {

var hide = __webpack_require__(29);
module.exports = function(target, src, safe){
  for(var key in src){
    if(safe && target[key])target[key] = src[key];
    else hide(target, key, src[key]);
  } return target;
};

/***/ }),
/* 105 */
/***/ (function(module, exports, __webpack_require__) {

var shared = __webpack_require__(106)('keys')
  , uid    = __webpack_require__(74);
module.exports = function(key){
  return shared[key] || (shared[key] = uid(key));
};

/***/ }),
/* 106 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(10)
  , SHARED = '__core-js_shared__'
  , store  = global[SHARED] || (global[SHARED] = {});
module.exports = function(key){
  return store[key] || (store[key] = {});
};

/***/ }),
/* 107 */
/***/ (function(module, exports) {

// 7.1.4 ToInteger
var ceil  = Math.ceil
  , floor = Math.floor;
module.exports = function(it){
  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
};

/***/ }),
/* 108 */
/***/ (function(module, exports, __webpack_require__) {

// 7.1.1 ToPrimitive(input [, PreferredType])
var isObject = __webpack_require__(30);
// instead of the ES6 spec version, we didn't implement @@toPrimitive case
// and the second argument - flag - preferred type is a string
module.exports = function(it, S){
  if(!isObject(it))return it;
  var fn, val;
  if(S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  if(typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it)))return val;
  if(!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it)))return val;
  throw TypeError("Can't convert object to primitive value");
};

/***/ }),
/* 109 */
/***/ (function(module, exports, __webpack_require__) {

var global         = __webpack_require__(10)
  , core           = __webpack_require__(6)
  , LIBRARY        = __webpack_require__(71)
  , wksExt         = __webpack_require__(110)
  , defineProperty = __webpack_require__(14).f;
module.exports = function(name){
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if(name.charAt(0) != '_' && !(name in $Symbol))defineProperty($Symbol, name, {value: wksExt.f(name)});
};

/***/ }),
/* 110 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(9);

/***/ }),
/* 111 */
/***/ (function(module, exports, __webpack_require__) {

var classof   = __webpack_require__(68)
  , ITERATOR  = __webpack_require__(9)('iterator')
  , Iterators = __webpack_require__(40);
module.exports = __webpack_require__(6).getIteratorMethod = function(it){
  if(it != undefined)return it[ITERATOR]
    || it['@@iterator']
    || Iterators[classof(it)];
};

/***/ }),
/* 112 */
/***/ (function(module, exports) {



/***/ }),
/* 113 */,
/* 114 */
/***/ (function(module, exports, __webpack_require__) {

var implementation = __webpack_require__(325);

module.exports = Function.prototype.bind || implementation;


/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.compose = exports.merge = exports.$ = exports.style = exports.presets = exports.keyframes = exports.fontFace = exports.insertGlobal = exports.insertRule = exports.plugins = exports.styleSheet = undefined;
exports.speedy = speedy;
exports.simulations = simulations;
exports.simulate = simulate;
exports.cssLabels = cssLabels;
exports.isLikeRule = isLikeRule;
exports.idFor = idFor;
exports.css = css;
exports.rehydrate = rehydrate;
exports.flush = flush;
exports.select = select;
exports.parent = parent;
exports.media = media;
exports.pseudo = pseudo;
exports.active = active;
exports.any = any;
exports.checked = checked;
exports.disabled = disabled;
exports.empty = empty;
exports.enabled = enabled;
exports._default = _default;
exports.first = first;
exports.firstChild = firstChild;
exports.firstOfType = firstOfType;
exports.fullscreen = fullscreen;
exports.focus = focus;
exports.hover = hover;
exports.indeterminate = indeterminate;
exports.inRange = inRange;
exports.invalid = invalid;
exports.lastChild = lastChild;
exports.lastOfType = lastOfType;
exports.left = left;
exports.link = link;
exports.onlyChild = onlyChild;
exports.onlyOfType = onlyOfType;
exports.optional = optional;
exports.outOfRange = outOfRange;
exports.readOnly = readOnly;
exports.readWrite = readWrite;
exports.required = required;
exports.right = right;
exports.root = root;
exports.scope = scope;
exports.target = target;
exports.valid = valid;
exports.visited = visited;
exports.dir = dir;
exports.lang = lang;
exports.not = not;
exports.nthChild = nthChild;
exports.nthLastChild = nthLastChild;
exports.nthLastOfType = nthLastOfType;
exports.nthOfType = nthOfType;
exports.after = after;
exports.before = before;
exports.firstLetter = firstLetter;
exports.firstLine = firstLine;
exports.selection = selection;
exports.backdrop = backdrop;
exports.placeholder = placeholder;
exports.cssFor = cssFor;
exports.attribsFor = attribsFor;

var _objectAssign = __webpack_require__(4);

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _sheet = __webpack_require__(333);

var _CSSPropertyOperations = __webpack_require__(177);

var _clean = __webpack_require__(328);

var _clean2 = _interopRequireDefault(_clean);

var _plugins = __webpack_require__(331);

var _hash = __webpack_require__(329);

var _hash2 = _interopRequireDefault(_hash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
/* stylesheet */


var styleSheet = exports.styleSheet = new _sheet.StyleSheet();
// an isomorphic StyleSheet shim. hides all the nitty gritty.

// /**************** LIFTOFF IN 3... 2... 1... ****************/
styleSheet.inject(); //eslint-disable-line indent
// /****************      TO THE MOOOOOOON     ****************/

// convenience function to toggle speedy
function speedy(bool) {
  return styleSheet.speedy(bool);
}

// plugins
// we include these by default
var plugins = exports.plugins = styleSheet.plugins = new _plugins.PluginSet([_plugins.prefixes, _plugins.fallbacks]);
plugins.media = new _plugins.PluginSet(); // neat! media, font-face, keyframes
plugins.fontFace = new _plugins.PluginSet();
plugins.keyframes = new _plugins.PluginSet([_plugins.prefixes]);

// define some constants

var isDev = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV;
var isTest = process.env.NODE_ENV === 'test';

/**** simulations  ****/

// a flag to enable simulation meta tags on dom nodes
// defaults to true in dev mode. recommend *not* to
// toggle often.
var canSimulate = isDev;

// we use these flags for issuing warnings when simulate is called
// in prod / in incorrect order
var warned1 = false,
    warned2 = false;

// toggles simulation activity. shouldn't be needed in most cases
function simulations() {
  var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

  canSimulate = !!bool;
}

// use this on dom nodes to 'simulate' pseudoclasses
// <div {...hover({ color: 'red' })} {...simulate('hover', 'visited')}>...</div>
// you can even send in some weird ones, as long as it's in simple format
// and matches an existing rule on the element
// eg simulate('nthChild2', ':hover:active') etc
function simulate() {
  for (var _len = arguments.length, pseudos = Array(_len), _key2 = 0; _key2 < _len; _key2++) {
    pseudos[_key2] = arguments[_key2];
  }

  pseudos = (0, _clean2.default)(pseudos);
  if (!pseudos) return {};
  if (!canSimulate) {
    if (!warned1) {
      console.warn('can\'t simulate without once calling simulations(true)'); //eslint-disable-line no-console
      warned1 = true;
    }
    if (!isDev && !isTest && !warned2) {
      console.warn('don\'t use simulation outside dev'); //eslint-disable-line no-console
      warned2 = true;
    }
    return {};
  }
  return pseudos.reduce(function (o, p) {
    return o['data-simulate-' + simple(p)] = '', o;
  }, {});
}

/**** labels ****/
// toggle for debug labels.
// *shouldn't* have to mess with this manually
var hasLabels = isDev;

function cssLabels(bool) {
  hasLabels = !!bool;
}

// takes a string, converts to lowercase, strips out nonalphanumeric.
function simple(str) {
  return str.toLowerCase().replace(/[^a-z0-9]/g, '');
}

// hashes a string to something 'unique'
// we use this to generate ids for styles


function hashify() {
  var str = '';

  for (var _len2 = arguments.length, objs = Array(_len2), _key3 = 0; _key3 < _len2; _key3++) {
    objs[_key3] = arguments[_key3];
  }

  for (var i = 0; i < objs.length; i++) {
    str += JSON.stringify(objs[i]);
  }
  return (0, _hash2.default)(str).toString(36);
}

// of shape { 'data-css-<id>': '' }
function isLikeRule(rule) {
  var keys = Object.keys(rule).filter(function (x) {
    return x !== 'toString';
  });
  if (keys.length !== 1) {
    return false;
  }
  return !!/data\-css\-([a-zA-Z0-9]+)/.exec(keys[0]);
}

// extracts id from a { 'data-css-<id>': ''} like object
function idFor(rule) {
  var keys = Object.keys(rule).filter(function (x) {
    return x !== 'toString';
  });
  if (keys.length !== 1) throw new Error('not a rule');
  var regex = /data\-css\-([a-zA-Z0-9]+)/;
  var match = regex.exec(keys[0]);
  if (!match) throw new Error('not a rule');
  return match[1];
}

function selector(id, path) {

  if (!id) {
    return path.replace(/\&/g, '');
  }
  if (!path) return '.css-' + id + ',[data-css-' + id + ']';

  var x = path.split(',').map(function (x) {
    return x.indexOf('&') >= 0 ? [x.replace(/\&/mg, '.css-' + id), x.replace(/\&/mg, '[data-css-' + id + ']')].join(',') // todo - make sure each sub selector has an &
    : '.css-' + id + x + ',[data-css-' + id + ']' + x;
  }).join(',');

  if (canSimulate && /^\&\:/.exec(path) && !/\s/.exec(path)) {
    x += ',.css-' + id + '[data-simulate-' + simple(path) + '],[data-css-' + id + '][data-simulate-' + simple(path) + ']';
  }
  return x;
}

function toCSS(_ref) {
  var selector = _ref.selector,
      style = _ref.style;

  var result = plugins.transform({ selector: selector, style: style });
  return result.selector + '{' + (0, _CSSPropertyOperations.createMarkupForStyles)(result.style) + '}';
}

function deconstruct(style) {
  // we can be sure it's not infinitely nested here 
  var plain = void 0,
      selects = void 0,
      medias = void 0,
      supports = void 0;
  Object.keys(style).forEach(function (key) {
    if (key.indexOf('&') >= 0) {
      selects = selects || {};
      selects[key] = style[key];
    } else if (key.indexOf('@media') === 0) {
      medias = medias || {};
      medias[key] = deconstruct(style[key]);
    } else if (key.indexOf('@supports') === 0) {
      supports = supports || {};
      supports[key] = deconstruct(style[key]);
    } else if (key === 'label') {
      if (style.label.length > 0) {
        plain = plain || {};
        plain.label = hasLabels ? style.label.join('.') : '';
      }
    } else {
      plain = plain || {};
      plain[key] = style[key];
    }
  });
  return { plain: plain, selects: selects, medias: medias, supports: supports };
}

function deconstructedStyleToCSS(id, style) {
  var css = [];

  // plugins here
  var plain = style.plain,
      selects = style.selects,
      medias = style.medias,
      supports = style.supports;

  if (plain) {
    css.push(toCSS({ style: plain, selector: selector(id) }));
  }
  if (selects) {
    Object.keys(selects).forEach(function (key) {
      return css.push(toCSS({ style: selects[key], selector: selector(id, key) }));
    });
  }
  if (medias) {
    Object.keys(medias).forEach(function (key) {
      return css.push(key + '{' + deconstructedStyleToCSS(id, medias[key]).join('') + '}');
    });
  }
  if (supports) {
    Object.keys(supports).forEach(function (key) {
      return css.push(key + '{' + deconstructedStyleToCSS(id, supports[key]).join('') + '}');
    });
  }
  return css;
}

// this cache to track which rules have
// been inserted into the stylesheet
var inserted = styleSheet.inserted = {};

// and helpers to insert rules into said styleSheet
function insert(spec) {
  if (!inserted[spec.id]) {
    inserted[spec.id] = true;
    var deconstructed = deconstruct(spec.style);
    deconstructedStyleToCSS(spec.id, deconstructed).map(function (cssRule) {
      return styleSheet.insert(cssRule);
    });
  }
}

// a simple cache to store generated rules
var registered = styleSheet.registered = {};
function register(spec) {
  if (!registered[spec.id]) {
    registered[spec.id] = spec;
  }
}

function _getRegistered(rule) {
  if (isLikeRule(rule)) {
    var ret = registered[idFor(rule)];
    if (ret == null) {
      throw new Error('[glamor] an unexpected rule cache miss occurred. This is probably a sign of multiple glamor instances in your app. See https://github.com/threepointone/glamor/issues/79');
    }
    return ret;
  }
  return rule;
}

// todo - perf
var ruleCache = {};
function toRule(spec) {
  register(spec);
  insert(spec);

  if (ruleCache[spec.id]) {
    return ruleCache[spec.id];
  }

  var ret = _defineProperty({}, 'data-css-' + spec.id, hasLabels ? spec.label || '' : '');
  Object.defineProperty(ret, 'toString', {
    enumerable: false, value: function value() {
      return 'css-' + spec.id;
    }
  });
  ruleCache[spec.id] = ret;
  return ret;
}

function log() {
  //eslint-disable-line no-unused-vars
  console.log(this); //eslint-disable-line no-console
  return this;
}

function isSelector(key) {
  var possibles = [':', '.', '[', '>', ' '],
      found = false,
      ch = key.charAt(0);
  for (var i = 0; i < possibles.length; i++) {
    if (ch === possibles[i]) {
      found = true;
      break;
    }
  }
  return found || key.indexOf('&') >= 0;
}

function joinSelectors(a, b) {
  var as = a.split(',').map(function (a) {
    return !(a.indexOf('&') >= 0) ? '&' + a : a;
  });
  var bs = b.split(',').map(function (b) {
    return !(b.indexOf('&') >= 0) ? '&' + b : b;
  });

  return bs.reduce(function (arr, b) {
    return arr.concat(as.map(function (a) {
      return b.replace(/\&/g, a);
    }));
  }, []).join(',');
}

function joinMediaQueries(a, b) {
  return a ? '@media ' + a.substring(6) + ' and ' + b.substring(6) : b;
}

function isMediaQuery(key) {
  return key.indexOf('@media') === 0;
}

function isSupports(key) {
  return key.indexOf('@supports') === 0;
}

function joinSupports(a, b) {
  return a ? '@supports ' + a.substring(9) + ' and ' + b.substring(9) : b;
}

// flatten a nested array
function flatten(inArr) {
  var arr = [];
  for (var i = 0; i < inArr.length; i++) {
    if (Array.isArray(inArr[i])) arr = arr.concat(flatten(inArr[i]));else arr = arr.concat(inArr[i]);
  }
  return arr;
}

// mutable! modifies dest.
function build(dest, _ref2) {
  var _ref2$selector = _ref2.selector,
      selector = _ref2$selector === undefined ? '' : _ref2$selector,
      _ref2$mq = _ref2.mq,
      mq = _ref2$mq === undefined ? '' : _ref2$mq,
      _ref2$supp = _ref2.supp,
      supp = _ref2$supp === undefined ? '' : _ref2$supp,
      _ref2$src = _ref2.src,
      src = _ref2$src === undefined ? {} : _ref2$src;


  if (!Array.isArray(src)) {
    src = [src];
  }
  src = flatten(src);

  src.forEach(function (_src) {
    if (isLikeRule(_src)) {
      var reg = _getRegistered(_src);
      if (reg.type !== 'css') {
        throw new Error('cannot merge this rule');
      }
      _src = reg.style;
    }
    _src = (0, _clean2.default)(_src);
    if (_src && _src.composes) {
      build(dest, { selector: selector, mq: mq, supp: supp, src: _src.composes });
    }
    Object.keys(_src || {}).forEach(function (key) {
      if (isSelector(key)) {

        var _key = key === '::placeholder' ? '::placeholder,::-webkit-input-placeholder,::-moz-placeholder,::-ms-input-placeholder' : key;

        build(dest, { selector: joinSelectors(selector, _key), mq: mq, supp: supp, src: _src[key] });
      } else if (isMediaQuery(key)) {
        build(dest, { selector: selector, mq: joinMediaQueries(mq, key), supp: supp, src: _src[key] });
      } else if (isSupports(key)) {
        build(dest, { selector: selector, mq: mq, supp: joinSupports(supp, key), src: _src[key] });
      } else if (key === 'composes') {
        // ignore, we already dealth with it
      } else {
        var _dest = dest;
        if (supp) {
          _dest[supp] = _dest[supp] || {};
          _dest = _dest[supp];
        }
        if (mq) {
          _dest[mq] = _dest[mq] || {};
          _dest = _dest[mq];
        }
        if (selector) {
          _dest[selector] = _dest[selector] || {};
          _dest = _dest[selector];
        }

        if (key === 'label') {
          if (hasLabels) {
            dest.label = dest.label.concat(_src.label);
          }
        } else {
          _dest[key] = _src[key];
        }
      }
    });
  });
}

function _css(rules) {
  var style = { label: [] };
  build(style, { src: rules }); // mutative! but worth it. 

  var spec = {
    id: hashify(style),
    style: style, label: hasLabels ? style.label.join('.') : '',
    type: 'css'
  };
  return toRule(spec);
}

var nullrule = {
  // 'data-css-nil': ''
};
Object.defineProperty(nullrule, 'toString', {
  enumerable: false, value: function value() {
    return 'css-nil';
  }
});

var inputCaches = typeof WeakMap !== 'undefined' ? [nullrule, new WeakMap(), new WeakMap(), new WeakMap()] : [nullrule];

var warnedWeakMapError = false;
function multiIndexCache(fn) {
  return function (args) {
    if (inputCaches[args.length]) {
      var coi = inputCaches[args.length];
      var ctr = 0;
      while (ctr < args.length - 1) {
        if (!coi.has(args[ctr])) {
          coi.set(args[ctr], new WeakMap());
        }
        coi = coi.get(args[ctr]);
        ctr++;
      }
      if (coi.has(args[args.length - 1])) {
        var ret = coi.get(args[ctr]);

        if (registered[ret.toString().substring(4)]) {
          // make sure it hasn't been flushed 
          return ret;
        }
      }
    }
    var value = fn(args);
    if (inputCaches[args.length]) {
      var _ctr = 0,
          _coi = inputCaches[args.length];
      while (_ctr < args.length - 1) {
        _coi = _coi.get(args[_ctr]);
        _ctr++;
      }
      try {
        _coi.set(args[_ctr], value);
      } catch (err) {
        if (isDev && !warnedWeakMapError) {
          var _console;

          warnedWeakMapError = true;
          (_console = console).warn.apply(_console, ['failed setting the WeakMap cache for args:'].concat(_toConsumableArray(args))); // eslint-disable-line no-console
          console.warn('this should NOT happen, please file a bug on the github repo.'); // eslint-disable-line no-console
        }
      }
    }
    return value;
  };
}

var cachedCss = typeof WeakMap !== 'undefined' ? multiIndexCache(_css) : _css;

function css() {
  for (var _len3 = arguments.length, rules = Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
    rules[_key4] = arguments[_key4];
  }

  if (rules[0] && rules[0].length && rules[0].raw) {
    throw new Error('you forgot to include glamor/babel in your babel plugins.');
  }

  rules = (0, _clean2.default)(rules);
  if (!rules) {
    return nullrule;
  }

  return cachedCss(rules);
}

css.insert = function (css) {
  var spec = {
    id: hashify(css),
    css: css,
    type: 'raw'
  };
  register(spec);
  if (!inserted[spec.id]) {
    styleSheet.insert(spec.css);
    inserted[spec.id] = true;
  }
};

var insertRule = exports.insertRule = css.insert;

css.global = function (selector, style) {
  return css.insert(toCSS({ selector: selector, style: style }));
};

var insertGlobal = exports.insertGlobal = css.global;

function insertKeyframe(spec) {
  if (!inserted[spec.id]) {
    (function () {
      var inner = Object.keys(spec.keyframes).map(function (kf) {
        var result = plugins.keyframes.transform({ id: spec.id, name: kf, style: spec.keyframes[kf] });
        return result.name + '{' + (0, _CSSPropertyOperations.createMarkupForStyles)(result.style) + '}';
      }).join('');

      ['-webkit-', '-moz-', '-o-', ''].forEach(function (prefix) {
        return styleSheet.insert('@' + prefix + 'keyframes ' + (spec.name + '_' + spec.id) + '{' + inner + '}');
      });

      inserted[spec.id] = true;
    })();
  }
}
css.keyframes = function (name, kfs) {
  if (!kfs) {
    kfs = name, name = 'animation';
  }

  // do not ignore empty keyframe definitions for now.
  kfs = (0, _clean2.default)(kfs) || {};
  var spec = {
    id: hashify(name, kfs),
    type: 'keyframes',
    name: name,
    keyframes: kfs
  };
  register(spec);
  insertKeyframe(spec);
  return name + '_' + spec.id;
};

// we don't go all out for fonts as much, giving a simple font loading strategy
// use a fancier lib if you need moar power
css.fontFace = function (font) {
  font = (0, _clean2.default)(font);
  var spec = {
    id: hashify(font),
    type: 'font-face',
    font: font
  };
  register(spec);
  insertFontFace(spec);

  return font.fontFamily;
};

var fontFace = exports.fontFace = css.fontFace;
var keyframes = exports.keyframes = css.keyframes;

function insertFontFace(spec) {
  if (!inserted[spec.id]) {
    styleSheet.insert('@font-face{' + (0, _CSSPropertyOperations.createMarkupForStyles)(spec.font) + '}');
    inserted[spec.id] = true;
  }
}

// rehydrate the insertion cache with ids sent from
// renderStatic / renderStaticOptimized
function rehydrate(ids) {
  // load up ids
  (0, _objectAssign2.default)(inserted, ids.reduce(function (o, i) {
    return o[i] = true, o;
  }, {}));
  // assume css loaded separately
}

// clears out the cache and empties the stylesheet
// best for tests, though there might be some value for SSR.

function flush() {
  inserted = styleSheet.inserted = {};
  registered = styleSheet.registered = {};
  ruleCache = {};
  styleSheet.flush();
  styleSheet.inject();
}

var presets = exports.presets = {
  mobile: '(min-width: 400px)',
  Mobile: '@media (min-width: 400px)',
  phablet: '(min-width: 550px)',
  Phablet: '@media (min-width: 550px)',
  tablet: '(min-width: 750px)',
  Tablet: '@media (min-width: 750px)',
  desktop: '(min-width: 1000px)',
  Desktop: '@media (min-width: 1000px)',
  hd: '(min-width: 1200px)',
  Hd: '@media (min-width: 1200px)'
};

var style = exports.style = css;

function select(selector) {
  for (var _len4 = arguments.length, styles = Array(_len4 > 1 ? _len4 - 1 : 0), _key5 = 1; _key5 < _len4; _key5++) {
    styles[_key5 - 1] = arguments[_key5];
  }

  if (!selector) {
    return style(styles);
  }
  return css(_defineProperty({}, selector, styles));
}
var $ = exports.$ = select;

function parent(selector) {
  for (var _len5 = arguments.length, styles = Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {
    styles[_key6 - 1] = arguments[_key6];
  }

  return css(_defineProperty({}, selector + ' &', styles));
}

var merge = exports.merge = css;
var compose = exports.compose = css;

function media(query) {
  for (var _len6 = arguments.length, rules = Array(_len6 > 1 ? _len6 - 1 : 0), _key7 = 1; _key7 < _len6; _key7++) {
    rules[_key7 - 1] = arguments[_key7];
  }

  return css(_defineProperty({}, '@media ' + query, rules));
}

function pseudo(selector) {
  for (var _len7 = arguments.length, styles = Array(_len7 > 1 ? _len7 - 1 : 0), _key8 = 1; _key8 < _len7; _key8++) {
    styles[_key8 - 1] = arguments[_key8];
  }

  return css(_defineProperty({}, selector, styles));
}

// allllll the pseudoclasses

function active(x) {
  return pseudo(':active', x);
}

function any(x) {
  return pseudo(':any', x);
}

function checked(x) {
  return pseudo(':checked', x);
}

function disabled(x) {
  return pseudo(':disabled', x);
}

function empty(x) {
  return pseudo(':empty', x);
}

function enabled(x) {
  return pseudo(':enabled', x);
}

function _default(x) {
  return pseudo(':default', x); // note '_default' name
}

function first(x) {
  return pseudo(':first', x);
}

function firstChild(x) {
  return pseudo(':first-child', x);
}

function firstOfType(x) {
  return pseudo(':first-of-type', x);
}

function fullscreen(x) {
  return pseudo(':fullscreen', x);
}

function focus(x) {
  return pseudo(':focus', x);
}

function hover(x) {
  return pseudo(':hover', x);
}

function indeterminate(x) {
  return pseudo(':indeterminate', x);
}

function inRange(x) {
  return pseudo(':in-range', x);
}

function invalid(x) {
  return pseudo(':invalid', x);
}

function lastChild(x) {
  return pseudo(':last-child', x);
}

function lastOfType(x) {
  return pseudo(':last-of-type', x);
}

function left(x) {
  return pseudo(':left', x);
}

function link(x) {
  return pseudo(':link', x);
}

function onlyChild(x) {
  return pseudo(':only-child', x);
}

function onlyOfType(x) {
  return pseudo(':only-of-type', x);
}

function optional(x) {
  return pseudo(':optional', x);
}

function outOfRange(x) {
  return pseudo(':out-of-range', x);
}

function readOnly(x) {
  return pseudo(':read-only', x);
}

function readWrite(x) {
  return pseudo(':read-write', x);
}

function required(x) {
  return pseudo(':required', x);
}

function right(x) {
  return pseudo(':right', x);
}

function root(x) {
  return pseudo(':root', x);
}

function scope(x) {
  return pseudo(':scope', x);
}

function target(x) {
  return pseudo(':target', x);
}

function valid(x) {
  return pseudo(':valid', x);
}

function visited(x) {
  return pseudo(':visited', x);
}

// parameterized pseudoclasses
function dir(p, x) {
  return pseudo(':dir(' + p + ')', x);
}
function lang(p, x) {
  return pseudo(':lang(' + p + ')', x);
}
function not(p, x) {
  // should this be a plugin?
  var selector = p.split(',').map(function (x) {
    return x.trim();
  }).map(function (x) {
    return ':not(' + x + ')';
  });
  if (selector.length === 1) {
    return pseudo(':not(' + p + ')', x);
  }
  return select(selector.join(''), x);
}
function nthChild(p, x) {
  return pseudo(':nth-child(' + p + ')', x);
}
function nthLastChild(p, x) {
  return pseudo(':nth-last-child(' + p + ')', x);
}
function nthLastOfType(p, x) {
  return pseudo(':nth-last-of-type(' + p + ')', x);
}
function nthOfType(p, x) {
  return pseudo(':nth-of-type(' + p + ')', x);
}

// pseudoelements
function after(x) {
  return pseudo('::after', x);
}
function before(x) {
  return pseudo('::before', x);
}
function firstLetter(x) {
  return pseudo('::first-letter', x);
}
function firstLine(x) {
  return pseudo('::first-line', x);
}
function selection(x) {
  return pseudo('::selection', x);
}
function backdrop(x) {
  return pseudo('::backdrop', x);
}
function placeholder(x) {
  // https://github.com/threepointone/glamor/issues/14
  return css({ '::placeholder': x });
}

/*** helpers for web components ***/
// https://github.com/threepointone/glamor/issues/16

function cssFor() {
  for (var _len8 = arguments.length, rules = Array(_len8), _key9 = 0; _key9 < _len8; _key9++) {
    rules[_key9] = arguments[_key9];
  }

  rules = (0, _clean2.default)(rules);
  return rules ? rules.map(function (r) {
    var style = { label: [] };
    build(style, { src: r }); // mutative! but worth it.   
    return deconstructedStyleToCSS(hashify(style), deconstruct(style)).join('');
  }).join('') : '';
}

function attribsFor() {
  for (var _len9 = arguments.length, rules = Array(_len9), _key10 = 0; _key10 < _len9; _key10++) {
    rules[_key10] = arguments[_key10];
  }

  rules = (0, _clean2.default)(rules);
  var htmlAttributes = rules ? rules.map(function (rule) {
    idFor(rule); // throwaway check for rule
    var key = Object.keys(rule)[0],
        value = rule[key];
    return key + '="' + (value || '') + '"';
  }).join(' ') : '';

  return htmlAttributes;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 116 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var fnToStr = Function.prototype.toString;

var constructorRegex = /^\s*class /;
var isES6ClassFn = function isES6ClassFn(value) {
	try {
		var fnStr = fnToStr.call(value);
		var singleStripped = fnStr.replace(/\/\/.*\n/g, '');
		var multiStripped = singleStripped.replace(/\/\*[.\s\S]*\*\//g, '');
		var spaceStripped = multiStripped.replace(/\n/mg, ' ').replace(/ {2}/g, ' ');
		return constructorRegex.test(spaceStripped);
	} catch (e) {
		return false; // not a function
	}
};

var tryFunctionObject = function tryFunctionObject(value) {
	try {
		if (isES6ClassFn(value)) { return false; }
		fnToStr.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var fnClass = '[object Function]';
var genClass = '[object GeneratorFunction]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isCallable(value) {
	if (!value) { return false; }
	if (typeof value !== 'function' && typeof value !== 'object') { return false; }
	if (hasToStringTag) { return tryFunctionObject(value); }
	if (isES6ClassFn(value)) { return false; }
	var strClass = toStr.call(value);
	return strClass === fnClass || strClass === genClass;
};


/***/ }),
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var cov_bea5alamq = function () {
  var path = '/data/zeit/next.js/lib/router/index.js',
      hash = 'aed3e840debf1f27e10e5d8511d005a19583af4d',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/router/index.js',
    statementMap: {
      '0': {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 32
        }
      },
      '1': {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 32
        }
      },
      '2': {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 10,
          column: 5
        }
      },
      '3': {
        start: {
          line: 9,
          column: 6
        },
        end: {
          line: 9,
          column: 34
        }
      },
      '4': {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 30,
          column: 2
        }
      },
      '5': {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 29,
          column: 4
        }
      },
      '6': {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 26,
          column: 23
        }
      },
      '7': {
        start: {
          line: 27,
          column: 6
        },
        end: {
          line: 27,
          column: 42
        }
      },
      '8': {
        start: {
          line: 32,
          column: 0
        },
        end: {
          line: 37,
          column: 2
        }
      },
      '9': {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 36,
          column: 3
        }
      },
      '10': {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 21
        }
      },
      '11': {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 49
        }
      },
      '12': {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 48,
          column: 2
        }
      },
      '13': {
        start: {
          line: 40,
          column: 2
        },
        end: {
          line: 47,
          column: 4
        }
      },
      '14': {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 46,
          column: 6
        }
      },
      '15': {
        start: {
          line: 43,
          column: 6
        },
        end: {
          line: 45,
          column: 7
        }
      },
      '16': {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 44
        }
      },
      '17': {
        start: {
          line: 51,
          column: 2
        },
        end: {
          line: 55,
          column: 3
        }
      },
      '18': {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 28
        }
      },
      '19': {
        start: {
          line: 69,
          column: 2
        },
        end: {
          line: 69,
          column: 47
        }
      },
      '20': {
        start: {
          line: 70,
          column: 2
        },
        end: {
          line: 70,
          column: 52
        }
      },
      '21': {
        start: {
          line: 70,
          column: 47
        },
        end: {
          line: 70,
          column: 51
        }
      },
      '22': {
        start: {
          line: 71,
          column: 2
        },
        end: {
          line: 71,
          column: 37
        }
      },
      '23': {
        start: {
          line: 73,
          column: 2
        },
        end: {
          line: 73,
          column: 31
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 19,
            column: 23
          },
          end: {
            line: 19,
            column: 24
          }
        },
        loc: {
          start: {
            line: 19,
            column: 34
          },
          end: {
            line: 30,
            column: 1
          }
        }
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 32,
            column: 25
          },
          end: {
            line: 32,
            column: 26
          }
        },
        loc: {
          start: {
            line: 32,
            column: 36
          },
          end: {
            line: 37,
            column: 1
          }
        }
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 33,
            column: 27
          },
          end: {
            line: 33,
            column: 28
          }
        },
        loc: {
          start: {
            line: 33,
            column: 40
          },
          end: {
            line: 36,
            column: 3
          }
        }
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 39,
            column: 21
          },
          end: {
            line: 39,
            column: 22
          }
        },
        loc: {
          start: {
            line: 39,
            column: 32
          },
          end: {
            line: 48,
            column: 1
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 40,
            column: 24
          },
          end: {
            line: 40,
            column: 25
          }
        },
        loc: {
          start: {
            line: 40,
            column: 30
          },
          end: {
            line: 47,
            column: 3
          }
        }
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 41,
            column: 37
          },
          end: {
            line: 41,
            column: 38
          }
        },
        loc: {
          start: {
            line: 41,
            column: 50
          },
          end: {
            line: 46,
            column: 5
          }
        }
      },
      '6': {
        name: 'throwIfNoRouter',
        decl: {
          start: {
            line: 50,
            column: 9
          },
          end: {
            line: 50,
            column: 24
          }
        },
        loc: {
          start: {
            line: 50,
            column: 28
          },
          end: {
            line: 56,
            column: 1
          }
        }
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 68,
            column: 28
          },
          end: {
            line: 68,
            column: 29
          }
        },
        loc: {
          start: {
            line: 68,
            column: 47
          },
          end: {
            line: 74,
            column: 1
          }
        }
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 70,
            column: 41
          },
          end: {
            line: 70,
            column: 42
          }
        },
        loc: {
          start: {
            line: 70,
            column: 47
          },
          end: {
            line: 70,
            column: 51
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 32
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 32
          }
        }, {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 32
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        }, {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 43,
            column: 6
          },
          end: {
            line: 45,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 43,
            column: 6
          },
          end: {
            line: 45,
            column: 7
          }
        }, {
          start: {
            line: 43,
            column: 6
          },
          end: {
            line: 45,
            column: 7
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        }, {
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Router = exports.createRouter = undefined;

var _defineProperty = __webpack_require__(92);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var cov_bea5alamq = function () {
  var path = '/data/zeit/next.js/lib/router/index.js',
      hash = '93b71612250c208fb5fff4cfd1d2a4bdc9184b18',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/router/index.js',
    statementMap: {
      '0': {
        start: {
          line: 3,
          column: 24
        },
        end: {
          line: 12,
          column: 1
        }
      },
      '1': {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 32
        }
      },
      '2': {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 7,
          column: 32
        }
      },
      '3': {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 10,
          column: 5
        }
      },
      '4': {
        start: {
          line: 9,
          column: 6
        },
        end: {
          line: 9,
          column: 34
        }
      },
      '5': {
        start: {
          line: 15,
          column: 23
        },
        end: {
          line: 15,
          column: 67
        }
      },
      '6': {
        start: {
          line: 16,
          column: 25
        },
        end: {
          line: 16,
          column: 62
        }
      },
      '7': {
        start: {
          line: 17,
          column: 21
        },
        end: {
          line: 17,
          column: 84
        }
      },
      '8': {
        start: {
          line: 19,
          column: 0
        },
        end: {
          line: 30,
          column: 2
        }
      },
      '9': {
        start: {
          line: 24,
          column: 2
        },
        end: {
          line: 29,
          column: 4
        }
      },
      '10': {
        start: {
          line: 26,
          column: 6
        },
        end: {
          line: 26,
          column: 23
        }
      },
      '11': {
        start: {
          line: 27,
          column: 6
        },
        end: {
          line: 27,
          column: 42
        }
      },
      '12': {
        start: {
          line: 32,
          column: 0
        },
        end: {
          line: 37,
          column: 2
        }
      },
      '13': {
        start: {
          line: 33,
          column: 2
        },
        end: {
          line: 36,
          column: 3
        }
      },
      '14': {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 21
        }
      },
      '15': {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 49
        }
      },
      '16': {
        start: {
          line: 39,
          column: 0
        },
        end: {
          line: 48,
          column: 2
        }
      },
      '17': {
        start: {
          line: 40,
          column: 2
        },
        end: {
          line: 47,
          column: 4
        }
      },
      '18': {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 46,
          column: 6
        }
      },
      '19': {
        start: {
          line: 42,
          column: 25
        },
        end: {
          line: 42,
          column: 82
        }
      },
      '20': {
        start: {
          line: 43,
          column: 6
        },
        end: {
          line: 45,
          column: 7
        }
      },
      '21': {
        start: {
          line: 44,
          column: 8
        },
        end: {
          line: 44,
          column: 44
        }
      },
      '22': {
        start: {
          line: 51,
          column: 2
        },
        end: {
          line: 55,
          column: 3
        }
      },
      '23': {
        start: {
          line: 52,
          column: 20
        },
        end: {
          line: 53,
          column: 79
        }
      },
      '24': {
        start: {
          line: 54,
          column: 4
        },
        end: {
          line: 54,
          column: 28
        }
      },
      '25': {
        start: {
          line: 68,
          column: 28
        },
        end: {
          line: 74,
          column: 1
        }
      },
      '26': {
        start: {
          line: 69,
          column: 2
        },
        end: {
          line: 69,
          column: 47
        }
      },
      '27': {
        start: {
          line: 70,
          column: 2
        },
        end: {
          line: 70,
          column: 52
        }
      },
      '28': {
        start: {
          line: 70,
          column: 47
        },
        end: {
          line: 70,
          column: 51
        }
      },
      '29': {
        start: {
          line: 71,
          column: 2
        },
        end: {
          line: 71,
          column: 37
        }
      },
      '30': {
        start: {
          line: 73,
          column: 2
        },
        end: {
          line: 73,
          column: 31
        }
      },
      '31': {
        start: {
          line: 77,
          column: 22
        },
        end: {
          line: 77,
          column: 29
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 19,
            column: 23
          },
          end: {
            line: 19,
            column: 24
          }
        },
        loc: {
          start: {
            line: 19,
            column: 34
          },
          end: {
            line: 30,
            column: 1
          }
        }
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 32,
            column: 25
          },
          end: {
            line: 32,
            column: 26
          }
        },
        loc: {
          start: {
            line: 32,
            column: 36
          },
          end: {
            line: 37,
            column: 1
          }
        }
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 33,
            column: 27
          },
          end: {
            line: 33,
            column: 28
          }
        },
        loc: {
          start: {
            line: 33,
            column: 40
          },
          end: {
            line: 36,
            column: 3
          }
        }
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 39,
            column: 21
          },
          end: {
            line: 39,
            column: 22
          }
        },
        loc: {
          start: {
            line: 39,
            column: 32
          },
          end: {
            line: 48,
            column: 1
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 40,
            column: 24
          },
          end: {
            line: 40,
            column: 25
          }
        },
        loc: {
          start: {
            line: 40,
            column: 30
          },
          end: {
            line: 47,
            column: 3
          }
        }
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 41,
            column: 37
          },
          end: {
            line: 41,
            column: 38
          }
        },
        loc: {
          start: {
            line: 41,
            column: 50
          },
          end: {
            line: 46,
            column: 5
          }
        }
      },
      '6': {
        name: 'throwIfNoRouter',
        decl: {
          start: {
            line: 50,
            column: 9
          },
          end: {
            line: 50,
            column: 24
          }
        },
        loc: {
          start: {
            line: 50,
            column: 28
          },
          end: {
            line: 56,
            column: 1
          }
        }
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 68,
            column: 28
          },
          end: {
            line: 68,
            column: 29
          }
        },
        loc: {
          start: {
            line: 68,
            column: 47
          },
          end: {
            line: 74,
            column: 1
          }
        }
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 70,
            column: 41
          },
          end: {
            line: 70,
            column: 42
          }
        },
        loc: {
          start: {
            line: 70,
            column: 47
          },
          end: {
            line: 70,
            column: 51
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 32
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 32
          }
        }, {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 32
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        }, {
          start: {
            line: 8,
            column: 4
          },
          end: {
            line: 10,
            column: 5
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 43,
            column: 6
          },
          end: {
            line: 45,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 43,
            column: 6
          },
          end: {
            line: 45,
            column: 7
          }
        }, {
          start: {
            line: 43,
            column: 6
          },
          end: {
            line: 45,
            column: 7
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        }, {
          start: {
            line: 51,
            column: 2
          },
          end: {
            line: 55,
            column: 3
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

var _router = __webpack_require__(535);

var _router2 = _interopRequireDefault(_router);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var SingletonRouter = (++cov_bea5alamq.s[0], {
  router: null, // holds the actual router instance
  readyCallbacks: [],
  ready: function ready(cb) {
    ++cov_bea5alamq.s[1];
    ++cov_bea5alamq.s[0];

    if (this.router) {
        ++cov_bea5alamq.b[0][0];
        ++cov_bea5alamq.b[0][0];
        ++cov_bea5alamq.s[2];
        ++cov_bea5alamq.s[1];
        return cb();
      } else {
      ++cov_bea5alamq.b[0][1];
      ++cov_bea5alamq.b[0][1];
    }++cov_bea5alamq.s[3];
    ++cov_bea5alamq.s[2];
    if (typeof window !== 'undefined') {
      ++cov_bea5alamq.b[1][0];
      ++cov_bea5alamq.b[1][0];
      ++cov_bea5alamq.s[4];
      ++cov_bea5alamq.s[3];

      this.readyCallbacks.push(cb);
    } else {
      ++cov_bea5alamq.b[1][1];
      ++cov_bea5alamq.b[1][1];
    }
  }
});

// Create public properties and methods of the router in the SingletonRouter
var propertyFields = (++cov_bea5alamq.s[5], ['components', 'pathname', 'route', 'query']);
var coreMethodFields = (++cov_bea5alamq.s[6], ['push', 'replace', 'reload', 'back']);
var routerEvents = (++cov_bea5alamq.s[7], ['routeChangeStart', 'routeChangeComplete', 'routeChangeError']);

++cov_bea5alamq.s[8];
++cov_bea5alamq.s[4];
propertyFields.forEach(function (field) {
  ++cov_bea5alamq.f[0];
  ++cov_bea5alamq.f[0];
  ++cov_bea5alamq.s[9];
  ++cov_bea5alamq.s[5];

  // Here we need to use Object.defineProperty because, we need to return
  // the property assigned to the actual router
  // The value might get changed as we change routes and this is the
  // proper way to access it
  (0, _defineProperty2.default)(SingletonRouter, field, {
    get: function get() {
      ++cov_bea5alamq.s[10];
      ++cov_bea5alamq.s[6];

      throwIfNoRouter();
      ++cov_bea5alamq.s[11];
      ++cov_bea5alamq.s[7];
      return SingletonRouter.router[field];
    }
  });
});

++cov_bea5alamq.s[12];
++cov_bea5alamq.s[8];
coreMethodFields.forEach(function (field) {
  ++cov_bea5alamq.f[1];
  ++cov_bea5alamq.f[1];
  ++cov_bea5alamq.s[13];
  ++cov_bea5alamq.s[9];

  SingletonRouter[field] = function () {
    var _SingletonRouter$rout;

    ++cov_bea5alamq.f[2];
    ++cov_bea5alamq.f[2];
    ++cov_bea5alamq.s[14];
    ++cov_bea5alamq.s[10];

    throwIfNoRouter();
    ++cov_bea5alamq.s[15];
    ++cov_bea5alamq.s[11];
    return (_SingletonRouter$rout = SingletonRouter.router)[field].apply(_SingletonRouter$rout, arguments);
  };
});

++cov_bea5alamq.s[16];
++cov_bea5alamq.s[12];
routerEvents.forEach(function (event) {
  ++cov_bea5alamq.f[3];
  ++cov_bea5alamq.f[3];
  ++cov_bea5alamq.s[17];
  ++cov_bea5alamq.s[13];

  SingletonRouter.ready(function () {
    ++cov_bea5alamq.f[4];
    ++cov_bea5alamq.f[4];
    ++cov_bea5alamq.s[18];
    ++cov_bea5alamq.s[14];

    SingletonRouter.router.on(event, function () {
      ++cov_bea5alamq.f[5];
      ++cov_bea5alamq.f[5];

      var eventField = (++cov_bea5alamq.s[19], 'on' + event.charAt(0).toUpperCase() + event.substring(1));
      ++cov_bea5alamq.s[20];
      ++cov_bea5alamq.s[15];
      if (SingletonRouter[eventField]) {
        ++cov_bea5alamq.b[2][0];
        ++cov_bea5alamq.b[2][0];
        ++cov_bea5alamq.s[21];
        ++cov_bea5alamq.s[16];

        SingletonRouter[eventField].apply(SingletonRouter, arguments);
      } else {
        ++cov_bea5alamq.b[2][1];
        ++cov_bea5alamq.b[2][1];
      }
    });
  });
});

function throwIfNoRouter() {
  ++cov_bea5alamq.f[6];
  ++cov_bea5alamq.f[6];
  ++cov_bea5alamq.s[22];
  ++cov_bea5alamq.s[17];

  if (!SingletonRouter.router) {
    ++cov_bea5alamq.b[3][0];
    ++cov_bea5alamq.b[3][0];

    var message = (++cov_bea5alamq.s[23], 'No router instance found.\n' + 'You should only use "next/router" inside the client side of your app.\n');
    ++cov_bea5alamq.s[24];
    ++cov_bea5alamq.s[18];
    throw new Error(message);
  } else {
    ++cov_bea5alamq.b[3][1];
    ++cov_bea5alamq.b[3][1];
  }
}

// Export the SingletonRouter and this is the public API.
exports.default = SingletonRouter;

// INTERNAL APIS
// -------------
// (do not use following exports inside the app)

// Create a router and assign it as the singleton instance.
// This is used in client side when we are initilizing the app.
// This should **not** use inside the server.

var createRouter = exports.createRouter = (++cov_bea5alamq.s[25], function () {
  ++cov_bea5alamq.f[7];
  ++cov_bea5alamq.f[7];
  ++cov_bea5alamq.s[26];
  ++cov_bea5alamq.s[19];

  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  SingletonRouter.router = new (Function.prototype.bind.apply(_router2.default, [null].concat(args)))();
  ++cov_bea5alamq.s[27];
  ++cov_bea5alamq.s[20];
  SingletonRouter.readyCallbacks.forEach(function (cb) {
    ++cov_bea5alamq.f[8];
    ++cov_bea5alamq.f[8];
    ++cov_bea5alamq.s[28];
    ++cov_bea5alamq.s[21];
    return cb();
  });
  ++cov_bea5alamq.s[29];
  ++cov_bea5alamq.s[22];
  SingletonRouter.readyCallbacks = [];

  ++cov_bea5alamq.s[30];
  ++cov_bea5alamq.s[23];
  return SingletonRouter.router;
});

// Export the actual Router class, which is usually used inside the server
var Router = exports.Router = (++cov_bea5alamq.s[31], _router2.default);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/data/zeit/next.js/dist/lib/router/index.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/data/zeit/next.js/dist/lib/router/index.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(39);

var ReactNoopUpdateQueue = __webpack_require__(141);

var canDefineProperty = __webpack_require__(143);
var emptyObject = __webpack_require__(54);
var invariant = __webpack_require__(2);
var warning = __webpack_require__(1);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */
ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */
ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */
if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function (methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function () {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var warning = __webpack_require__(1);

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

/**
 * This is the abstract API for an update queue.
 */
var ReactNoopUpdateQueue = {

  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Enqueue a callback that will be executed after all the pending updates
   * have processed.
   *
   * @param {ReactClass} publicInstance The instance to use as `this` context.
   * @param {?function} callback Called after state is updated.
   * @internal
   */
  enqueueCallback: function (publicInstance, callback) {},

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    // $FlowFixMe https://github.com/facebook/flow/issues/285
    Object.defineProperty({}, 'x', { get: function () {} });
    canDefineProperty = true;
  } catch (x) {
    // IE will fail on defineProperty
  }
}

module.exports = canDefineProperty;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/* global Symbol */

var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

/**
 * Returns the iterator method function contained on the iterable object.
 *
 * Be sure to invoke the function with the iterable as context:
 *
 *     var iteratorFn = getIteratorFn(myIterable);
 *     if (iteratorFn) {
 *       var iterator = iteratorFn.call(myIterable);
 *       ...
 *     }
 *
 * @param {?object} maybeIterable
 * @return {?function}
 */
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var punycode = __webpack_require__(442);
var util = __webpack_require__(565);

exports.parse = urlParse;
exports.resolve = urlResolve;
exports.resolveObject = urlResolveObject;
exports.format = urlFormat;

exports.Url = Url;

function Url() {
  this.protocol = null;
  this.slashes = null;
  this.auth = null;
  this.host = null;
  this.port = null;
  this.hostname = null;
  this.hash = null;
  this.search = null;
  this.query = null;
  this.pathname = null;
  this.path = null;
  this.href = null;
}

// Reference: RFC 3986, RFC 1808, RFC 2396

// define these here so at least they only have to be
// compiled once on the first module load.
var protocolPattern = /^([a-z0-9.+-]+:)/i,
    portPattern = /:[0-9]*$/,

    // Special case for a simple path URL
    simplePathPattern = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,

    // RFC 2396: characters reserved for delimiting URLs.
    // We actually just auto-escape these.
    delims = ['<', '>', '"', '`', ' ', '\r', '\n', '\t'],

    // RFC 2396: characters not allowed for various reasons.
    unwise = ['{', '}', '|', '\\', '^', '`'].concat(delims),

    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.
    autoEscape = ['\''].concat(unwise),
    // Characters that are never ever allowed in a hostname.
    // Note that any invalid chars are also handled, but these
    // are the ones that are *expected* to be seen, so we fast-path
    // them.
    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),
    hostEndingChars = ['/', '?', '#'],
    hostnameMaxLen = 255,
    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,
    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    // protocols that can allow "unsafe" and "unwise" chars.
    unsafeProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that never have a hostname.
    hostlessProtocol = {
      'javascript': true,
      'javascript:': true
    },
    // protocols that always contain a // bit.
    slashedProtocol = {
      'http': true,
      'https': true,
      'ftp': true,
      'gopher': true,
      'file': true,
      'http:': true,
      'https:': true,
      'ftp:': true,
      'gopher:': true,
      'file:': true
    },
    querystring = __webpack_require__(59);

function urlParse(url, parseQueryString, slashesDenoteHost) {
  if (url && util.isObject(url) && url instanceof Url) return url;

  var u = new Url;
  u.parse(url, parseQueryString, slashesDenoteHost);
  return u;
}

Url.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {
  if (!util.isString(url)) {
    throw new TypeError("Parameter 'url' must be a string, not " + typeof url);
  }

  // Copy chrome, IE, opera backslash-handling behavior.
  // Back slashes before the query string get converted to forward slashes
  // See: https://code.google.com/p/chromium/issues/detail?id=25916
  var queryIndex = url.indexOf('?'),
      splitter =
          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',
      uSplit = url.split(splitter),
      slashRegex = /\\/g;
  uSplit[0] = uSplit[0].replace(slashRegex, '/');
  url = uSplit.join(splitter);

  var rest = url;

  // trim before proceeding.
  // This is to support parse stuff like "  http://foo.com  \n"
  rest = rest.trim();

  if (!slashesDenoteHost && url.split('#').length === 1) {
    // Try fast path regexp
    var simplePath = simplePathPattern.exec(rest);
    if (simplePath) {
      this.path = rest;
      this.href = rest;
      this.pathname = simplePath[1];
      if (simplePath[2]) {
        this.search = simplePath[2];
        if (parseQueryString) {
          this.query = querystring.parse(this.search.substr(1));
        } else {
          this.query = this.search.substr(1);
        }
      } else if (parseQueryString) {
        this.search = '';
        this.query = {};
      }
      return this;
    }
  }

  var proto = protocolPattern.exec(rest);
  if (proto) {
    proto = proto[0];
    var lowerProto = proto.toLowerCase();
    this.protocol = lowerProto;
    rest = rest.substr(proto.length);
  }

  // figure out if it's got a host
  // user@server is *always* interpreted as a hostname, and url
  // resolution will treat //foo/bar as host=foo,path=bar because that's
  // how the browser resolves relative URLs.
  if (slashesDenoteHost || proto || rest.match(/^\/\/[^@\/]+@[^@\/]+/)) {
    var slashes = rest.substr(0, 2) === '//';
    if (slashes && !(proto && hostlessProtocol[proto])) {
      rest = rest.substr(2);
      this.slashes = true;
    }
  }

  if (!hostlessProtocol[proto] &&
      (slashes || (proto && !slashedProtocol[proto]))) {

    // there's a hostname.
    // the first instance of /, ?, ;, or # ends the host.
    //
    // If there is an @ in the hostname, then non-host chars *are* allowed
    // to the left of the last @ sign, unless some host-ending character
    // comes *before* the @-sign.
    // URLs are obnoxious.
    //
    // ex:
    // http://a@b@c/ => user:a@b host:c
    // http://a@b?@c => user:a host:c path:/?@c

    // v0.12 TODO(isaacs): This is not quite how Chrome does things.
    // Review our test case against browsers more comprehensively.

    // find the first instance of any hostEndingChars
    var hostEnd = -1;
    for (var i = 0; i < hostEndingChars.length; i++) {
      var hec = rest.indexOf(hostEndingChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }

    // at this point, either we have an explicit point where the
    // auth portion cannot go past, or the last @ char is the decider.
    var auth, atSign;
    if (hostEnd === -1) {
      // atSign can be anywhere.
      atSign = rest.lastIndexOf('@');
    } else {
      // atSign must be in auth portion.
      // http://a@b/c@d => host:b auth:a path:/c@d
      atSign = rest.lastIndexOf('@', hostEnd);
    }

    // Now we have a portion which is definitely the auth.
    // Pull that off.
    if (atSign !== -1) {
      auth = rest.slice(0, atSign);
      rest = rest.slice(atSign + 1);
      this.auth = decodeURIComponent(auth);
    }

    // the host is the remaining to the left of the first non-host char
    hostEnd = -1;
    for (var i = 0; i < nonHostChars.length; i++) {
      var hec = rest.indexOf(nonHostChars[i]);
      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))
        hostEnd = hec;
    }
    // if we still have not hit it, then the entire thing is a host.
    if (hostEnd === -1)
      hostEnd = rest.length;

    this.host = rest.slice(0, hostEnd);
    rest = rest.slice(hostEnd);

    // pull out port.
    this.parseHost();

    // we've indicated that there is a hostname,
    // so even if it's empty, it has to be present.
    this.hostname = this.hostname || '';

    // if hostname begins with [ and ends with ]
    // assume that it's an IPv6 address.
    var ipv6Hostname = this.hostname[0] === '[' &&
        this.hostname[this.hostname.length - 1] === ']';

    // validate a little.
    if (!ipv6Hostname) {
      var hostparts = this.hostname.split(/\./);
      for (var i = 0, l = hostparts.length; i < l; i++) {
        var part = hostparts[i];
        if (!part) continue;
        if (!part.match(hostnamePartPattern)) {
          var newpart = '';
          for (var j = 0, k = part.length; j < k; j++) {
            if (part.charCodeAt(j) > 127) {
              // we replace non-ASCII char with a temporary placeholder
              // we need this to make sure size of hostname is not
              // broken by replacing non-ASCII by nothing
              newpart += 'x';
            } else {
              newpart += part[j];
            }
          }
          // we test again with ASCII char only
          if (!newpart.match(hostnamePartPattern)) {
            var validParts = hostparts.slice(0, i);
            var notHost = hostparts.slice(i + 1);
            var bit = part.match(hostnamePartStart);
            if (bit) {
              validParts.push(bit[1]);
              notHost.unshift(bit[2]);
            }
            if (notHost.length) {
              rest = '/' + notHost.join('.') + rest;
            }
            this.hostname = validParts.join('.');
            break;
          }
        }
      }
    }

    if (this.hostname.length > hostnameMaxLen) {
      this.hostname = '';
    } else {
      // hostnames are always lower case.
      this.hostname = this.hostname.toLowerCase();
    }

    if (!ipv6Hostname) {
      // IDNA Support: Returns a punycoded representation of "domain".
      // It only converts parts of the domain name that
      // have non-ASCII characters, i.e. it doesn't matter if
      // you call it with a domain that already is ASCII-only.
      this.hostname = punycode.toASCII(this.hostname);
    }

    var p = this.port ? ':' + this.port : '';
    var h = this.hostname || '';
    this.host = h + p;
    this.href += this.host;

    // strip [ and ] from the hostname
    // the host field still retains them, though
    if (ipv6Hostname) {
      this.hostname = this.hostname.substr(1, this.hostname.length - 2);
      if (rest[0] !== '/') {
        rest = '/' + rest;
      }
    }
  }

  // now rest is set to the post-host stuff.
  // chop off any delim chars.
  if (!unsafeProtocol[lowerProto]) {

    // First, make 100% sure that any "autoEscape" chars get
    // escaped, even if encodeURIComponent doesn't think they
    // need to be.
    for (var i = 0, l = autoEscape.length; i < l; i++) {
      var ae = autoEscape[i];
      if (rest.indexOf(ae) === -1)
        continue;
      var esc = encodeURIComponent(ae);
      if (esc === ae) {
        esc = escape(ae);
      }
      rest = rest.split(ae).join(esc);
    }
  }


  // chop off from the tail first.
  var hash = rest.indexOf('#');
  if (hash !== -1) {
    // got a fragment string.
    this.hash = rest.substr(hash);
    rest = rest.slice(0, hash);
  }
  var qm = rest.indexOf('?');
  if (qm !== -1) {
    this.search = rest.substr(qm);
    this.query = rest.substr(qm + 1);
    if (parseQueryString) {
      this.query = querystring.parse(this.query);
    }
    rest = rest.slice(0, qm);
  } else if (parseQueryString) {
    // no query string, but parseQueryString still requested
    this.search = '';
    this.query = {};
  }
  if (rest) this.pathname = rest;
  if (slashedProtocol[lowerProto] &&
      this.hostname && !this.pathname) {
    this.pathname = '/';
  }

  //to support http.request
  if (this.pathname || this.search) {
    var p = this.pathname || '';
    var s = this.search || '';
    this.path = p + s;
  }

  // finally, reconstruct the href based on what has been validated.
  this.href = this.format();
  return this;
};

// format a parsed object into a url string
function urlFormat(obj) {
  // ensure it's an object, and not a string url.
  // If it's an obj, this is a no-op.
  // this way, you can call url_format() on strings
  // to clean up potentially wonky urls.
  if (util.isString(obj)) obj = urlParse(obj);
  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);
  return obj.format();
}

Url.prototype.format = function() {
  var auth = this.auth || '';
  if (auth) {
    auth = encodeURIComponent(auth);
    auth = auth.replace(/%3A/i, ':');
    auth += '@';
  }

  var protocol = this.protocol || '',
      pathname = this.pathname || '',
      hash = this.hash || '',
      host = false,
      query = '';

  if (this.host) {
    host = auth + this.host;
  } else if (this.hostname) {
    host = auth + (this.hostname.indexOf(':') === -1 ?
        this.hostname :
        '[' + this.hostname + ']');
    if (this.port) {
      host += ':' + this.port;
    }
  }

  if (this.query &&
      util.isObject(this.query) &&
      Object.keys(this.query).length) {
    query = querystring.stringify(this.query);
  }

  var search = this.search || (query && ('?' + query)) || '';

  if (protocol && protocol.substr(-1) !== ':') protocol += ':';

  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.
  // unless they had them to begin with.
  if (this.slashes ||
      (!protocol || slashedProtocol[protocol]) && host !== false) {
    host = '//' + (host || '');
    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;
  } else if (!host) {
    host = '';
  }

  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;
  if (search && search.charAt(0) !== '?') search = '?' + search;

  pathname = pathname.replace(/[?#]/g, function(match) {
    return encodeURIComponent(match);
  });
  search = search.replace('#', '%23');

  return protocol + host + pathname + search + hash;
};

function urlResolve(source, relative) {
  return urlParse(source, false, true).resolve(relative);
}

Url.prototype.resolve = function(relative) {
  return this.resolveObject(urlParse(relative, false, true)).format();
};

function urlResolveObject(source, relative) {
  if (!source) return relative;
  return urlParse(source, false, true).resolveObject(relative);
}

Url.prototype.resolveObject = function(relative) {
  if (util.isString(relative)) {
    var rel = new Url();
    rel.parse(relative, false, true);
    relative = rel;
  }

  var result = new Url();
  var tkeys = Object.keys(this);
  for (var tk = 0; tk < tkeys.length; tk++) {
    var tkey = tkeys[tk];
    result[tkey] = this[tkey];
  }

  // hash is always overridden, no matter what.
  // even href="" will remove it.
  result.hash = relative.hash;

  // if the relative url is empty, then there's nothing left to do here.
  if (relative.href === '') {
    result.href = result.format();
    return result;
  }

  // hrefs like //foo/bar always cut to the protocol.
  if (relative.slashes && !relative.protocol) {
    // take everything except the protocol from relative
    var rkeys = Object.keys(relative);
    for (var rk = 0; rk < rkeys.length; rk++) {
      var rkey = rkeys[rk];
      if (rkey !== 'protocol')
        result[rkey] = relative[rkey];
    }

    //urlParse appends trailing / to urls like http://www.example.com
    if (slashedProtocol[result.protocol] &&
        result.hostname && !result.pathname) {
      result.path = result.pathname = '/';
    }

    result.href = result.format();
    return result;
  }

  if (relative.protocol && relative.protocol !== result.protocol) {
    // if it's a known url protocol, then changing
    // the protocol does weird things
    // first, if it's not file:, then we MUST have a host,
    // and if there was a path
    // to begin with, then we MUST have a path.
    // if it is file:, then the host is dropped,
    // because that's known to be hostless.
    // anything else is assumed to be absolute.
    if (!slashedProtocol[relative.protocol]) {
      var keys = Object.keys(relative);
      for (var v = 0; v < keys.length; v++) {
        var k = keys[v];
        result[k] = relative[k];
      }
      result.href = result.format();
      return result;
    }

    result.protocol = relative.protocol;
    if (!relative.host && !hostlessProtocol[relative.protocol]) {
      var relPath = (relative.pathname || '').split('/');
      while (relPath.length && !(relative.host = relPath.shift()));
      if (!relative.host) relative.host = '';
      if (!relative.hostname) relative.hostname = '';
      if (relPath[0] !== '') relPath.unshift('');
      if (relPath.length < 2) relPath.unshift('');
      result.pathname = relPath.join('/');
    } else {
      result.pathname = relative.pathname;
    }
    result.search = relative.search;
    result.query = relative.query;
    result.host = relative.host || '';
    result.auth = relative.auth;
    result.hostname = relative.hostname || relative.host;
    result.port = relative.port;
    // to support http.request
    if (result.pathname || result.search) {
      var p = result.pathname || '';
      var s = result.search || '';
      result.path = p + s;
    }
    result.slashes = result.slashes || relative.slashes;
    result.href = result.format();
    return result;
  }

  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),
      isRelAbs = (
          relative.host ||
          relative.pathname && relative.pathname.charAt(0) === '/'
      ),
      mustEndAbs = (isRelAbs || isSourceAbs ||
                    (result.host && relative.pathname)),
      removeAllDots = mustEndAbs,
      srcPath = result.pathname && result.pathname.split('/') || [],
      relPath = relative.pathname && relative.pathname.split('/') || [],
      psychotic = result.protocol && !slashedProtocol[result.protocol];

  // if the url is a non-slashed url, then relative
  // links like ../.. should be able
  // to crawl up to the hostname, as well.  This is strange.
  // result.protocol has already been set by now.
  // Later on, put the first path part into the host field.
  if (psychotic) {
    result.hostname = '';
    result.port = null;
    if (result.host) {
      if (srcPath[0] === '') srcPath[0] = result.host;
      else srcPath.unshift(result.host);
    }
    result.host = '';
    if (relative.protocol) {
      relative.hostname = null;
      relative.port = null;
      if (relative.host) {
        if (relPath[0] === '') relPath[0] = relative.host;
        else relPath.unshift(relative.host);
      }
      relative.host = null;
    }
    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');
  }

  if (isRelAbs) {
    // it's absolute.
    result.host = (relative.host || relative.host === '') ?
                  relative.host : result.host;
    result.hostname = (relative.hostname || relative.hostname === '') ?
                      relative.hostname : result.hostname;
    result.search = relative.search;
    result.query = relative.query;
    srcPath = relPath;
    // fall through to the dot-handling below.
  } else if (relPath.length) {
    // it's relative
    // throw away the existing file, and take the new path instead.
    if (!srcPath) srcPath = [];
    srcPath.pop();
    srcPath = srcPath.concat(relPath);
    result.search = relative.search;
    result.query = relative.query;
  } else if (!util.isNullOrUndefined(relative.search)) {
    // just pull out the search.
    // like href='?foo'.
    // Put this after the other two cases because it simplifies the booleans
    if (psychotic) {
      result.hostname = result.host = srcPath.shift();
      //occationaly the auth can get stuck only in host
      //this especially happens in cases like
      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
      var authInHost = result.host && result.host.indexOf('@') > 0 ?
                       result.host.split('@') : false;
      if (authInHost) {
        result.auth = authInHost.shift();
        result.host = result.hostname = authInHost.shift();
      }
    }
    result.search = relative.search;
    result.query = relative.query;
    //to support http.request
    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
      result.path = (result.pathname ? result.pathname : '') +
                    (result.search ? result.search : '');
    }
    result.href = result.format();
    return result;
  }

  if (!srcPath.length) {
    // no path at all.  easy.
    // we've already handled the other stuff above.
    result.pathname = null;
    //to support http.request
    if (result.search) {
      result.path = '/' + result.search;
    } else {
      result.path = null;
    }
    result.href = result.format();
    return result;
  }

  // if a url ENDs in . or .., then it must get a trailing slash.
  // however, if it ends in anything else non-slashy,
  // then it must NOT get a trailing slash.
  var last = srcPath.slice(-1)[0];
  var hasTrailingSlash = (
      (result.host || relative.host || srcPath.length > 1) &&
      (last === '.' || last === '..') || last === '');

  // strip single dots, resolve double dots to parent dir
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = srcPath.length; i >= 0; i--) {
    last = srcPath[i];
    if (last === '.') {
      srcPath.splice(i, 1);
    } else if (last === '..') {
      srcPath.splice(i, 1);
      up++;
    } else if (up) {
      srcPath.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (!mustEndAbs && !removeAllDots) {
    for (; up--; up) {
      srcPath.unshift('..');
    }
  }

  if (mustEndAbs && srcPath[0] !== '' &&
      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {
    srcPath.unshift('');
  }

  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {
    srcPath.push('');
  }

  var isAbsolute = srcPath[0] === '' ||
      (srcPath[0] && srcPath[0].charAt(0) === '/');

  // put the host back
  if (psychotic) {
    result.hostname = result.host = isAbsolute ? '' :
                                    srcPath.length ? srcPath.shift() : '';
    //occationaly the auth can get stuck only in host
    //this especially happens in cases like
    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')
    var authInHost = result.host && result.host.indexOf('@') > 0 ?
                     result.host.split('@') : false;
    if (authInHost) {
      result.auth = authInHost.shift();
      result.host = result.hostname = authInHost.shift();
    }
  }

  mustEndAbs = mustEndAbs || (result.host && srcPath.length);

  if (mustEndAbs && !isAbsolute) {
    srcPath.unshift('');
  }

  if (!srcPath.length) {
    result.pathname = null;
    result.path = null;
  } else {
    result.pathname = srcPath.join('/');
  }

  //to support request.http
  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {
    result.path = (result.pathname ? result.pathname : '') +
                  (result.search ? result.search : '');
  }
  result.auth = relative.auth || result.auth;
  result.slashes = result.slashes || relative.slashes;
  result.href = result.format();
  return result;
};

Url.prototype.parseHost = function() {
  var host = this.host;
  var port = portPattern.exec(host);
  if (port) {
    port = port[0];
    if (port !== ':') {
      this.port = port.substr(1);
    }
    host = host.substr(0, host.length - port.length);
  }
  if (host) this.hostname = host;
};


/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = ansiHTML

// Reference to https://github.com/sindresorhus/ansi-regex
var _regANSI = /(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/

var _defColors = {
  reset: ['fff', '000'], // [FOREGROUD_COLOR, BACKGROUND_COLOR]
  black: '000',
  red: 'ff0000',
  green: '209805',
  yellow: 'e8bf03',
  blue: '0000ff',
  magenta: 'ff00ff',
  cyan: '00ffee',
  lightgrey: 'f0f0f0',
  darkgrey: '888'
}
var _styles = {
  30: 'black',
  31: 'red',
  32: 'green',
  33: 'yellow',
  34: 'blue',
  35: 'magenta',
  36: 'cyan',
  37: 'lightgrey'
}
var _openTags = {
  '1': 'font-weight:bold', // bold
  '2': 'opacity:0.5', // dim
  '3': '<i>', // italic
  '4': '<u>', // underscore
  '8': 'display:none', // hidden
  '9': '<del>' // delete
}
var _closeTags = {
  '23': '</i>', // reset italic
  '24': '</u>', // reset underscore
  '29': '</del>' // reset delete
}

;[0, 21, 22, 27, 28, 39, 49].forEach(function (n) {
  _closeTags[n] = '</span>'
})

/**
 * Converts text with ANSI color codes to HTML markup.
 * @param {String} text
 * @returns {*}
 */
function ansiHTML (text) {
  // Returns the text if the string has no ANSI escape code.
  if (!_regANSI.test(text)) {
    return text
  }

  // Cache opened sequence.
  var ansiCodes = []
  // Replace with markup.
  var ret = text.replace(/\033\[(\d+)*m/g, function (match, seq) {
    var ot = _openTags[seq]
    if (ot) {
      // If current sequence has been opened, close it.
      if (!!~ansiCodes.indexOf(seq)) { // eslint-disable-line no-extra-boolean-cast
        ansiCodes.pop()
        return '</span>'
      }
      // Open tag.
      ansiCodes.push(seq)
      return ot[0] === '<' ? ot : '<span style="' + ot + ';">'
    }

    var ct = _closeTags[seq]
    if (ct) {
      // Pop sequence
      ansiCodes.pop()
      return ct
    }
    return ''
  })

  // Make sure tags are closed.
  var l = ansiCodes.length
  ;(l > 0) && (ret += Array(l + 1).join('</span>'))

  return ret
}

/**
 * Customize colors.
 * @param {Object} colors reference to _defColors
 */
ansiHTML.setColors = function (colors) {
  if (typeof colors !== 'object') {
    throw new Error('`colors` parameter must be an Object.')
  }

  var _finalColors = {}
  for (var key in _defColors) {
    var hex = colors.hasOwnProperty(key) ? colors[key] : null
    if (!hex) {
      _finalColors[key] = _defColors[key]
      continue
    }
    if ('reset' === key) {
      if (typeof hex === 'string') {
        hex = [hex]
      }
      if (!Array.isArray(hex) || hex.length === 0 || hex.some(function (h) {
        return typeof h !== 'string'
      })) {
        throw new Error('The value of `' + key + '` property must be an Array and each item could only be a hex string, e.g.: FF0000')
      }
      var defHexColor = _defColors[key]
      if (!hex[0]) {
        hex[0] = defHexColor[0]
      }
      if (hex.length === 1 || !hex[1]) {
        hex = [hex[0]]
        hex.push(defHexColor[1])
      }

      hex = hex.slice(0, 2)
    } else if (typeof hex !== 'string') {
      throw new Error('The value of `' + key + '` property must be a hex string, e.g.: FF0000')
    }
    _finalColors[key] = hex
  }
  _setTags(_finalColors)
}

/**
 * Reset colors.
 */
ansiHTML.reset = function () {
  _setTags(_defColors)
}

/**
 * Expose tags, including open and close.
 * @type {Object}
 */
ansiHTML.tags = {}

if (Object.defineProperty) {
  Object.defineProperty(ansiHTML.tags, 'open', {
    get: function () { return _openTags }
  })
  Object.defineProperty(ansiHTML.tags, 'close', {
    get: function () { return _closeTags }
  })
} else {
  ansiHTML.tags.open = _openTags
  ansiHTML.tags.close = _closeTags
}

function _setTags (colors) {
  // reset all
  _openTags['0'] = 'font-weight:normal;opacity:1;color:#' + colors.reset[0] + ';background:#' + colors.reset[1]
  // inverse
  _openTags['7'] = 'color:#' + colors.reset[1] + ';background:#' + colors.reset[0]
  // dark grey
  _openTags['90'] = 'color:#' + colors.darkgrey

  for (var code in _styles) {
    var color = _styles[code]
    var oriColor = colors[color] || '000'
    _openTags[code] = 'color:#' + oriColor
    code = parseInt(code)
    _openTags[(code + 10).toString()] = 'background:#' + oriColor
  }
}

ansiHTML.reset()


/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(259), __esModule: true };

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(248);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(247);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 149 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(10).document && document.documentElement;

/***/ }),
/* 150 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = !__webpack_require__(16) && !__webpack_require__(33)(function(){
  return Object.defineProperty(__webpack_require__(98)('div'), 'a', {get: function(){ return 7; }}).a != 7;
});

/***/ }),
/* 151 */
/***/ (function(module, exports, __webpack_require__) {

// check on default Array iterator
var Iterators  = __webpack_require__(40)
  , ITERATOR   = __webpack_require__(9)('iterator')
  , ArrayProto = Array.prototype;

module.exports = function(it){
  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
};

/***/ }),
/* 152 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(49);
module.exports = Array.isArray || function isArray(arg){
  return cof(arg) == 'Array';
};

/***/ }),
/* 153 */
/***/ (function(module, exports, __webpack_require__) {

// call something on iterator step with safe closing on error
var anObject = __webpack_require__(21);
module.exports = function(iterator, fn, value, entries){
  try {
    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
  // 7.4.6 IteratorClose(iterator, completion)
  } catch(e){
    var ret = iterator['return'];
    if(ret !== undefined)anObject(ret.call(iterator));
    throw e;
  }
};

/***/ }),
/* 154 */
/***/ (function(module, exports, __webpack_require__) {

var ITERATOR     = __webpack_require__(9)('iterator')
  , SAFE_CLOSING = false;

try {
  var riter = [7][ITERATOR]();
  riter['return'] = function(){ SAFE_CLOSING = true; };
  Array.from(riter, function(){ throw 2; });
} catch(e){ /* empty */ }

module.exports = function(exec, skipClosing){
  if(!skipClosing && !SAFE_CLOSING)return false;
  var safe = false;
  try {
    var arr  = [7]
      , iter = arr[ITERATOR]();
    iter.next = function(){ return {done: safe = true}; };
    arr[ITERATOR] = function(){ return iter; };
    exec(arr);
  } catch(e){ /* empty */ }
  return safe;
};

/***/ }),
/* 155 */
/***/ (function(module, exports) {

module.exports = function(done, value){
  return {value: value, done: !!done};
};

/***/ }),
/* 156 */
/***/ (function(module, exports, __webpack_require__) {

var pIE            = __webpack_require__(50)
  , createDesc     = __webpack_require__(51)
  , toIObject      = __webpack_require__(31)
  , toPrimitive    = __webpack_require__(108)
  , has            = __webpack_require__(34)
  , IE8_DOM_DEFINE = __webpack_require__(150)
  , gOPD           = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(16) ? gOPD : function getOwnPropertyDescriptor(O, P){
  O = toIObject(O);
  P = toPrimitive(P, true);
  if(IE8_DOM_DEFINE)try {
    return gOPD(O, P);
  } catch(e){ /* empty */ }
  if(has(O, P))return createDesc(!pIE.f.call(O, P), O[P]);
};

/***/ }),
/* 157 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys      = __webpack_require__(159)
  , hiddenKeys = __webpack_require__(99).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O){
  return $keys(O, hiddenKeys);
};

/***/ }),
/* 158 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
var has         = __webpack_require__(34)
  , toObject    = __webpack_require__(41)
  , IE_PROTO    = __webpack_require__(105)('IE_PROTO')
  , ObjectProto = Object.prototype;

module.exports = Object.getPrototypeOf || function(O){
  O = toObject(O);
  if(has(O, IE_PROTO))return O[IE_PROTO];
  if(typeof O.constructor == 'function' && O instanceof O.constructor){
    return O.constructor.prototype;
  } return O instanceof Object ? ObjectProto : null;
};

/***/ }),
/* 159 */
/***/ (function(module, exports, __webpack_require__) {

var has          = __webpack_require__(34)
  , toIObject    = __webpack_require__(31)
  , arrayIndexOf = __webpack_require__(267)(false)
  , IE_PROTO     = __webpack_require__(105)('IE_PROTO');

module.exports = function(object, names){
  var O      = toIObject(object)
    , i      = 0
    , result = []
    , key;
  for(key in O)if(key != IE_PROTO)has(O, key) && result.push(key);
  // Don't enum bug & hidden keys
  while(names.length > i)if(has(O, key = names[i++])){
    ~arrayIndexOf(result, key) || result.push(key);
  }
  return result;
};

/***/ }),
/* 160 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(12)
  , core    = __webpack_require__(6)
  , fails   = __webpack_require__(33);
module.exports = function(KEY, exec){
  var fn  = (core.Object || {})[KEY] || Object[KEY]
    , exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
};

/***/ }),
/* 161 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(29);

/***/ }),
/* 162 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global      = __webpack_require__(10)
  , core        = __webpack_require__(6)
  , dP          = __webpack_require__(14)
  , DESCRIPTORS = __webpack_require__(16)
  , SPECIES     = __webpack_require__(9)('species');

module.exports = function(KEY){
  var C = typeof core[KEY] == 'function' ? core[KEY] : global[KEY];
  if(DESCRIPTORS && C && !C[SPECIES])dP.f(C, SPECIES, {
    configurable: true,
    get: function(){ return this; }
  });
};

/***/ }),
/* 163 */
/***/ (function(module, exports, __webpack_require__) {

var ctx                = __webpack_require__(28)
  , invoke             = __webpack_require__(276)
  , html               = __webpack_require__(149)
  , cel                = __webpack_require__(98)
  , global             = __webpack_require__(10)
  , process            = global.process
  , setTask            = global.setImmediate
  , clearTask          = global.clearImmediate
  , MessageChannel     = global.MessageChannel
  , counter            = 0
  , queue              = {}
  , ONREADYSTATECHANGE = 'onreadystatechange'
  , defer, channel, port;
var run = function(){
  var id = +this;
  if(queue.hasOwnProperty(id)){
    var fn = queue[id];
    delete queue[id];
    fn();
  }
};
var listener = function(event){
  run.call(event.data);
};
// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
if(!setTask || !clearTask){
  setTask = function setImmediate(fn){
    var args = [], i = 1;
    while(arguments.length > i)args.push(arguments[i++]);
    queue[++counter] = function(){
      invoke(typeof fn == 'function' ? fn : Function(fn), args);
    };
    defer(counter);
    return counter;
  };
  clearTask = function clearImmediate(id){
    delete queue[id];
  };
  // Node.js 0.8-
  if(__webpack_require__(49)(process) == 'process'){
    defer = function(id){
      process.nextTick(ctx(run, id, 1));
    };
  // Browsers with MessageChannel, includes WebWorkers
  } else if(MessageChannel){
    channel = new MessageChannel;
    port    = channel.port2;
    channel.port1.onmessage = listener;
    defer = ctx(port.postMessage, port, 1);
  // Browsers with postMessage, skip WebWorkers
  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
  } else if(global.addEventListener && typeof postMessage == 'function' && !global.importScripts){
    defer = function(id){
      global.postMessage(id + '', '*');
    };
    global.addEventListener('message', listener, false);
  // IE8-
  } else if(ONREADYSTATECHANGE in cel('script')){
    defer = function(id){
      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function(){
        html.removeChild(this);
        run.call(id);
      };
    };
  // Rest old browsers
  } else {
    defer = function(id){
      setTimeout(ctx(run, id, 1), 0);
    };
  }
}
module.exports = {
  set:   setTask,
  clear: clearTask
};

/***/ }),
/* 164 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var keys = __webpack_require__(443);
var foreach = __webpack_require__(324);
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

var toStr = Object.prototype.toString;

var isFunction = function (fn) {
	return typeof fn === 'function' && toStr.call(fn) === '[object Function]';
};

var arePropertyDescriptorsSupported = function () {
	var obj = {};
	try {
		Object.defineProperty(obj, 'x', { enumerable: false, value: obj });
        /* eslint-disable no-unused-vars, no-restricted-syntax */
        for (var _ in obj) { return false; }
        /* eslint-enable no-unused-vars, no-restricted-syntax */
		return obj.x === obj;
	} catch (e) { /* this is IE 8. */
		return false;
	}
};
var supportsDescriptors = Object.defineProperty && arePropertyDescriptorsSupported();

var defineProperty = function (object, name, value, predicate) {
	if (name in object && (!isFunction(predicate) || !predicate())) {
		return;
	}
	if (supportsDescriptors) {
		Object.defineProperty(object, name, {
			configurable: true,
			enumerable: false,
			value: value,
			writable: true
		});
	} else {
		object[name] = value;
	}
};

var defineProperties = function (object, map) {
	var predicates = arguments.length > 2 ? arguments[2] : {};
	var props = keys(map);
	if (hasSymbols) {
		props = props.concat(Object.getOwnPropertySymbols(map));
	}
	foreach(props, function (name) {
		defineProperty(object, name, map[name], predicates[name]);
	});
};

defineProperties.supportsDescriptors = !!supportsDescriptors;

module.exports = defineProperties;


/***/ }),
/* 165 */
/***/ (function(module, exports) {

var has = Object.prototype.hasOwnProperty;
module.exports = Object.assign || function assign(target, source) {
	for (var key in source) {
		if (has.call(source, key)) {
			target[key] = source[key];
		}
	}
	return target;
};


/***/ }),
/* 166 */
/***/ (function(module, exports) {

var $isNaN = Number.isNaN || function (a) { return a !== a; };

module.exports = Number.isFinite || function (x) { return typeof x === 'number' && !$isNaN(x) && x !== Infinity && x !== -Infinity; };


/***/ }),
/* 167 */
/***/ (function(module, exports) {

module.exports = Number.isNaN || function isNaN(a) {
	return a !== a;
};


/***/ }),
/* 168 */
/***/ (function(module, exports) {

module.exports = function mod(number, modulo) {
	var remain = number % modulo;
	return Math.floor(remain >= 0 ? remain : remain + modulo);
};


/***/ }),
/* 169 */
/***/ (function(module, exports) {

module.exports = function sign(number) {
	return number >= 0 ? 1 : -1;
};


/***/ }),
/* 170 */
/***/ (function(module, exports) {

module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};


/***/ }),
/* 171 */,
/* 172 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var camelize = __webpack_require__(313);

var msPattern = /^-ms-/;

/**
 * Camelcases a hyphenated CSS property name, for example:
 *
 *   > camelizeStyleName('background-color')
 *   < "backgroundColor"
 *   > camelizeStyleName('-moz-transition')
 *   < "MozTransition"
 *   > camelizeStyleName('-ms-transition')
 *   < "msTransition"
 *
 * As Andi Smith suggests
 * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
 * is converted to lowercase `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function camelizeStyleName(string) {
  return camelize(string.replace(msPattern, 'ms-'));
}

module.exports = camelizeStyleName;

/***/ }),
/* 173 */,
/* 174 */,
/* 175 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */



var hyphenate = __webpack_require__(319);

var msPattern = /^ms-/;

/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenateStyleName(string) {
  return hyphenate(string).replace(msPattern, '-ms-');
}

module.exports = hyphenateStyleName;

/***/ }),
/* 176 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 * @typechecks static-only
 */



/**
 * Memoizes the return value of a function that accepts one string argument.
 */

function memoizeStringOnly(callback) {
  var cache = {};
  return function (string) {
    if (!cache.hasOwnProperty(string)) {
      cache[string] = callback.call(this, string);
    }
    return cache[string];
  };
}

module.exports = memoizeStringOnly;

/***/ }),
/* 177 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processStyleName = undefined;
exports.createMarkupForStyles = createMarkupForStyles;

var _camelizeStyleName = __webpack_require__(172);

var _camelizeStyleName2 = _interopRequireDefault(_camelizeStyleName);

var _dangerousStyleValue = __webpack_require__(327);

var _dangerousStyleValue2 = _interopRequireDefault(_dangerousStyleValue);

var _hyphenateStyleName = __webpack_require__(175);

var _hyphenateStyleName2 = _interopRequireDefault(_hyphenateStyleName);

var _memoizeStringOnly = __webpack_require__(176);

var _memoizeStringOnly2 = _interopRequireDefault(_memoizeStringOnly);

var _warning = __webpack_require__(1);

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var processStyleName = exports.processStyleName = (0, _memoizeStringOnly2.default)(_hyphenateStyleName2.default); /**
                                                                                                                   * Copyright 2013-present, Facebook, Inc.
                                                                                                                   * All rights reserved.
                                                                                                                   *
                                                                                                                   * This source code is licensed under the BSD-style license found in the
                                                                                                                   * LICENSE file in the root directory of this source tree. An additional grant
                                                                                                                   * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                   *
                                                                                                                   * @providesModule CSSPropertyOperations
                                                                                                                   */

if (process.env.NODE_ENV !== 'production') {
  var warnValidStyle;

  (function () {
    // 'msTransform' is correct, but the other prefixes should be capitalized
    var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;

    // style values shouldn't contain a semicolon
    var badStyleValueWithSemicolonPattern = /;\s*$/;

    var warnedStyleNames = {};
    var warnedStyleValues = {};
    var warnedForNaNValue = false;

    var warnHyphenatedStyleName = function warnHyphenatedStyleName(name, owner) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }

      warnedStyleNames[name] = true;
      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Unsupported style property %s. Did you mean %s?%s', name, (0, _camelizeStyleName2.default)(name), checkRenderMessage(owner)) : void 0;
    };

    var warnBadVendoredStyleName = function warnBadVendoredStyleName(name, owner) {
      if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
        return;
      }

      warnedStyleNames[name] = true;
      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Unsupported vendor-prefixed style property %s. Did you mean %s?%s', name, name.charAt(0).toUpperCase() + name.slice(1), checkRenderMessage(owner)) : void 0;
    };

    var warnStyleValueWithSemicolon = function warnStyleValueWithSemicolon(name, value, owner) {
      if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
        return;
      }

      warnedStyleValues[value] = true;
      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'Style property values shouldn\'t contain a semicolon.%s ' + 'Try "%s: %s" instead.', checkRenderMessage(owner), name, value.replace(badStyleValueWithSemicolonPattern, '')) : void 0;
    };

    var warnStyleValueIsNaN = function warnStyleValueIsNaN(name, value, owner) {
      if (warnedForNaNValue) {
        return;
      }

      warnedForNaNValue = true;
      process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, '`NaN` is an invalid value for the `%s` css style property.%s', name, checkRenderMessage(owner)) : void 0;
    };

    var checkRenderMessage = function checkRenderMessage(owner) {
      if (owner) {
        var name = owner.getName();
        if (name) {
          return ' Check the render method of `' + name + '`.';
        }
      }
      return '';
    };

    /**
     * @param {string} name
     * @param {*} value
     * @param {ReactDOMComponent} component
     */

    warnValidStyle = function warnValidStyle(name, value, component) {
      //eslint-disable-line no-var
      var owner = void 0;
      if (component) {
        owner = component._currentElement._owner;
      }
      if (name.indexOf('-') > -1) {
        warnHyphenatedStyleName(name, owner);
      } else if (badVendoredStyleNamePattern.test(name)) {
        warnBadVendoredStyleName(name, owner);
      } else if (badStyleValueWithSemicolonPattern.test(value)) {
        warnStyleValueWithSemicolon(name, value, owner);
      }

      if (typeof value === 'number' && isNaN(value)) {
        warnStyleValueIsNaN(name, value, owner);
      }
    };
  })();
}

/**
   * Serializes a mapping of style properties for use as inline styles:
   *
   *   > createMarkupForStyles({width: '200px', height: 0})
   *   "width:200px;height:0;"
   *
   * Undefined values are ignored so that declarative programming is easier.
   * The result should be HTML-escaped before insertion into the DOM.
   *
   * @param {object} styles
   * @param {ReactDOMComponent} component
   * @return {?string}
   */

function createMarkupForStyles(styles, component) {
  var serialized = '';
  for (var styleName in styles) {
    var isCustomProp = styleName.indexOf('--') === 0;
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }
    var styleValue = styles[styleName];
    if (process.env.NODE_ENV !== 'production' && !isCustomProp) {
      warnValidStyle(styleName, styleValue, component);
    }
    if (styleValue != null) {
      if (isCustomProp) {
        serialized += styleName + ':' + styleValue + ';';
      } else {
        serialized += processStyleName(styleName) + ':';
        serialized += (0, _dangerousStyleValue2.default)(styleName, styleValue, component) + ';';
      }
    }
  }
  return serialized || null;
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 178 */
/***/ (function(module, exports) {

var ENTITIES = [['Aacute', [193]], ['aacute', [225]], ['Abreve', [258]], ['abreve', [259]], ['ac', [8766]], ['acd', [8767]], ['acE', [8766, 819]], ['Acirc', [194]], ['acirc', [226]], ['acute', [180]], ['Acy', [1040]], ['acy', [1072]], ['AElig', [198]], ['aelig', [230]], ['af', [8289]], ['Afr', [120068]], ['afr', [120094]], ['Agrave', [192]], ['agrave', [224]], ['alefsym', [8501]], ['aleph', [8501]], ['Alpha', [913]], ['alpha', [945]], ['Amacr', [256]], ['amacr', [257]], ['amalg', [10815]], ['amp', [38]], ['AMP', [38]], ['andand', [10837]], ['And', [10835]], ['and', [8743]], ['andd', [10844]], ['andslope', [10840]], ['andv', [10842]], ['ang', [8736]], ['ange', [10660]], ['angle', [8736]], ['angmsdaa', [10664]], ['angmsdab', [10665]], ['angmsdac', [10666]], ['angmsdad', [10667]], ['angmsdae', [10668]], ['angmsdaf', [10669]], ['angmsdag', [10670]], ['angmsdah', [10671]], ['angmsd', [8737]], ['angrt', [8735]], ['angrtvb', [8894]], ['angrtvbd', [10653]], ['angsph', [8738]], ['angst', [197]], ['angzarr', [9084]], ['Aogon', [260]], ['aogon', [261]], ['Aopf', [120120]], ['aopf', [120146]], ['apacir', [10863]], ['ap', [8776]], ['apE', [10864]], ['ape', [8778]], ['apid', [8779]], ['apos', [39]], ['ApplyFunction', [8289]], ['approx', [8776]], ['approxeq', [8778]], ['Aring', [197]], ['aring', [229]], ['Ascr', [119964]], ['ascr', [119990]], ['Assign', [8788]], ['ast', [42]], ['asymp', [8776]], ['asympeq', [8781]], ['Atilde', [195]], ['atilde', [227]], ['Auml', [196]], ['auml', [228]], ['awconint', [8755]], ['awint', [10769]], ['backcong', [8780]], ['backepsilon', [1014]], ['backprime', [8245]], ['backsim', [8765]], ['backsimeq', [8909]], ['Backslash', [8726]], ['Barv', [10983]], ['barvee', [8893]], ['barwed', [8965]], ['Barwed', [8966]], ['barwedge', [8965]], ['bbrk', [9141]], ['bbrktbrk', [9142]], ['bcong', [8780]], ['Bcy', [1041]], ['bcy', [1073]], ['bdquo', [8222]], ['becaus', [8757]], ['because', [8757]], ['Because', [8757]], ['bemptyv', [10672]], ['bepsi', [1014]], ['bernou', [8492]], ['Bernoullis', [8492]], ['Beta', [914]], ['beta', [946]], ['beth', [8502]], ['between', [8812]], ['Bfr', [120069]], ['bfr', [120095]], ['bigcap', [8898]], ['bigcirc', [9711]], ['bigcup', [8899]], ['bigodot', [10752]], ['bigoplus', [10753]], ['bigotimes', [10754]], ['bigsqcup', [10758]], ['bigstar', [9733]], ['bigtriangledown', [9661]], ['bigtriangleup', [9651]], ['biguplus', [10756]], ['bigvee', [8897]], ['bigwedge', [8896]], ['bkarow', [10509]], ['blacklozenge', [10731]], ['blacksquare', [9642]], ['blacktriangle', [9652]], ['blacktriangledown', [9662]], ['blacktriangleleft', [9666]], ['blacktriangleright', [9656]], ['blank', [9251]], ['blk12', [9618]], ['blk14', [9617]], ['blk34', [9619]], ['block', [9608]], ['bne', [61, 8421]], ['bnequiv', [8801, 8421]], ['bNot', [10989]], ['bnot', [8976]], ['Bopf', [120121]], ['bopf', [120147]], ['bot', [8869]], ['bottom', [8869]], ['bowtie', [8904]], ['boxbox', [10697]], ['boxdl', [9488]], ['boxdL', [9557]], ['boxDl', [9558]], ['boxDL', [9559]], ['boxdr', [9484]], ['boxdR', [9554]], ['boxDr', [9555]], ['boxDR', [9556]], ['boxh', [9472]], ['boxH', [9552]], ['boxhd', [9516]], ['boxHd', [9572]], ['boxhD', [9573]], ['boxHD', [9574]], ['boxhu', [9524]], ['boxHu', [9575]], ['boxhU', [9576]], ['boxHU', [9577]], ['boxminus', [8863]], ['boxplus', [8862]], ['boxtimes', [8864]], ['boxul', [9496]], ['boxuL', [9563]], ['boxUl', [9564]], ['boxUL', [9565]], ['boxur', [9492]], ['boxuR', [9560]], ['boxUr', [9561]], ['boxUR', [9562]], ['boxv', [9474]], ['boxV', [9553]], ['boxvh', [9532]], ['boxvH', [9578]], ['boxVh', [9579]], ['boxVH', [9580]], ['boxvl', [9508]], ['boxvL', [9569]], ['boxVl', [9570]], ['boxVL', [9571]], ['boxvr', [9500]], ['boxvR', [9566]], ['boxVr', [9567]], ['boxVR', [9568]], ['bprime', [8245]], ['breve', [728]], ['Breve', [728]], ['brvbar', [166]], ['bscr', [119991]], ['Bscr', [8492]], ['bsemi', [8271]], ['bsim', [8765]], ['bsime', [8909]], ['bsolb', [10693]], ['bsol', [92]], ['bsolhsub', [10184]], ['bull', [8226]], ['bullet', [8226]], ['bump', [8782]], ['bumpE', [10926]], ['bumpe', [8783]], ['Bumpeq', [8782]], ['bumpeq', [8783]], ['Cacute', [262]], ['cacute', [263]], ['capand', [10820]], ['capbrcup', [10825]], ['capcap', [10827]], ['cap', [8745]], ['Cap', [8914]], ['capcup', [10823]], ['capdot', [10816]], ['CapitalDifferentialD', [8517]], ['caps', [8745, 65024]], ['caret', [8257]], ['caron', [711]], ['Cayleys', [8493]], ['ccaps', [10829]], ['Ccaron', [268]], ['ccaron', [269]], ['Ccedil', [199]], ['ccedil', [231]], ['Ccirc', [264]], ['ccirc', [265]], ['Cconint', [8752]], ['ccups', [10828]], ['ccupssm', [10832]], ['Cdot', [266]], ['cdot', [267]], ['cedil', [184]], ['Cedilla', [184]], ['cemptyv', [10674]], ['cent', [162]], ['centerdot', [183]], ['CenterDot', [183]], ['cfr', [120096]], ['Cfr', [8493]], ['CHcy', [1063]], ['chcy', [1095]], ['check', [10003]], ['checkmark', [10003]], ['Chi', [935]], ['chi', [967]], ['circ', [710]], ['circeq', [8791]], ['circlearrowleft', [8634]], ['circlearrowright', [8635]], ['circledast', [8859]], ['circledcirc', [8858]], ['circleddash', [8861]], ['CircleDot', [8857]], ['circledR', [174]], ['circledS', [9416]], ['CircleMinus', [8854]], ['CirclePlus', [8853]], ['CircleTimes', [8855]], ['cir', [9675]], ['cirE', [10691]], ['cire', [8791]], ['cirfnint', [10768]], ['cirmid', [10991]], ['cirscir', [10690]], ['ClockwiseContourIntegral', [8754]], ['CloseCurlyDoubleQuote', [8221]], ['CloseCurlyQuote', [8217]], ['clubs', [9827]], ['clubsuit', [9827]], ['colon', [58]], ['Colon', [8759]], ['Colone', [10868]], ['colone', [8788]], ['coloneq', [8788]], ['comma', [44]], ['commat', [64]], ['comp', [8705]], ['compfn', [8728]], ['complement', [8705]], ['complexes', [8450]], ['cong', [8773]], ['congdot', [10861]], ['Congruent', [8801]], ['conint', [8750]], ['Conint', [8751]], ['ContourIntegral', [8750]], ['copf', [120148]], ['Copf', [8450]], ['coprod', [8720]], ['Coproduct', [8720]], ['copy', [169]], ['COPY', [169]], ['copysr', [8471]], ['CounterClockwiseContourIntegral', [8755]], ['crarr', [8629]], ['cross', [10007]], ['Cross', [10799]], ['Cscr', [119966]], ['cscr', [119992]], ['csub', [10959]], ['csube', [10961]], ['csup', [10960]], ['csupe', [10962]], ['ctdot', [8943]], ['cudarrl', [10552]], ['cudarrr', [10549]], ['cuepr', [8926]], ['cuesc', [8927]], ['cularr', [8630]], ['cularrp', [10557]], ['cupbrcap', [10824]], ['cupcap', [10822]], ['CupCap', [8781]], ['cup', [8746]], ['Cup', [8915]], ['cupcup', [10826]], ['cupdot', [8845]], ['cupor', [10821]], ['cups', [8746, 65024]], ['curarr', [8631]], ['curarrm', [10556]], ['curlyeqprec', [8926]], ['curlyeqsucc', [8927]], ['curlyvee', [8910]], ['curlywedge', [8911]], ['curren', [164]], ['curvearrowleft', [8630]], ['curvearrowright', [8631]], ['cuvee', [8910]], ['cuwed', [8911]], ['cwconint', [8754]], ['cwint', [8753]], ['cylcty', [9005]], ['dagger', [8224]], ['Dagger', [8225]], ['daleth', [8504]], ['darr', [8595]], ['Darr', [8609]], ['dArr', [8659]], ['dash', [8208]], ['Dashv', [10980]], ['dashv', [8867]], ['dbkarow', [10511]], ['dblac', [733]], ['Dcaron', [270]], ['dcaron', [271]], ['Dcy', [1044]], ['dcy', [1076]], ['ddagger', [8225]], ['ddarr', [8650]], ['DD', [8517]], ['dd', [8518]], ['DDotrahd', [10513]], ['ddotseq', [10871]], ['deg', [176]], ['Del', [8711]], ['Delta', [916]], ['delta', [948]], ['demptyv', [10673]], ['dfisht', [10623]], ['Dfr', [120071]], ['dfr', [120097]], ['dHar', [10597]], ['dharl', [8643]], ['dharr', [8642]], ['DiacriticalAcute', [180]], ['DiacriticalDot', [729]], ['DiacriticalDoubleAcute', [733]], ['DiacriticalGrave', [96]], ['DiacriticalTilde', [732]], ['diam', [8900]], ['diamond', [8900]], ['Diamond', [8900]], ['diamondsuit', [9830]], ['diams', [9830]], ['die', [168]], ['DifferentialD', [8518]], ['digamma', [989]], ['disin', [8946]], ['div', [247]], ['divide', [247]], ['divideontimes', [8903]], ['divonx', [8903]], ['DJcy', [1026]], ['djcy', [1106]], ['dlcorn', [8990]], ['dlcrop', [8973]], ['dollar', [36]], ['Dopf', [120123]], ['dopf', [120149]], ['Dot', [168]], ['dot', [729]], ['DotDot', [8412]], ['doteq', [8784]], ['doteqdot', [8785]], ['DotEqual', [8784]], ['dotminus', [8760]], ['dotplus', [8724]], ['dotsquare', [8865]], ['doublebarwedge', [8966]], ['DoubleContourIntegral', [8751]], ['DoubleDot', [168]], ['DoubleDownArrow', [8659]], ['DoubleLeftArrow', [8656]], ['DoubleLeftRightArrow', [8660]], ['DoubleLeftTee', [10980]], ['DoubleLongLeftArrow', [10232]], ['DoubleLongLeftRightArrow', [10234]], ['DoubleLongRightArrow', [10233]], ['DoubleRightArrow', [8658]], ['DoubleRightTee', [8872]], ['DoubleUpArrow', [8657]], ['DoubleUpDownArrow', [8661]], ['DoubleVerticalBar', [8741]], ['DownArrowBar', [10515]], ['downarrow', [8595]], ['DownArrow', [8595]], ['Downarrow', [8659]], ['DownArrowUpArrow', [8693]], ['DownBreve', [785]], ['downdownarrows', [8650]], ['downharpoonleft', [8643]], ['downharpoonright', [8642]], ['DownLeftRightVector', [10576]], ['DownLeftTeeVector', [10590]], ['DownLeftVectorBar', [10582]], ['DownLeftVector', [8637]], ['DownRightTeeVector', [10591]], ['DownRightVectorBar', [10583]], ['DownRightVector', [8641]], ['DownTeeArrow', [8615]], ['DownTee', [8868]], ['drbkarow', [10512]], ['drcorn', [8991]], ['drcrop', [8972]], ['Dscr', [119967]], ['dscr', [119993]], ['DScy', [1029]], ['dscy', [1109]], ['dsol', [10742]], ['Dstrok', [272]], ['dstrok', [273]], ['dtdot', [8945]], ['dtri', [9663]], ['dtrif', [9662]], ['duarr', [8693]], ['duhar', [10607]], ['dwangle', [10662]], ['DZcy', [1039]], ['dzcy', [1119]], ['dzigrarr', [10239]], ['Eacute', [201]], ['eacute', [233]], ['easter', [10862]], ['Ecaron', [282]], ['ecaron', [283]], ['Ecirc', [202]], ['ecirc', [234]], ['ecir', [8790]], ['ecolon', [8789]], ['Ecy', [1069]], ['ecy', [1101]], ['eDDot', [10871]], ['Edot', [278]], ['edot', [279]], ['eDot', [8785]], ['ee', [8519]], ['efDot', [8786]], ['Efr', [120072]], ['efr', [120098]], ['eg', [10906]], ['Egrave', [200]], ['egrave', [232]], ['egs', [10902]], ['egsdot', [10904]], ['el', [10905]], ['Element', [8712]], ['elinters', [9191]], ['ell', [8467]], ['els', [10901]], ['elsdot', [10903]], ['Emacr', [274]], ['emacr', [275]], ['empty', [8709]], ['emptyset', [8709]], ['EmptySmallSquare', [9723]], ['emptyv', [8709]], ['EmptyVerySmallSquare', [9643]], ['emsp13', [8196]], ['emsp14', [8197]], ['emsp', [8195]], ['ENG', [330]], ['eng', [331]], ['ensp', [8194]], ['Eogon', [280]], ['eogon', [281]], ['Eopf', [120124]], ['eopf', [120150]], ['epar', [8917]], ['eparsl', [10723]], ['eplus', [10865]], ['epsi', [949]], ['Epsilon', [917]], ['epsilon', [949]], ['epsiv', [1013]], ['eqcirc', [8790]], ['eqcolon', [8789]], ['eqsim', [8770]], ['eqslantgtr', [10902]], ['eqslantless', [10901]], ['Equal', [10869]], ['equals', [61]], ['EqualTilde', [8770]], ['equest', [8799]], ['Equilibrium', [8652]], ['equiv', [8801]], ['equivDD', [10872]], ['eqvparsl', [10725]], ['erarr', [10609]], ['erDot', [8787]], ['escr', [8495]], ['Escr', [8496]], ['esdot', [8784]], ['Esim', [10867]], ['esim', [8770]], ['Eta', [919]], ['eta', [951]], ['ETH', [208]], ['eth', [240]], ['Euml', [203]], ['euml', [235]], ['euro', [8364]], ['excl', [33]], ['exist', [8707]], ['Exists', [8707]], ['expectation', [8496]], ['exponentiale', [8519]], ['ExponentialE', [8519]], ['fallingdotseq', [8786]], ['Fcy', [1060]], ['fcy', [1092]], ['female', [9792]], ['ffilig', [64259]], ['fflig', [64256]], ['ffllig', [64260]], ['Ffr', [120073]], ['ffr', [120099]], ['filig', [64257]], ['FilledSmallSquare', [9724]], ['FilledVerySmallSquare', [9642]], ['fjlig', [102, 106]], ['flat', [9837]], ['fllig', [64258]], ['fltns', [9649]], ['fnof', [402]], ['Fopf', [120125]], ['fopf', [120151]], ['forall', [8704]], ['ForAll', [8704]], ['fork', [8916]], ['forkv', [10969]], ['Fouriertrf', [8497]], ['fpartint', [10765]], ['frac12', [189]], ['frac13', [8531]], ['frac14', [188]], ['frac15', [8533]], ['frac16', [8537]], ['frac18', [8539]], ['frac23', [8532]], ['frac25', [8534]], ['frac34', [190]], ['frac35', [8535]], ['frac38', [8540]], ['frac45', [8536]], ['frac56', [8538]], ['frac58', [8541]], ['frac78', [8542]], ['frasl', [8260]], ['frown', [8994]], ['fscr', [119995]], ['Fscr', [8497]], ['gacute', [501]], ['Gamma', [915]], ['gamma', [947]], ['Gammad', [988]], ['gammad', [989]], ['gap', [10886]], ['Gbreve', [286]], ['gbreve', [287]], ['Gcedil', [290]], ['Gcirc', [284]], ['gcirc', [285]], ['Gcy', [1043]], ['gcy', [1075]], ['Gdot', [288]], ['gdot', [289]], ['ge', [8805]], ['gE', [8807]], ['gEl', [10892]], ['gel', [8923]], ['geq', [8805]], ['geqq', [8807]], ['geqslant', [10878]], ['gescc', [10921]], ['ges', [10878]], ['gesdot', [10880]], ['gesdoto', [10882]], ['gesdotol', [10884]], ['gesl', [8923, 65024]], ['gesles', [10900]], ['Gfr', [120074]], ['gfr', [120100]], ['gg', [8811]], ['Gg', [8921]], ['ggg', [8921]], ['gimel', [8503]], ['GJcy', [1027]], ['gjcy', [1107]], ['gla', [10917]], ['gl', [8823]], ['glE', [10898]], ['glj', [10916]], ['gnap', [10890]], ['gnapprox', [10890]], ['gne', [10888]], ['gnE', [8809]], ['gneq', [10888]], ['gneqq', [8809]], ['gnsim', [8935]], ['Gopf', [120126]], ['gopf', [120152]], ['grave', [96]], ['GreaterEqual', [8805]], ['GreaterEqualLess', [8923]], ['GreaterFullEqual', [8807]], ['GreaterGreater', [10914]], ['GreaterLess', [8823]], ['GreaterSlantEqual', [10878]], ['GreaterTilde', [8819]], ['Gscr', [119970]], ['gscr', [8458]], ['gsim', [8819]], ['gsime', [10894]], ['gsiml', [10896]], ['gtcc', [10919]], ['gtcir', [10874]], ['gt', [62]], ['GT', [62]], ['Gt', [8811]], ['gtdot', [8919]], ['gtlPar', [10645]], ['gtquest', [10876]], ['gtrapprox', [10886]], ['gtrarr', [10616]], ['gtrdot', [8919]], ['gtreqless', [8923]], ['gtreqqless', [10892]], ['gtrless', [8823]], ['gtrsim', [8819]], ['gvertneqq', [8809, 65024]], ['gvnE', [8809, 65024]], ['Hacek', [711]], ['hairsp', [8202]], ['half', [189]], ['hamilt', [8459]], ['HARDcy', [1066]], ['hardcy', [1098]], ['harrcir', [10568]], ['harr', [8596]], ['hArr', [8660]], ['harrw', [8621]], ['Hat', [94]], ['hbar', [8463]], ['Hcirc', [292]], ['hcirc', [293]], ['hearts', [9829]], ['heartsuit', [9829]], ['hellip', [8230]], ['hercon', [8889]], ['hfr', [120101]], ['Hfr', [8460]], ['HilbertSpace', [8459]], ['hksearow', [10533]], ['hkswarow', [10534]], ['hoarr', [8703]], ['homtht', [8763]], ['hookleftarrow', [8617]], ['hookrightarrow', [8618]], ['hopf', [120153]], ['Hopf', [8461]], ['horbar', [8213]], ['HorizontalLine', [9472]], ['hscr', [119997]], ['Hscr', [8459]], ['hslash', [8463]], ['Hstrok', [294]], ['hstrok', [295]], ['HumpDownHump', [8782]], ['HumpEqual', [8783]], ['hybull', [8259]], ['hyphen', [8208]], ['Iacute', [205]], ['iacute', [237]], ['ic', [8291]], ['Icirc', [206]], ['icirc', [238]], ['Icy', [1048]], ['icy', [1080]], ['Idot', [304]], ['IEcy', [1045]], ['iecy', [1077]], ['iexcl', [161]], ['iff', [8660]], ['ifr', [120102]], ['Ifr', [8465]], ['Igrave', [204]], ['igrave', [236]], ['ii', [8520]], ['iiiint', [10764]], ['iiint', [8749]], ['iinfin', [10716]], ['iiota', [8489]], ['IJlig', [306]], ['ijlig', [307]], ['Imacr', [298]], ['imacr', [299]], ['image', [8465]], ['ImaginaryI', [8520]], ['imagline', [8464]], ['imagpart', [8465]], ['imath', [305]], ['Im', [8465]], ['imof', [8887]], ['imped', [437]], ['Implies', [8658]], ['incare', [8453]], ['in', [8712]], ['infin', [8734]], ['infintie', [10717]], ['inodot', [305]], ['intcal', [8890]], ['int', [8747]], ['Int', [8748]], ['integers', [8484]], ['Integral', [8747]], ['intercal', [8890]], ['Intersection', [8898]], ['intlarhk', [10775]], ['intprod', [10812]], ['InvisibleComma', [8291]], ['InvisibleTimes', [8290]], ['IOcy', [1025]], ['iocy', [1105]], ['Iogon', [302]], ['iogon', [303]], ['Iopf', [120128]], ['iopf', [120154]], ['Iota', [921]], ['iota', [953]], ['iprod', [10812]], ['iquest', [191]], ['iscr', [119998]], ['Iscr', [8464]], ['isin', [8712]], ['isindot', [8949]], ['isinE', [8953]], ['isins', [8948]], ['isinsv', [8947]], ['isinv', [8712]], ['it', [8290]], ['Itilde', [296]], ['itilde', [297]], ['Iukcy', [1030]], ['iukcy', [1110]], ['Iuml', [207]], ['iuml', [239]], ['Jcirc', [308]], ['jcirc', [309]], ['Jcy', [1049]], ['jcy', [1081]], ['Jfr', [120077]], ['jfr', [120103]], ['jmath', [567]], ['Jopf', [120129]], ['jopf', [120155]], ['Jscr', [119973]], ['jscr', [119999]], ['Jsercy', [1032]], ['jsercy', [1112]], ['Jukcy', [1028]], ['jukcy', [1108]], ['Kappa', [922]], ['kappa', [954]], ['kappav', [1008]], ['Kcedil', [310]], ['kcedil', [311]], ['Kcy', [1050]], ['kcy', [1082]], ['Kfr', [120078]], ['kfr', [120104]], ['kgreen', [312]], ['KHcy', [1061]], ['khcy', [1093]], ['KJcy', [1036]], ['kjcy', [1116]], ['Kopf', [120130]], ['kopf', [120156]], ['Kscr', [119974]], ['kscr', [120000]], ['lAarr', [8666]], ['Lacute', [313]], ['lacute', [314]], ['laemptyv', [10676]], ['lagran', [8466]], ['Lambda', [923]], ['lambda', [955]], ['lang', [10216]], ['Lang', [10218]], ['langd', [10641]], ['langle', [10216]], ['lap', [10885]], ['Laplacetrf', [8466]], ['laquo', [171]], ['larrb', [8676]], ['larrbfs', [10527]], ['larr', [8592]], ['Larr', [8606]], ['lArr', [8656]], ['larrfs', [10525]], ['larrhk', [8617]], ['larrlp', [8619]], ['larrpl', [10553]], ['larrsim', [10611]], ['larrtl', [8610]], ['latail', [10521]], ['lAtail', [10523]], ['lat', [10923]], ['late', [10925]], ['lates', [10925, 65024]], ['lbarr', [10508]], ['lBarr', [10510]], ['lbbrk', [10098]], ['lbrace', [123]], ['lbrack', [91]], ['lbrke', [10635]], ['lbrksld', [10639]], ['lbrkslu', [10637]], ['Lcaron', [317]], ['lcaron', [318]], ['Lcedil', [315]], ['lcedil', [316]], ['lceil', [8968]], ['lcub', [123]], ['Lcy', [1051]], ['lcy', [1083]], ['ldca', [10550]], ['ldquo', [8220]], ['ldquor', [8222]], ['ldrdhar', [10599]], ['ldrushar', [10571]], ['ldsh', [8626]], ['le', [8804]], ['lE', [8806]], ['LeftAngleBracket', [10216]], ['LeftArrowBar', [8676]], ['leftarrow', [8592]], ['LeftArrow', [8592]], ['Leftarrow', [8656]], ['LeftArrowRightArrow', [8646]], ['leftarrowtail', [8610]], ['LeftCeiling', [8968]], ['LeftDoubleBracket', [10214]], ['LeftDownTeeVector', [10593]], ['LeftDownVectorBar', [10585]], ['LeftDownVector', [8643]], ['LeftFloor', [8970]], ['leftharpoondown', [8637]], ['leftharpoonup', [8636]], ['leftleftarrows', [8647]], ['leftrightarrow', [8596]], ['LeftRightArrow', [8596]], ['Leftrightarrow', [8660]], ['leftrightarrows', [8646]], ['leftrightharpoons', [8651]], ['leftrightsquigarrow', [8621]], ['LeftRightVector', [10574]], ['LeftTeeArrow', [8612]], ['LeftTee', [8867]], ['LeftTeeVector', [10586]], ['leftthreetimes', [8907]], ['LeftTriangleBar', [10703]], ['LeftTriangle', [8882]], ['LeftTriangleEqual', [8884]], ['LeftUpDownVector', [10577]], ['LeftUpTeeVector', [10592]], ['LeftUpVectorBar', [10584]], ['LeftUpVector', [8639]], ['LeftVectorBar', [10578]], ['LeftVector', [8636]], ['lEg', [10891]], ['leg', [8922]], ['leq', [8804]], ['leqq', [8806]], ['leqslant', [10877]], ['lescc', [10920]], ['les', [10877]], ['lesdot', [10879]], ['lesdoto', [10881]], ['lesdotor', [10883]], ['lesg', [8922, 65024]], ['lesges', [10899]], ['lessapprox', [10885]], ['lessdot', [8918]], ['lesseqgtr', [8922]], ['lesseqqgtr', [10891]], ['LessEqualGreater', [8922]], ['LessFullEqual', [8806]], ['LessGreater', [8822]], ['lessgtr', [8822]], ['LessLess', [10913]], ['lesssim', [8818]], ['LessSlantEqual', [10877]], ['LessTilde', [8818]], ['lfisht', [10620]], ['lfloor', [8970]], ['Lfr', [120079]], ['lfr', [120105]], ['lg', [8822]], ['lgE', [10897]], ['lHar', [10594]], ['lhard', [8637]], ['lharu', [8636]], ['lharul', [10602]], ['lhblk', [9604]], ['LJcy', [1033]], ['ljcy', [1113]], ['llarr', [8647]], ['ll', [8810]], ['Ll', [8920]], ['llcorner', [8990]], ['Lleftarrow', [8666]], ['llhard', [10603]], ['lltri', [9722]], ['Lmidot', [319]], ['lmidot', [320]], ['lmoustache', [9136]], ['lmoust', [9136]], ['lnap', [10889]], ['lnapprox', [10889]], ['lne', [10887]], ['lnE', [8808]], ['lneq', [10887]], ['lneqq', [8808]], ['lnsim', [8934]], ['loang', [10220]], ['loarr', [8701]], ['lobrk', [10214]], ['longleftarrow', [10229]], ['LongLeftArrow', [10229]], ['Longleftarrow', [10232]], ['longleftrightarrow', [10231]], ['LongLeftRightArrow', [10231]], ['Longleftrightarrow', [10234]], ['longmapsto', [10236]], ['longrightarrow', [10230]], ['LongRightArrow', [10230]], ['Longrightarrow', [10233]], ['looparrowleft', [8619]], ['looparrowright', [8620]], ['lopar', [10629]], ['Lopf', [120131]], ['lopf', [120157]], ['loplus', [10797]], ['lotimes', [10804]], ['lowast', [8727]], ['lowbar', [95]], ['LowerLeftArrow', [8601]], ['LowerRightArrow', [8600]], ['loz', [9674]], ['lozenge', [9674]], ['lozf', [10731]], ['lpar', [40]], ['lparlt', [10643]], ['lrarr', [8646]], ['lrcorner', [8991]], ['lrhar', [8651]], ['lrhard', [10605]], ['lrm', [8206]], ['lrtri', [8895]], ['lsaquo', [8249]], ['lscr', [120001]], ['Lscr', [8466]], ['lsh', [8624]], ['Lsh', [8624]], ['lsim', [8818]], ['lsime', [10893]], ['lsimg', [10895]], ['lsqb', [91]], ['lsquo', [8216]], ['lsquor', [8218]], ['Lstrok', [321]], ['lstrok', [322]], ['ltcc', [10918]], ['ltcir', [10873]], ['lt', [60]], ['LT', [60]], ['Lt', [8810]], ['ltdot', [8918]], ['lthree', [8907]], ['ltimes', [8905]], ['ltlarr', [10614]], ['ltquest', [10875]], ['ltri', [9667]], ['ltrie', [8884]], ['ltrif', [9666]], ['ltrPar', [10646]], ['lurdshar', [10570]], ['luruhar', [10598]], ['lvertneqq', [8808, 65024]], ['lvnE', [8808, 65024]], ['macr', [175]], ['male', [9794]], ['malt', [10016]], ['maltese', [10016]], ['Map', [10501]], ['map', [8614]], ['mapsto', [8614]], ['mapstodown', [8615]], ['mapstoleft', [8612]], ['mapstoup', [8613]], ['marker', [9646]], ['mcomma', [10793]], ['Mcy', [1052]], ['mcy', [1084]], ['mdash', [8212]], ['mDDot', [8762]], ['measuredangle', [8737]], ['MediumSpace', [8287]], ['Mellintrf', [8499]], ['Mfr', [120080]], ['mfr', [120106]], ['mho', [8487]], ['micro', [181]], ['midast', [42]], ['midcir', [10992]], ['mid', [8739]], ['middot', [183]], ['minusb', [8863]], ['minus', [8722]], ['minusd', [8760]], ['minusdu', [10794]], ['MinusPlus', [8723]], ['mlcp', [10971]], ['mldr', [8230]], ['mnplus', [8723]], ['models', [8871]], ['Mopf', [120132]], ['mopf', [120158]], ['mp', [8723]], ['mscr', [120002]], ['Mscr', [8499]], ['mstpos', [8766]], ['Mu', [924]], ['mu', [956]], ['multimap', [8888]], ['mumap', [8888]], ['nabla', [8711]], ['Nacute', [323]], ['nacute', [324]], ['nang', [8736, 8402]], ['nap', [8777]], ['napE', [10864, 824]], ['napid', [8779, 824]], ['napos', [329]], ['napprox', [8777]], ['natural', [9838]], ['naturals', [8469]], ['natur', [9838]], ['nbsp', [160]], ['nbump', [8782, 824]], ['nbumpe', [8783, 824]], ['ncap', [10819]], ['Ncaron', [327]], ['ncaron', [328]], ['Ncedil', [325]], ['ncedil', [326]], ['ncong', [8775]], ['ncongdot', [10861, 824]], ['ncup', [10818]], ['Ncy', [1053]], ['ncy', [1085]], ['ndash', [8211]], ['nearhk', [10532]], ['nearr', [8599]], ['neArr', [8663]], ['nearrow', [8599]], ['ne', [8800]], ['nedot', [8784, 824]], ['NegativeMediumSpace', [8203]], ['NegativeThickSpace', [8203]], ['NegativeThinSpace', [8203]], ['NegativeVeryThinSpace', [8203]], ['nequiv', [8802]], ['nesear', [10536]], ['nesim', [8770, 824]], ['NestedGreaterGreater', [8811]], ['NestedLessLess', [8810]], ['nexist', [8708]], ['nexists', [8708]], ['Nfr', [120081]], ['nfr', [120107]], ['ngE', [8807, 824]], ['nge', [8817]], ['ngeq', [8817]], ['ngeqq', [8807, 824]], ['ngeqslant', [10878, 824]], ['nges', [10878, 824]], ['nGg', [8921, 824]], ['ngsim', [8821]], ['nGt', [8811, 8402]], ['ngt', [8815]], ['ngtr', [8815]], ['nGtv', [8811, 824]], ['nharr', [8622]], ['nhArr', [8654]], ['nhpar', [10994]], ['ni', [8715]], ['nis', [8956]], ['nisd', [8954]], ['niv', [8715]], ['NJcy', [1034]], ['njcy', [1114]], ['nlarr', [8602]], ['nlArr', [8653]], ['nldr', [8229]], ['nlE', [8806, 824]], ['nle', [8816]], ['nleftarrow', [8602]], ['nLeftarrow', [8653]], ['nleftrightarrow', [8622]], ['nLeftrightarrow', [8654]], ['nleq', [8816]], ['nleqq', [8806, 824]], ['nleqslant', [10877, 824]], ['nles', [10877, 824]], ['nless', [8814]], ['nLl', [8920, 824]], ['nlsim', [8820]], ['nLt', [8810, 8402]], ['nlt', [8814]], ['nltri', [8938]], ['nltrie', [8940]], ['nLtv', [8810, 824]], ['nmid', [8740]], ['NoBreak', [8288]], ['NonBreakingSpace', [160]], ['nopf', [120159]], ['Nopf', [8469]], ['Not', [10988]], ['not', [172]], ['NotCongruent', [8802]], ['NotCupCap', [8813]], ['NotDoubleVerticalBar', [8742]], ['NotElement', [8713]], ['NotEqual', [8800]], ['NotEqualTilde', [8770, 824]], ['NotExists', [8708]], ['NotGreater', [8815]], ['NotGreaterEqual', [8817]], ['NotGreaterFullEqual', [8807, 824]], ['NotGreaterGreater', [8811, 824]], ['NotGreaterLess', [8825]], ['NotGreaterSlantEqual', [10878, 824]], ['NotGreaterTilde', [8821]], ['NotHumpDownHump', [8782, 824]], ['NotHumpEqual', [8783, 824]], ['notin', [8713]], ['notindot', [8949, 824]], ['notinE', [8953, 824]], ['notinva', [8713]], ['notinvb', [8951]], ['notinvc', [8950]], ['NotLeftTriangleBar', [10703, 824]], ['NotLeftTriangle', [8938]], ['NotLeftTriangleEqual', [8940]], ['NotLess', [8814]], ['NotLessEqual', [8816]], ['NotLessGreater', [8824]], ['NotLessLess', [8810, 824]], ['NotLessSlantEqual', [10877, 824]], ['NotLessTilde', [8820]], ['NotNestedGreaterGreater', [10914, 824]], ['NotNestedLessLess', [10913, 824]], ['notni', [8716]], ['notniva', [8716]], ['notnivb', [8958]], ['notnivc', [8957]], ['NotPrecedes', [8832]], ['NotPrecedesEqual', [10927, 824]], ['NotPrecedesSlantEqual', [8928]], ['NotReverseElement', [8716]], ['NotRightTriangleBar', [10704, 824]], ['NotRightTriangle', [8939]], ['NotRightTriangleEqual', [8941]], ['NotSquareSubset', [8847, 824]], ['NotSquareSubsetEqual', [8930]], ['NotSquareSuperset', [8848, 824]], ['NotSquareSupersetEqual', [8931]], ['NotSubset', [8834, 8402]], ['NotSubsetEqual', [8840]], ['NotSucceeds', [8833]], ['NotSucceedsEqual', [10928, 824]], ['NotSucceedsSlantEqual', [8929]], ['NotSucceedsTilde', [8831, 824]], ['NotSuperset', [8835, 8402]], ['NotSupersetEqual', [8841]], ['NotTilde', [8769]], ['NotTildeEqual', [8772]], ['NotTildeFullEqual', [8775]], ['NotTildeTilde', [8777]], ['NotVerticalBar', [8740]], ['nparallel', [8742]], ['npar', [8742]], ['nparsl', [11005, 8421]], ['npart', [8706, 824]], ['npolint', [10772]], ['npr', [8832]], ['nprcue', [8928]], ['nprec', [8832]], ['npreceq', [10927, 824]], ['npre', [10927, 824]], ['nrarrc', [10547, 824]], ['nrarr', [8603]], ['nrArr', [8655]], ['nrarrw', [8605, 824]], ['nrightarrow', [8603]], ['nRightarrow', [8655]], ['nrtri', [8939]], ['nrtrie', [8941]], ['nsc', [8833]], ['nsccue', [8929]], ['nsce', [10928, 824]], ['Nscr', [119977]], ['nscr', [120003]], ['nshortmid', [8740]], ['nshortparallel', [8742]], ['nsim', [8769]], ['nsime', [8772]], ['nsimeq', [8772]], ['nsmid', [8740]], ['nspar', [8742]], ['nsqsube', [8930]], ['nsqsupe', [8931]], ['nsub', [8836]], ['nsubE', [10949, 824]], ['nsube', [8840]], ['nsubset', [8834, 8402]], ['nsubseteq', [8840]], ['nsubseteqq', [10949, 824]], ['nsucc', [8833]], ['nsucceq', [10928, 824]], ['nsup', [8837]], ['nsupE', [10950, 824]], ['nsupe', [8841]], ['nsupset', [8835, 8402]], ['nsupseteq', [8841]], ['nsupseteqq', [10950, 824]], ['ntgl', [8825]], ['Ntilde', [209]], ['ntilde', [241]], ['ntlg', [8824]], ['ntriangleleft', [8938]], ['ntrianglelefteq', [8940]], ['ntriangleright', [8939]], ['ntrianglerighteq', [8941]], ['Nu', [925]], ['nu', [957]], ['num', [35]], ['numero', [8470]], ['numsp', [8199]], ['nvap', [8781, 8402]], ['nvdash', [8876]], ['nvDash', [8877]], ['nVdash', [8878]], ['nVDash', [8879]], ['nvge', [8805, 8402]], ['nvgt', [62, 8402]], ['nvHarr', [10500]], ['nvinfin', [10718]], ['nvlArr', [10498]], ['nvle', [8804, 8402]], ['nvlt', [60, 8402]], ['nvltrie', [8884, 8402]], ['nvrArr', [10499]], ['nvrtrie', [8885, 8402]], ['nvsim', [8764, 8402]], ['nwarhk', [10531]], ['nwarr', [8598]], ['nwArr', [8662]], ['nwarrow', [8598]], ['nwnear', [10535]], ['Oacute', [211]], ['oacute', [243]], ['oast', [8859]], ['Ocirc', [212]], ['ocirc', [244]], ['ocir', [8858]], ['Ocy', [1054]], ['ocy', [1086]], ['odash', [8861]], ['Odblac', [336]], ['odblac', [337]], ['odiv', [10808]], ['odot', [8857]], ['odsold', [10684]], ['OElig', [338]], ['oelig', [339]], ['ofcir', [10687]], ['Ofr', [120082]], ['ofr', [120108]], ['ogon', [731]], ['Ograve', [210]], ['ograve', [242]], ['ogt', [10689]], ['ohbar', [10677]], ['ohm', [937]], ['oint', [8750]], ['olarr', [8634]], ['olcir', [10686]], ['olcross', [10683]], ['oline', [8254]], ['olt', [10688]], ['Omacr', [332]], ['omacr', [333]], ['Omega', [937]], ['omega', [969]], ['Omicron', [927]], ['omicron', [959]], ['omid', [10678]], ['ominus', [8854]], ['Oopf', [120134]], ['oopf', [120160]], ['opar', [10679]], ['OpenCurlyDoubleQuote', [8220]], ['OpenCurlyQuote', [8216]], ['operp', [10681]], ['oplus', [8853]], ['orarr', [8635]], ['Or', [10836]], ['or', [8744]], ['ord', [10845]], ['order', [8500]], ['orderof', [8500]], ['ordf', [170]], ['ordm', [186]], ['origof', [8886]], ['oror', [10838]], ['orslope', [10839]], ['orv', [10843]], ['oS', [9416]], ['Oscr', [119978]], ['oscr', [8500]], ['Oslash', [216]], ['oslash', [248]], ['osol', [8856]], ['Otilde', [213]], ['otilde', [245]], ['otimesas', [10806]], ['Otimes', [10807]], ['otimes', [8855]], ['Ouml', [214]], ['ouml', [246]], ['ovbar', [9021]], ['OverBar', [8254]], ['OverBrace', [9182]], ['OverBracket', [9140]], ['OverParenthesis', [9180]], ['para', [182]], ['parallel', [8741]], ['par', [8741]], ['parsim', [10995]], ['parsl', [11005]], ['part', [8706]], ['PartialD', [8706]], ['Pcy', [1055]], ['pcy', [1087]], ['percnt', [37]], ['period', [46]], ['permil', [8240]], ['perp', [8869]], ['pertenk', [8241]], ['Pfr', [120083]], ['pfr', [120109]], ['Phi', [934]], ['phi', [966]], ['phiv', [981]], ['phmmat', [8499]], ['phone', [9742]], ['Pi', [928]], ['pi', [960]], ['pitchfork', [8916]], ['piv', [982]], ['planck', [8463]], ['planckh', [8462]], ['plankv', [8463]], ['plusacir', [10787]], ['plusb', [8862]], ['pluscir', [10786]], ['plus', [43]], ['plusdo', [8724]], ['plusdu', [10789]], ['pluse', [10866]], ['PlusMinus', [177]], ['plusmn', [177]], ['plussim', [10790]], ['plustwo', [10791]], ['pm', [177]], ['Poincareplane', [8460]], ['pointint', [10773]], ['popf', [120161]], ['Popf', [8473]], ['pound', [163]], ['prap', [10935]], ['Pr', [10939]], ['pr', [8826]], ['prcue', [8828]], ['precapprox', [10935]], ['prec', [8826]], ['preccurlyeq', [8828]], ['Precedes', [8826]], ['PrecedesEqual', [10927]], ['PrecedesSlantEqual', [8828]], ['PrecedesTilde', [8830]], ['preceq', [10927]], ['precnapprox', [10937]], ['precneqq', [10933]], ['precnsim', [8936]], ['pre', [10927]], ['prE', [10931]], ['precsim', [8830]], ['prime', [8242]], ['Prime', [8243]], ['primes', [8473]], ['prnap', [10937]], ['prnE', [10933]], ['prnsim', [8936]], ['prod', [8719]], ['Product', [8719]], ['profalar', [9006]], ['profline', [8978]], ['profsurf', [8979]], ['prop', [8733]], ['Proportional', [8733]], ['Proportion', [8759]], ['propto', [8733]], ['prsim', [8830]], ['prurel', [8880]], ['Pscr', [119979]], ['pscr', [120005]], ['Psi', [936]], ['psi', [968]], ['puncsp', [8200]], ['Qfr', [120084]], ['qfr', [120110]], ['qint', [10764]], ['qopf', [120162]], ['Qopf', [8474]], ['qprime', [8279]], ['Qscr', [119980]], ['qscr', [120006]], ['quaternions', [8461]], ['quatint', [10774]], ['quest', [63]], ['questeq', [8799]], ['quot', [34]], ['QUOT', [34]], ['rAarr', [8667]], ['race', [8765, 817]], ['Racute', [340]], ['racute', [341]], ['radic', [8730]], ['raemptyv', [10675]], ['rang', [10217]], ['Rang', [10219]], ['rangd', [10642]], ['range', [10661]], ['rangle', [10217]], ['raquo', [187]], ['rarrap', [10613]], ['rarrb', [8677]], ['rarrbfs', [10528]], ['rarrc', [10547]], ['rarr', [8594]], ['Rarr', [8608]], ['rArr', [8658]], ['rarrfs', [10526]], ['rarrhk', [8618]], ['rarrlp', [8620]], ['rarrpl', [10565]], ['rarrsim', [10612]], ['Rarrtl', [10518]], ['rarrtl', [8611]], ['rarrw', [8605]], ['ratail', [10522]], ['rAtail', [10524]], ['ratio', [8758]], ['rationals', [8474]], ['rbarr', [10509]], ['rBarr', [10511]], ['RBarr', [10512]], ['rbbrk', [10099]], ['rbrace', [125]], ['rbrack', [93]], ['rbrke', [10636]], ['rbrksld', [10638]], ['rbrkslu', [10640]], ['Rcaron', [344]], ['rcaron', [345]], ['Rcedil', [342]], ['rcedil', [343]], ['rceil', [8969]], ['rcub', [125]], ['Rcy', [1056]], ['rcy', [1088]], ['rdca', [10551]], ['rdldhar', [10601]], ['rdquo', [8221]], ['rdquor', [8221]], ['rdsh', [8627]], ['real', [8476]], ['realine', [8475]], ['realpart', [8476]], ['reals', [8477]], ['Re', [8476]], ['rect', [9645]], ['reg', [174]], ['REG', [174]], ['ReverseElement', [8715]], ['ReverseEquilibrium', [8651]], ['ReverseUpEquilibrium', [10607]], ['rfisht', [10621]], ['rfloor', [8971]], ['rfr', [120111]], ['Rfr', [8476]], ['rHar', [10596]], ['rhard', [8641]], ['rharu', [8640]], ['rharul', [10604]], ['Rho', [929]], ['rho', [961]], ['rhov', [1009]], ['RightAngleBracket', [10217]], ['RightArrowBar', [8677]], ['rightarrow', [8594]], ['RightArrow', [8594]], ['Rightarrow', [8658]], ['RightArrowLeftArrow', [8644]], ['rightarrowtail', [8611]], ['RightCeiling', [8969]], ['RightDoubleBracket', [10215]], ['RightDownTeeVector', [10589]], ['RightDownVectorBar', [10581]], ['RightDownVector', [8642]], ['RightFloor', [8971]], ['rightharpoondown', [8641]], ['rightharpoonup', [8640]], ['rightleftarrows', [8644]], ['rightleftharpoons', [8652]], ['rightrightarrows', [8649]], ['rightsquigarrow', [8605]], ['RightTeeArrow', [8614]], ['RightTee', [8866]], ['RightTeeVector', [10587]], ['rightthreetimes', [8908]], ['RightTriangleBar', [10704]], ['RightTriangle', [8883]], ['RightTriangleEqual', [8885]], ['RightUpDownVector', [10575]], ['RightUpTeeVector', [10588]], ['RightUpVectorBar', [10580]], ['RightUpVector', [8638]], ['RightVectorBar', [10579]], ['RightVector', [8640]], ['ring', [730]], ['risingdotseq', [8787]], ['rlarr', [8644]], ['rlhar', [8652]], ['rlm', [8207]], ['rmoustache', [9137]], ['rmoust', [9137]], ['rnmid', [10990]], ['roang', [10221]], ['roarr', [8702]], ['robrk', [10215]], ['ropar', [10630]], ['ropf', [120163]], ['Ropf', [8477]], ['roplus', [10798]], ['rotimes', [10805]], ['RoundImplies', [10608]], ['rpar', [41]], ['rpargt', [10644]], ['rppolint', [10770]], ['rrarr', [8649]], ['Rrightarrow', [8667]], ['rsaquo', [8250]], ['rscr', [120007]], ['Rscr', [8475]], ['rsh', [8625]], ['Rsh', [8625]], ['rsqb', [93]], ['rsquo', [8217]], ['rsquor', [8217]], ['rthree', [8908]], ['rtimes', [8906]], ['rtri', [9657]], ['rtrie', [8885]], ['rtrif', [9656]], ['rtriltri', [10702]], ['RuleDelayed', [10740]], ['ruluhar', [10600]], ['rx', [8478]], ['Sacute', [346]], ['sacute', [347]], ['sbquo', [8218]], ['scap', [10936]], ['Scaron', [352]], ['scaron', [353]], ['Sc', [10940]], ['sc', [8827]], ['sccue', [8829]], ['sce', [10928]], ['scE', [10932]], ['Scedil', [350]], ['scedil', [351]], ['Scirc', [348]], ['scirc', [349]], ['scnap', [10938]], ['scnE', [10934]], ['scnsim', [8937]], ['scpolint', [10771]], ['scsim', [8831]], ['Scy', [1057]], ['scy', [1089]], ['sdotb', [8865]], ['sdot', [8901]], ['sdote', [10854]], ['searhk', [10533]], ['searr', [8600]], ['seArr', [8664]], ['searrow', [8600]], ['sect', [167]], ['semi', [59]], ['seswar', [10537]], ['setminus', [8726]], ['setmn', [8726]], ['sext', [10038]], ['Sfr', [120086]], ['sfr', [120112]], ['sfrown', [8994]], ['sharp', [9839]], ['SHCHcy', [1065]], ['shchcy', [1097]], ['SHcy', [1064]], ['shcy', [1096]], ['ShortDownArrow', [8595]], ['ShortLeftArrow', [8592]], ['shortmid', [8739]], ['shortparallel', [8741]], ['ShortRightArrow', [8594]], ['ShortUpArrow', [8593]], ['shy', [173]], ['Sigma', [931]], ['sigma', [963]], ['sigmaf', [962]], ['sigmav', [962]], ['sim', [8764]], ['simdot', [10858]], ['sime', [8771]], ['simeq', [8771]], ['simg', [10910]], ['simgE', [10912]], ['siml', [10909]], ['simlE', [10911]], ['simne', [8774]], ['simplus', [10788]], ['simrarr', [10610]], ['slarr', [8592]], ['SmallCircle', [8728]], ['smallsetminus', [8726]], ['smashp', [10803]], ['smeparsl', [10724]], ['smid', [8739]], ['smile', [8995]], ['smt', [10922]], ['smte', [10924]], ['smtes', [10924, 65024]], ['SOFTcy', [1068]], ['softcy', [1100]], ['solbar', [9023]], ['solb', [10692]], ['sol', [47]], ['Sopf', [120138]], ['sopf', [120164]], ['spades', [9824]], ['spadesuit', [9824]], ['spar', [8741]], ['sqcap', [8851]], ['sqcaps', [8851, 65024]], ['sqcup', [8852]], ['sqcups', [8852, 65024]], ['Sqrt', [8730]], ['sqsub', [8847]], ['sqsube', [8849]], ['sqsubset', [8847]], ['sqsubseteq', [8849]], ['sqsup', [8848]], ['sqsupe', [8850]], ['sqsupset', [8848]], ['sqsupseteq', [8850]], ['square', [9633]], ['Square', [9633]], ['SquareIntersection', [8851]], ['SquareSubset', [8847]], ['SquareSubsetEqual', [8849]], ['SquareSuperset', [8848]], ['SquareSupersetEqual', [8850]], ['SquareUnion', [8852]], ['squarf', [9642]], ['squ', [9633]], ['squf', [9642]], ['srarr', [8594]], ['Sscr', [119982]], ['sscr', [120008]], ['ssetmn', [8726]], ['ssmile', [8995]], ['sstarf', [8902]], ['Star', [8902]], ['star', [9734]], ['starf', [9733]], ['straightepsilon', [1013]], ['straightphi', [981]], ['strns', [175]], ['sub', [8834]], ['Sub', [8912]], ['subdot', [10941]], ['subE', [10949]], ['sube', [8838]], ['subedot', [10947]], ['submult', [10945]], ['subnE', [10955]], ['subne', [8842]], ['subplus', [10943]], ['subrarr', [10617]], ['subset', [8834]], ['Subset', [8912]], ['subseteq', [8838]], ['subseteqq', [10949]], ['SubsetEqual', [8838]], ['subsetneq', [8842]], ['subsetneqq', [10955]], ['subsim', [10951]], ['subsub', [10965]], ['subsup', [10963]], ['succapprox', [10936]], ['succ', [8827]], ['succcurlyeq', [8829]], ['Succeeds', [8827]], ['SucceedsEqual', [10928]], ['SucceedsSlantEqual', [8829]], ['SucceedsTilde', [8831]], ['succeq', [10928]], ['succnapprox', [10938]], ['succneqq', [10934]], ['succnsim', [8937]], ['succsim', [8831]], ['SuchThat', [8715]], ['sum', [8721]], ['Sum', [8721]], ['sung', [9834]], ['sup1', [185]], ['sup2', [178]], ['sup3', [179]], ['sup', [8835]], ['Sup', [8913]], ['supdot', [10942]], ['supdsub', [10968]], ['supE', [10950]], ['supe', [8839]], ['supedot', [10948]], ['Superset', [8835]], ['SupersetEqual', [8839]], ['suphsol', [10185]], ['suphsub', [10967]], ['suplarr', [10619]], ['supmult', [10946]], ['supnE', [10956]], ['supne', [8843]], ['supplus', [10944]], ['supset', [8835]], ['Supset', [8913]], ['supseteq', [8839]], ['supseteqq', [10950]], ['supsetneq', [8843]], ['supsetneqq', [10956]], ['supsim', [10952]], ['supsub', [10964]], ['supsup', [10966]], ['swarhk', [10534]], ['swarr', [8601]], ['swArr', [8665]], ['swarrow', [8601]], ['swnwar', [10538]], ['szlig', [223]], ['Tab', [9]], ['target', [8982]], ['Tau', [932]], ['tau', [964]], ['tbrk', [9140]], ['Tcaron', [356]], ['tcaron', [357]], ['Tcedil', [354]], ['tcedil', [355]], ['Tcy', [1058]], ['tcy', [1090]], ['tdot', [8411]], ['telrec', [8981]], ['Tfr', [120087]], ['tfr', [120113]], ['there4', [8756]], ['therefore', [8756]], ['Therefore', [8756]], ['Theta', [920]], ['theta', [952]], ['thetasym', [977]], ['thetav', [977]], ['thickapprox', [8776]], ['thicksim', [8764]], ['ThickSpace', [8287, 8202]], ['ThinSpace', [8201]], ['thinsp', [8201]], ['thkap', [8776]], ['thksim', [8764]], ['THORN', [222]], ['thorn', [254]], ['tilde', [732]], ['Tilde', [8764]], ['TildeEqual', [8771]], ['TildeFullEqual', [8773]], ['TildeTilde', [8776]], ['timesbar', [10801]], ['timesb', [8864]], ['times', [215]], ['timesd', [10800]], ['tint', [8749]], ['toea', [10536]], ['topbot', [9014]], ['topcir', [10993]], ['top', [8868]], ['Topf', [120139]], ['topf', [120165]], ['topfork', [10970]], ['tosa', [10537]], ['tprime', [8244]], ['trade', [8482]], ['TRADE', [8482]], ['triangle', [9653]], ['triangledown', [9663]], ['triangleleft', [9667]], ['trianglelefteq', [8884]], ['triangleq', [8796]], ['triangleright', [9657]], ['trianglerighteq', [8885]], ['tridot', [9708]], ['trie', [8796]], ['triminus', [10810]], ['TripleDot', [8411]], ['triplus', [10809]], ['trisb', [10701]], ['tritime', [10811]], ['trpezium', [9186]], ['Tscr', [119983]], ['tscr', [120009]], ['TScy', [1062]], ['tscy', [1094]], ['TSHcy', [1035]], ['tshcy', [1115]], ['Tstrok', [358]], ['tstrok', [359]], ['twixt', [8812]], ['twoheadleftarrow', [8606]], ['twoheadrightarrow', [8608]], ['Uacute', [218]], ['uacute', [250]], ['uarr', [8593]], ['Uarr', [8607]], ['uArr', [8657]], ['Uarrocir', [10569]], ['Ubrcy', [1038]], ['ubrcy', [1118]], ['Ubreve', [364]], ['ubreve', [365]], ['Ucirc', [219]], ['ucirc', [251]], ['Ucy', [1059]], ['ucy', [1091]], ['udarr', [8645]], ['Udblac', [368]], ['udblac', [369]], ['udhar', [10606]], ['ufisht', [10622]], ['Ufr', [120088]], ['ufr', [120114]], ['Ugrave', [217]], ['ugrave', [249]], ['uHar', [10595]], ['uharl', [8639]], ['uharr', [8638]], ['uhblk', [9600]], ['ulcorn', [8988]], ['ulcorner', [8988]], ['ulcrop', [8975]], ['ultri', [9720]], ['Umacr', [362]], ['umacr', [363]], ['uml', [168]], ['UnderBar', [95]], ['UnderBrace', [9183]], ['UnderBracket', [9141]], ['UnderParenthesis', [9181]], ['Union', [8899]], ['UnionPlus', [8846]], ['Uogon', [370]], ['uogon', [371]], ['Uopf', [120140]], ['uopf', [120166]], ['UpArrowBar', [10514]], ['uparrow', [8593]], ['UpArrow', [8593]], ['Uparrow', [8657]], ['UpArrowDownArrow', [8645]], ['updownarrow', [8597]], ['UpDownArrow', [8597]], ['Updownarrow', [8661]], ['UpEquilibrium', [10606]], ['upharpoonleft', [8639]], ['upharpoonright', [8638]], ['uplus', [8846]], ['UpperLeftArrow', [8598]], ['UpperRightArrow', [8599]], ['upsi', [965]], ['Upsi', [978]], ['upsih', [978]], ['Upsilon', [933]], ['upsilon', [965]], ['UpTeeArrow', [8613]], ['UpTee', [8869]], ['upuparrows', [8648]], ['urcorn', [8989]], ['urcorner', [8989]], ['urcrop', [8974]], ['Uring', [366]], ['uring', [367]], ['urtri', [9721]], ['Uscr', [119984]], ['uscr', [120010]], ['utdot', [8944]], ['Utilde', [360]], ['utilde', [361]], ['utri', [9653]], ['utrif', [9652]], ['uuarr', [8648]], ['Uuml', [220]], ['uuml', [252]], ['uwangle', [10663]], ['vangrt', [10652]], ['varepsilon', [1013]], ['varkappa', [1008]], ['varnothing', [8709]], ['varphi', [981]], ['varpi', [982]], ['varpropto', [8733]], ['varr', [8597]], ['vArr', [8661]], ['varrho', [1009]], ['varsigma', [962]], ['varsubsetneq', [8842, 65024]], ['varsubsetneqq', [10955, 65024]], ['varsupsetneq', [8843, 65024]], ['varsupsetneqq', [10956, 65024]], ['vartheta', [977]], ['vartriangleleft', [8882]], ['vartriangleright', [8883]], ['vBar', [10984]], ['Vbar', [10987]], ['vBarv', [10985]], ['Vcy', [1042]], ['vcy', [1074]], ['vdash', [8866]], ['vDash', [8872]], ['Vdash', [8873]], ['VDash', [8875]], ['Vdashl', [10982]], ['veebar', [8891]], ['vee', [8744]], ['Vee', [8897]], ['veeeq', [8794]], ['vellip', [8942]], ['verbar', [124]], ['Verbar', [8214]], ['vert', [124]], ['Vert', [8214]], ['VerticalBar', [8739]], ['VerticalLine', [124]], ['VerticalSeparator', [10072]], ['VerticalTilde', [8768]], ['VeryThinSpace', [8202]], ['Vfr', [120089]], ['vfr', [120115]], ['vltri', [8882]], ['vnsub', [8834, 8402]], ['vnsup', [8835, 8402]], ['Vopf', [120141]], ['vopf', [120167]], ['vprop', [8733]], ['vrtri', [8883]], ['Vscr', [119985]], ['vscr', [120011]], ['vsubnE', [10955, 65024]], ['vsubne', [8842, 65024]], ['vsupnE', [10956, 65024]], ['vsupne', [8843, 65024]], ['Vvdash', [8874]], ['vzigzag', [10650]], ['Wcirc', [372]], ['wcirc', [373]], ['wedbar', [10847]], ['wedge', [8743]], ['Wedge', [8896]], ['wedgeq', [8793]], ['weierp', [8472]], ['Wfr', [120090]], ['wfr', [120116]], ['Wopf', [120142]], ['wopf', [120168]], ['wp', [8472]], ['wr', [8768]], ['wreath', [8768]], ['Wscr', [119986]], ['wscr', [120012]], ['xcap', [8898]], ['xcirc', [9711]], ['xcup', [8899]], ['xdtri', [9661]], ['Xfr', [120091]], ['xfr', [120117]], ['xharr', [10231]], ['xhArr', [10234]], ['Xi', [926]], ['xi', [958]], ['xlarr', [10229]], ['xlArr', [10232]], ['xmap', [10236]], ['xnis', [8955]], ['xodot', [10752]], ['Xopf', [120143]], ['xopf', [120169]], ['xoplus', [10753]], ['xotime', [10754]], ['xrarr', [10230]], ['xrArr', [10233]], ['Xscr', [119987]], ['xscr', [120013]], ['xsqcup', [10758]], ['xuplus', [10756]], ['xutri', [9651]], ['xvee', [8897]], ['xwedge', [8896]], ['Yacute', [221]], ['yacute', [253]], ['YAcy', [1071]], ['yacy', [1103]], ['Ycirc', [374]], ['ycirc', [375]], ['Ycy', [1067]], ['ycy', [1099]], ['yen', [165]], ['Yfr', [120092]], ['yfr', [120118]], ['YIcy', [1031]], ['yicy', [1111]], ['Yopf', [120144]], ['yopf', [120170]], ['Yscr', [119988]], ['yscr', [120014]], ['YUcy', [1070]], ['yucy', [1102]], ['yuml', [255]], ['Yuml', [376]], ['Zacute', [377]], ['zacute', [378]], ['Zcaron', [381]], ['zcaron', [382]], ['Zcy', [1047]], ['zcy', [1079]], ['Zdot', [379]], ['zdot', [380]], ['zeetrf', [8488]], ['ZeroWidthSpace', [8203]], ['Zeta', [918]], ['zeta', [950]], ['zfr', [120119]], ['Zfr', [8488]], ['ZHcy', [1046]], ['zhcy', [1078]], ['zigrarr', [8669]], ['zopf', [120171]], ['Zopf', [8484]], ['Zscr', [119989]], ['zscr', [120015]], ['zwj', [8205]], ['zwnj', [8204]]];

var alphaIndex = {};
var charIndex = {};

createIndexes(alphaIndex, charIndex);

/**
 * @constructor
 */
function Html5Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.decode = function(str) {
    if (str.length === 0) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1) === 'x' ?
                parseInt(entity.substr(2).toLowerCase(), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.decode = function(str) {
    return new Html5Entities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encode = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var charInfo = charIndex[str.charCodeAt(i)];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        result += str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encode = function(str) {
    return new Html5Entities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonUTF = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var charInfo = charIndex[c];
        if (charInfo) {
            var alpha = charInfo[str.charCodeAt(i + 1)];
            if (alpha) {
                i++;
            } else {
                alpha = charInfo[''];
            }
            if (alpha) {
                result += "&" + alpha + ";";
                i++;
                continue;
            }
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonUTF = function(str) {
    return new Html5Entities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
Html5Entities.prototype.encodeNonASCII = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 Html5Entities.encodeNonASCII = function(str) {
    return new Html5Entities().encodeNonASCII(str);
 };

/**
 * @param {Object} alphaIndex Passed by reference.
 * @param {Object} charIndex Passed by reference.
 */
function createIndexes(alphaIndex, charIndex) {
    var i = ENTITIES.length;
    var _results = [];
    while (i--) {
        var e = ENTITIES[i];
        var alpha = e[0];
        var chars = e[1];
        var chr = chars[0];
        var addChar = (chr < 32 || chr > 126) || chr === 62 || chr === 60 || chr === 38 || chr === 34 || chr === 39;
        var charInfo;
        if (addChar) {
            charInfo = charIndex[chr] = charIndex[chr] || {};
        }
        if (chars[1]) {
            var chr2 = chars[1];
            alphaIndex[alpha] = String.fromCharCode(chr) + String.fromCharCode(chr2);
            _results.push(addChar && (charInfo[chr2] = alpha));
        } else {
            alphaIndex[alpha] = String.fromCharCode(chr);
            _results.push(addChar && (charInfo[''] = alpha));
        }
    }
}

module.exports = Html5Entities;


/***/ }),
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ES = __webpack_require__(308);
var has = __webpack_require__(336);
var bind = __webpack_require__(114);
var isEnumerable = bind.call(Function.call, Object.prototype.propertyIsEnumerable);

module.exports = function entries(O) {
	var obj = ES.RequireObjectCoercible(O);
	var entrys = [];
	for (var key in obj) {
		if (has(obj, key) && isEnumerable(obj, key)) {
			entrys.push([key, obj[key]]);
		}
	}
	return entrys;
};


/***/ }),
/* 204 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var implementation = __webpack_require__(203);

module.exports = function getPolyfill() {
	return typeof Object.entries === 'function' ? Object.entries : implementation;
};


/***/ }),
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {

var cov_hyx7ef5j4 = function () {
  var path = "/data/zeit/next.js/lib/eval-script.js",
      hash = "8f84b4b13025d2935c5202d3b358dca890b131b6",
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/data/zeit/next.js/lib/eval-script.js",
    statementMap: {
      "0": {
        start: {
          line: 16,
          column: 2
        },
        end: {
          line: 16,
          column: 14
        }
      },
      "1": {
        start: {
          line: 17,
          column: 2
        },
        end: {
          line: 17,
          column: 23
        }
      }
    },
    fnMap: {
      "0": {
        name: "evalScript",
        decl: {
          start: {
            line: 13,
            column: 24
          },
          end: {
            line: 13,
            column: 34
          }
        },
        loc: {
          start: {
            line: 13,
            column: 44
          },
          end: {
            line: 18,
            column: 1
          }
        }
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var cov_hyx7ef5j4 = function () {
  var path = "/data/zeit/next.js/lib/eval-script.js",
      hash = "f4734a723e6a475ffc34d54f96ffef576fef9616",
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/data/zeit/next.js/lib/eval-script.js",
    statementMap: {
      "0": {
        start: {
          line: 14,
          column: 17
        },
        end: {
          line: 14,
          column: 32
        }
      },
      "1": {
        start: {
          line: 16,
          column: 2
        },
        end: {
          line: 16,
          column: 14
        }
      },
      "2": {
        start: {
          line: 17,
          column: 2
        },
        end: {
          line: 17,
          column: 23
        }
      }
    },
    fnMap: {
      "0": {
        name: "evalScript",
        decl: {
          start: {
            line: 13,
            column: 24
          },
          end: {
            line: 13,
            column: 34
          }
        },
        loc: {
          start: {
            line: 13,
            column: 44
          },
          end: {
            line: 18,
            column: 1
          }
        }
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0
    },
    f: {
      "0": 0
    },
    b: {},
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

exports.default = evalScript;
/**
 * IMPORTANT: This module is compiled *without* `use strict`
 * so that when we `eval` a dependency below, we don't enforce
 * `use strict` implicitly.
 *
 * Otherwise, modules like `d3` get `eval`d and forced into
 * `use strict` where they don't work (at least in current versions)
 *
 * To see the compilation details, look at `gulpfile.js` and the
 * usage of `babel-plugin-transform-remove-strict-mode`.
 */

function evalScript(script) {
  ++cov_hyx7ef5j4.f[0];
  ++cov_hyx7ef5j4.f[0];

  var module = (++cov_hyx7ef5j4.s[0], { exports: {} });

  ++cov_hyx7ef5j4.s[1];
  ++cov_hyx7ef5j4.s[0];
  eval(script); // eslint-disable-line no-eval
  ++cov_hyx7ef5j4.s[2];
  ++cov_hyx7ef5j4.s[1];
  return module.exports;
}

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/data/zeit/next.js/dist/lib/eval-script.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/data/zeit/next.js/dist/lib/eval-script.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 228 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var cov_175pcht5no = function () {
  var path = '/data/zeit/next.js/lib/head.js',
      hash = '7184020549f9b0aae62a8669d4b4f978ebc0e444',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/head.js',
    statementMap: {
      '0': {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 15
        }
      },
      '1': {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 15,
          column: 57
        }
      },
      '2': {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 31,
          column: 4
        }
      },
      '3': {
        start: {
          line: 20,
          column: 14
        },
        end: {
          line: 20,
          column: 30
        }
      },
      '4': {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 20
        }
      },
      '5': {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 22,
          column: 53
        }
      },
      '6': {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 31
        }
      },
      '7': {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 47
        }
      },
      '8': {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 35,
          column: 13
        }
      },
      '9': {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 41,
          column: 3
        }
      },
      '10': {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 45
        }
      },
      '11': {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 80,
          column: 3
        }
      },
      '12': {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      '13': {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 42
        }
      },
      '14': {
        start: {
          line: 58,
          column: 30
        },
        end: {
          line: 58,
          column: 42
        }
      },
      '15': {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 24
        }
      },
      '16': {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 13
        }
      },
      '17': {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      '18': {
        start: {
          line: 64,
          column: 10
        },
        end: {
          line: 64,
          column: 57
        }
      },
      '19': {
        start: {
          line: 64,
          column: 49
        },
        end: {
          line: 64,
          column: 57
        }
      },
      '20': {
        start: {
          line: 66,
          column: 10
        },
        end: {
          line: 75,
          column: 11
        }
      },
      '21': {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 53
        }
      },
      '22': {
        start: {
          line: 67,
          column: 41
        },
        end: {
          line: 67,
          column: 53
        }
      },
      '23': {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 35
        }
      },
      '24': {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 54
        }
      },
      '25': {
        start: {
          line: 72,
          column: 42
        },
        end: {
          line: 72,
          column: 54
        }
      },
      '26': {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 36
        }
      },
      '27': {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 49
        }
      },
      '28': {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 13
        }
      },
      '29': {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 79,
          column: 15
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 9,
            column: 2
          },
          end: {
            line: 9,
            column: 3
          }
        },
        loc: {
          start: {
            line: 9,
            column: 12
          },
          end: {
            line: 11,
            column: 3
          }
        }
      },
      '1': {
        name: 'defaultHead',
        decl: {
          start: {
            line: 14,
            column: 16
          },
          end: {
            line: 14,
            column: 27
          }
        },
        loc: {
          start: {
            line: 14,
            column: 31
          },
          end: {
            line: 16,
            column: 1
          }
        }
      },
      '2': {
        name: 'reduceComponents',
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 25
          }
        },
        loc: {
          start: {
            line: 18,
            column: 39
          },
          end: {
            line: 32,
            column: 1
          }
        }
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 20,
            column: 7
          },
          end: {
            line: 20,
            column: 8
          }
        },
        loc: {
          start: {
            line: 20,
            column: 14
          },
          end: {
            line: 20,
            column: 30
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 21,
            column: 10
          },
          end: {
            line: 21,
            column: 11
          }
        },
        loc: {
          start: {
            line: 21,
            column: 17
          },
          end: {
            line: 21,
            column: 20
          }
        }
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 22,
            column: 7
          },
          end: {
            line: 22,
            column: 8
          }
        },
        loc: {
          start: {
            line: 22,
            column: 21
          },
          end: {
            line: 22,
            column: 53
          }
        }
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 23,
            column: 10
          },
          end: {
            line: 23,
            column: 11
          }
        },
        loc: {
          start: {
            line: 23,
            column: 20
          },
          end: {
            line: 23,
            column: 31
          }
        }
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 28,
            column: 7
          },
          end: {
            line: 28,
            column: 8
          }
        },
        loc: {
          start: {
            line: 28,
            column: 14
          },
          end: {
            line: 31,
            column: 3
          }
        }
      },
      '8': {
        name: 'mapOnServer',
        decl: {
          start: {
            line: 34,
            column: 9
          },
          end: {
            line: 34,
            column: 20
          }
        },
        loc: {
          start: {
            line: 34,
            column: 28
          },
          end: {
            line: 36,
            column: 1
          }
        }
      },
      '9': {
        name: 'onStateChange',
        decl: {
          start: {
            line: 38,
            column: 9
          },
          end: {
            line: 38,
            column: 22
          }
        },
        loc: {
          start: {
            line: 38,
            column: 30
          },
          end: {
            line: 42,
            column: 1
          }
        }
      },
      '10': {
        name: 'unique',
        decl: {
          start: {
            line: 49,
            column: 9
          },
          end: {
            line: 49,
            column: 15
          }
        },
        loc: {
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 81,
            column: 1
          }
        }
      },
      '11': {
        name: '(anonymous_11)',
        decl: {
          start: {
            line: 54,
            column: 9
          },
          end: {
            line: 54,
            column: 10
          }
        },
        loc: {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 80,
            column: 3
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 29,
            column: 23
          },
          end: {
            line: 29,
            column: 59
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        }, {
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 39,
            column: 6
          },
          end: {
            line: 39,
            column: 46
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        type: 'switch',
        locations: [{
          start: {
            line: 56,
            column: 6
          },
          end: {
            line: 56,
            column: 19
          }
        }, {
          start: {
            line: 57,
            column: 6
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: 61,
            column: 6
          },
          end: {
            line: 77,
            column: 13
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 58,
            column: 42
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 58,
            column: 42
          }
        }, {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 58,
            column: 42
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 64,
            column: 10
          },
          end: {
            line: 64,
            column: 57
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 64,
            column: 10
          },
          end: {
            line: 64,
            column: 57
          }
        }, {
          start: {
            line: 64,
            column: 10
          },
          end: {
            line: 64,
            column: 57
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 66,
            column: 10
          },
          end: {
            line: 75,
            column: 11
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 66,
            column: 10
          },
          end: {
            line: 75,
            column: 11
          }
        }, {
          start: {
            line: 66,
            column: 10
          },
          end: {
            line: 75,
            column: 11
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 53
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 53
          }
        }, {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 53
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 71,
            column: 31
          },
          end: {
            line: 71,
            column: 68
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '9': {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 54
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 54
          }
        }, {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 54
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = __webpack_require__(93);

var _set2 = _interopRequireDefault(_set);

var _toConsumableArray2 = __webpack_require__(95);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _getPrototypeOf = __webpack_require__(25);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(19);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(20);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(27);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(26);

var _inherits3 = _interopRequireDefault(_inherits2);

var cov_175pcht5no = function () {
  var path = '/data/zeit/next.js/lib/head.js',
      hash = '6694ab7d12f3e7f045dc0373c6b74382d205f65e',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/head.js',
    statementMap: {
      '0': {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 15
        }
      },
      '1': {
        start: {
          line: 15,
          column: 2
        },
        end: {
          line: 15,
          column: 57
        }
      },
      '2': {
        start: {
          line: 19,
          column: 2
        },
        end: {
          line: 31,
          column: 4
        }
      },
      '3': {
        start: {
          line: 20,
          column: 14
        },
        end: {
          line: 20,
          column: 30
        }
      },
      '4': {
        start: {
          line: 21,
          column: 17
        },
        end: {
          line: 21,
          column: 20
        }
      },
      '5': {
        start: {
          line: 22,
          column: 21
        },
        end: {
          line: 22,
          column: 53
        }
      },
      '6': {
        start: {
          line: 23,
          column: 20
        },
        end: {
          line: 23,
          column: 31
        }
      },
      '7': {
        start: {
          line: 29,
          column: 22
        },
        end: {
          line: 29,
          column: 74
        }
      },
      '8': {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 30,
          column: 47
        }
      },
      '9': {
        start: {
          line: 35,
          column: 2
        },
        end: {
          line: 35,
          column: 13
        }
      },
      '10': {
        start: {
          line: 39,
          column: 2
        },
        end: {
          line: 41,
          column: 3
        }
      },
      '11': {
        start: {
          line: 40,
          column: 4
        },
        end: {
          line: 40,
          column: 45
        }
      },
      '12': {
        start: {
          line: 44,
          column: 18
        },
        end: {
          line: 44,
          column: 62
        }
      },
      '13': {
        start: {
          line: 50,
          column: 15
        },
        end: {
          line: 50,
          column: 24
        }
      },
      '14': {
        start: {
          line: 51,
          column: 20
        },
        end: {
          line: 51,
          column: 29
        }
      },
      '15': {
        start: {
          line: 52,
          column: 25
        },
        end: {
          line: 52,
          column: 27
        }
      },
      '16': {
        start: {
          line: 54,
          column: 2
        },
        end: {
          line: 80,
          column: 3
        }
      },
      '17': {
        start: {
          line: 55,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      '18': {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 42
        }
      },
      '19': {
        start: {
          line: 58,
          column: 30
        },
        end: {
          line: 58,
          column: 42
        }
      },
      '20': {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 24
        }
      },
      '21': {
        start: {
          line: 60,
          column: 8
        },
        end: {
          line: 60,
          column: 13
        }
      },
      '22': {
        start: {
          line: 62,
          column: 8
        },
        end: {
          line: 76,
          column: 9
        }
      },
      '23': {
        start: {
          line: 63,
          column: 27
        },
        end: {
          line: 63,
          column: 39
        }
      },
      '24': {
        start: {
          line: 64,
          column: 10
        },
        end: {
          line: 64,
          column: 57
        }
      },
      '25': {
        start: {
          line: 64,
          column: 49
        },
        end: {
          line: 64,
          column: 57
        }
      },
      '26': {
        start: {
          line: 66,
          column: 10
        },
        end: {
          line: 75,
          column: 11
        }
      },
      '27': {
        start: {
          line: 67,
          column: 12
        },
        end: {
          line: 67,
          column: 53
        }
      },
      '28': {
        start: {
          line: 67,
          column: 41
        },
        end: {
          line: 67,
          column: 53
        }
      },
      '29': {
        start: {
          line: 68,
          column: 12
        },
        end: {
          line: 68,
          column: 35
        }
      },
      '30': {
        start: {
          line: 70,
          column: 29
        },
        end: {
          line: 70,
          column: 46
        }
      },
      '31': {
        start: {
          line: 71,
          column: 31
        },
        end: {
          line: 71,
          column: 68
        }
      },
      '32': {
        start: {
          line: 72,
          column: 12
        },
        end: {
          line: 72,
          column: 54
        }
      },
      '33': {
        start: {
          line: 72,
          column: 42
        },
        end: {
          line: 72,
          column: 54
        }
      },
      '34': {
        start: {
          line: 73,
          column: 12
        },
        end: {
          line: 73,
          column: 36
        }
      },
      '35': {
        start: {
          line: 74,
          column: 12
        },
        end: {
          line: 74,
          column: 49
        }
      },
      '36': {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 13
        }
      },
      '37': {
        start: {
          line: 79,
          column: 4
        },
        end: {
          line: 79,
          column: 15
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 9,
            column: 2
          },
          end: {
            line: 9,
            column: 3
          }
        },
        loc: {
          start: {
            line: 9,
            column: 12
          },
          end: {
            line: 11,
            column: 3
          }
        }
      },
      '1': {
        name: 'defaultHead',
        decl: {
          start: {
            line: 14,
            column: 16
          },
          end: {
            line: 14,
            column: 27
          }
        },
        loc: {
          start: {
            line: 14,
            column: 31
          },
          end: {
            line: 16,
            column: 1
          }
        }
      },
      '2': {
        name: 'reduceComponents',
        decl: {
          start: {
            line: 18,
            column: 9
          },
          end: {
            line: 18,
            column: 25
          }
        },
        loc: {
          start: {
            line: 18,
            column: 39
          },
          end: {
            line: 32,
            column: 1
          }
        }
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 20,
            column: 7
          },
          end: {
            line: 20,
            column: 8
          }
        },
        loc: {
          start: {
            line: 20,
            column: 14
          },
          end: {
            line: 20,
            column: 30
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 21,
            column: 10
          },
          end: {
            line: 21,
            column: 11
          }
        },
        loc: {
          start: {
            line: 21,
            column: 17
          },
          end: {
            line: 21,
            column: 20
          }
        }
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 22,
            column: 7
          },
          end: {
            line: 22,
            column: 8
          }
        },
        loc: {
          start: {
            line: 22,
            column: 21
          },
          end: {
            line: 22,
            column: 53
          }
        }
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 23,
            column: 10
          },
          end: {
            line: 23,
            column: 11
          }
        },
        loc: {
          start: {
            line: 23,
            column: 20
          },
          end: {
            line: 23,
            column: 31
          }
        }
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 28,
            column: 7
          },
          end: {
            line: 28,
            column: 8
          }
        },
        loc: {
          start: {
            line: 28,
            column: 14
          },
          end: {
            line: 31,
            column: 3
          }
        }
      },
      '8': {
        name: 'mapOnServer',
        decl: {
          start: {
            line: 34,
            column: 9
          },
          end: {
            line: 34,
            column: 20
          }
        },
        loc: {
          start: {
            line: 34,
            column: 28
          },
          end: {
            line: 36,
            column: 1
          }
        }
      },
      '9': {
        name: 'onStateChange',
        decl: {
          start: {
            line: 38,
            column: 9
          },
          end: {
            line: 38,
            column: 22
          }
        },
        loc: {
          start: {
            line: 38,
            column: 30
          },
          end: {
            line: 42,
            column: 1
          }
        }
      },
      '10': {
        name: 'unique',
        decl: {
          start: {
            line: 49,
            column: 9
          },
          end: {
            line: 49,
            column: 15
          }
        },
        loc: {
          start: {
            line: 49,
            column: 19
          },
          end: {
            line: 81,
            column: 1
          }
        }
      },
      '11': {
        name: '(anonymous_11)',
        decl: {
          start: {
            line: 54,
            column: 9
          },
          end: {
            line: 54,
            column: 10
          }
        },
        loc: {
          start: {
            line: 54,
            column: 16
          },
          end: {
            line: 80,
            column: 3
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 29,
            column: 23
          },
          end: {
            line: 29,
            column: 59
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 29,
            column: 37
          },
          end: {
            line: 29,
            column: 54
          }
        }, {
          start: {
            line: 29,
            column: 57
          },
          end: {
            line: 29,
            column: 59
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        }, {
          start: {
            line: 39,
            column: 2
          },
          end: {
            line: 41,
            column: 3
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 39,
            column: 6
          },
          end: {
            line: 39,
            column: 46
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 39,
            column: 6
          },
          end: {
            line: 39,
            column: 18
          }
        }, {
          start: {
            line: 39,
            column: 22
          },
          end: {
            line: 39,
            column: 46
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        type: 'switch',
        locations: [{
          start: {
            line: 56,
            column: 6
          },
          end: {
            line: 56,
            column: 19
          }
        }, {
          start: {
            line: 57,
            column: 6
          },
          end: {
            line: 60,
            column: 13
          }
        }, {
          start: {
            line: 61,
            column: 6
          },
          end: {
            line: 77,
            column: 13
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 58,
            column: 42
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 58,
            column: 42
          }
        }, {
          start: {
            line: 58,
            column: 8
          },
          end: {
            line: 58,
            column: 42
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 64,
            column: 10
          },
          end: {
            line: 64,
            column: 57
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 64,
            column: 10
          },
          end: {
            line: 64,
            column: 57
          }
        }, {
          start: {
            line: 64,
            column: 10
          },
          end: {
            line: 64,
            column: 57
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 66,
            column: 10
          },
          end: {
            line: 75,
            column: 11
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 66,
            column: 10
          },
          end: {
            line: 75,
            column: 11
          }
        }, {
          start: {
            line: 66,
            column: 10
          },
          end: {
            line: 75,
            column: 11
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 53
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 53
          }
        }, {
          start: {
            line: 67,
            column: 12
          },
          end: {
            line: 67,
            column: 53
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 71,
            column: 31
          },
          end: {
            line: 71,
            column: 68
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 71,
            column: 31
          },
          end: {
            line: 71,
            column: 55
          }
        }, {
          start: {
            line: 71,
            column: 59
          },
          end: {
            line: 71,
            column: 68
          }
        }]
      },
      '9': {
        loc: {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 54
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 54
          }
        }, {
          start: {
            line: 72,
            column: 12
          },
          end: {
            line: 72,
            column: 54
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

exports.defaultHead = defaultHead;

var _react = __webpack_require__(8);

var _react2 = _interopRequireDefault(_react);

var _sideEffect = __webpack_require__(536);

var _sideEffect2 = _interopRequireDefault(_sideEffect);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Head = function (_React$Component) {
  (0, _inherits3.default)(Head, _React$Component);

  function Head() {
    (0, _classCallCheck3.default)(this, Head);
    return (0, _possibleConstructorReturn3.default)(this, (Head.__proto__ || (0, _getPrototypeOf2.default)(Head)).apply(this, arguments));
  }

  (0, _createClass3.default)(Head, [{
    key: 'render',
    value: function render() {
      ++cov_175pcht5no.f[0];
      ++cov_175pcht5no.f[0];
      ++cov_175pcht5no.s[0];
      ++cov_175pcht5no.s[0];

      return null;
    }
  }]);
  return Head;
}(_react2.default.Component);

Head.contextTypes = {
  headManager: _react2.default.PropTypes.object
};
function defaultHead() {
  ++cov_175pcht5no.f[1];
  ++cov_175pcht5no.f[1];
  ++cov_175pcht5no.s[1];
  ++cov_175pcht5no.s[1];

  return [_react2.default.createElement('meta', { charSet: 'utf-8', className: 'next-head' })];
}

function reduceComponents(components) {
  var _components$map$filte;

  ++cov_175pcht5no.f[2];
  ++cov_175pcht5no.f[2];
  ++cov_175pcht5no.s[2];
  ++cov_175pcht5no.s[2];

  return (_components$map$filte = components.map(function (c) {
    ++cov_175pcht5no.f[3];
    ++cov_175pcht5no.f[3];
    ++cov_175pcht5no.s[3];
    ++cov_175pcht5no.s[3];
    return c.props.children;
  }).filter(function (c) {
    ++cov_175pcht5no.f[4];
    ++cov_175pcht5no.f[4];
    ++cov_175pcht5no.s[4];
    ++cov_175pcht5no.s[4];
    return !!c;
  }).map(function (children) {
    ++cov_175pcht5no.f[5];
    ++cov_175pcht5no.f[5];
    ++cov_175pcht5no.s[5];
    ++cov_175pcht5no.s[5];
    return _react2.default.Children.toArray(children);
  }).reduce(function (a, b) {
    ++cov_175pcht5no.f[6];
    ++cov_175pcht5no.f[6];
    ++cov_175pcht5no.s[6];
    ++cov_175pcht5no.s[6];
    return a.concat(b);
  }, []).reverse()).concat.apply(_components$map$filte, (0, _toConsumableArray3.default)(defaultHead())).filter(unique()).reverse().map(function (c) {
    ++cov_175pcht5no.f[7];
    ++cov_175pcht5no.f[7];

    var className = (++cov_175pcht5no.s[7], (c.className ? (++cov_175pcht5no.b[0][0], (++cov_175pcht5no.b[0][0], c.className + ' ')) : (++cov_175pcht5no.b[0][1], (++cov_175pcht5no.b[0][1], ''))) + 'next-head');
    ++cov_175pcht5no.s[8];
    ++cov_175pcht5no.s[7];
    return _react2.default.cloneElement(c, { className: className });
  });
}

function mapOnServer(head) {
  ++cov_175pcht5no.f[8];
  ++cov_175pcht5no.f[8];
  ++cov_175pcht5no.s[9];
  ++cov_175pcht5no.s[8];

  return head;
}

function onStateChange(head) {
  ++cov_175pcht5no.f[9];
  ++cov_175pcht5no.f[9];
  ++cov_175pcht5no.s[10];
  ++cov_175pcht5no.s[9];

  if ((++cov_175pcht5no.b[2][0], (++cov_175pcht5no.b[2][0], this.context)) && (++cov_175pcht5no.b[2][1], (++cov_175pcht5no.b[2][1], this.context.headManager))) {
    ++cov_175pcht5no.b[1][0];
    ++cov_175pcht5no.b[1][0];
    ++cov_175pcht5no.s[11];
    ++cov_175pcht5no.s[10];

    this.context.headManager.updateHead(head);
  } else {
    ++cov_175pcht5no.b[1][1];
    ++cov_175pcht5no.b[1][1];
  }
}

var METATYPES = (++cov_175pcht5no.s[12], ['name', 'httpEquiv', 'charSet', 'itemProp']);

// returns a function for filtering head child elements
// which shouldn't be duplicated, like <title/>.

function unique() {
  ++cov_175pcht5no.f[10];
  ++cov_175pcht5no.f[10];

  var tags = (++cov_175pcht5no.s[13], new _set2.default());
  var metaTypes = (++cov_175pcht5no.s[14], new _set2.default());
  var metaCategories = (++cov_175pcht5no.s[15], {});

  ++cov_175pcht5no.s[16];
  ++cov_175pcht5no.s[11];
  return function (h) {
    ++cov_175pcht5no.f[11];
    ++cov_175pcht5no.f[11];
    ++cov_175pcht5no.s[17];
    ++cov_175pcht5no.s[12];

    switch (h.type) {
      case 'title':
        ++cov_175pcht5no.b[3][0];
        ++cov_175pcht5no.b[3][0];

      case 'base':
        ++cov_175pcht5no.b[3][1];
        ++cov_175pcht5no.b[3][1];
        ++cov_175pcht5no.s[18];
        ++cov_175pcht5no.s[13];

        if (tags.has(h.type)) {
            ++cov_175pcht5no.b[4][0];
            ++cov_175pcht5no.b[4][0];
            ++cov_175pcht5no.s[19];
            ++cov_175pcht5no.s[14];
            return false;
          } else {
          ++cov_175pcht5no.b[4][1];
          ++cov_175pcht5no.b[4][1];
        }++cov_175pcht5no.s[20];
        ++cov_175pcht5no.s[15];
        tags.add(h.type);
        ++cov_175pcht5no.s[21];
        ++cov_175pcht5no.s[16];
        break;
      case 'meta':
        ++cov_175pcht5no.b[3][2];
        ++cov_175pcht5no.b[3][2];
        ++cov_175pcht5no.s[22];
        ++cov_175pcht5no.s[17];

        for (var i = 0, len = METATYPES.length; i < len; i++) {
          var metatype = (++cov_175pcht5no.s[23], METATYPES[i]);
          ++cov_175pcht5no.s[24];
          ++cov_175pcht5no.s[18];
          if (!h.props.hasOwnProperty(metatype)) {
              ++cov_175pcht5no.b[5][0];
              ++cov_175pcht5no.b[5][0];
              ++cov_175pcht5no.s[25];
              ++cov_175pcht5no.s[19];
              continue;
            } else {
            ++cov_175pcht5no.b[5][1];
            ++cov_175pcht5no.b[5][1];
          }++cov_175pcht5no.s[26];
          ++cov_175pcht5no.s[20];
          if (metatype === 'charSet') {
            ++cov_175pcht5no.b[6][0];
            ++cov_175pcht5no.b[6][0];
            ++cov_175pcht5no.s[27];
            ++cov_175pcht5no.s[21];

            if (metaTypes.has(metatype)) {
                ++cov_175pcht5no.b[7][0];
                ++cov_175pcht5no.b[7][0];
                ++cov_175pcht5no.s[28];
                ++cov_175pcht5no.s[22];
                return false;
              } else {
              ++cov_175pcht5no.b[7][1];
              ++cov_175pcht5no.b[7][1];
            }++cov_175pcht5no.s[29];
            ++cov_175pcht5no.s[23];
            metaTypes.add(metatype);
          } else {
            ++cov_175pcht5no.b[6][1];
            ++cov_175pcht5no.b[6][1];

            var category = (++cov_175pcht5no.s[30], h.props[metatype]);
            var categories = (++cov_175pcht5no.s[31], (++cov_175pcht5no.b[8][0], (++cov_175pcht5no.b[8][0], metaCategories[metatype])) || (++cov_175pcht5no.b[8][1], (++cov_175pcht5no.b[8][1], new _set2.default())));
            ++cov_175pcht5no.s[32];
            ++cov_175pcht5no.s[24];
            if (categories.has(category)) {
                ++cov_175pcht5no.b[9][0];
                ++cov_175pcht5no.b[9][0];
                ++cov_175pcht5no.s[33];
                ++cov_175pcht5no.s[25];
                return false;
              } else {
              ++cov_175pcht5no.b[9][1];
              ++cov_175pcht5no.b[9][1];
            }++cov_175pcht5no.s[34];
            ++cov_175pcht5no.s[26];
            categories.add(category);
            ++cov_175pcht5no.s[35];
            ++cov_175pcht5no.s[27];
            metaCategories[metatype] = categories;
          }
        }
        ++cov_175pcht5no.s[36];
        ++cov_175pcht5no.s[28];
        break;
    }
    ++cov_175pcht5no.s[37];
    ++cov_175pcht5no.s[29];
    return true;
  };
}

exports.default = (0, _sideEffect2.default)(reduceComponents, onStateChange, mapOnServer)(Head);

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/data/zeit/next.js/dist/lib/head.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/data/zeit/next.js/dist/lib/head.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 229 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var cov_vs7b1dqdq = function () {
  var path = "/data/zeit/next.js/lib/shallow-equals.js",
      hash = "7797cabedbf3f009d172dfd0eec390ae2a930ebc",
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/data/zeit/next.js/lib/shallow-equals.js",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 2
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "2": {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "3": {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "4": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 35
        }
      },
      "5": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 35
        }
      },
      "6": {
        start: {
          line: 10,
          column: 2
        },
        end: {
          line: 10,
          column: 13
        }
      }
    },
    fnMap: {
      "0": {
        name: "shallowEquals",
        decl: {
          start: {
            line: 1,
            column: 24
          },
          end: {
            line: 1,
            column: 37
          }
        },
        loc: {
          start: {
            line: 1,
            column: 45
          },
          end: {
            line: 11,
            column: 1
          }
        }
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 35
          }
        }]
      },
      "1": {
        loc: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 35
          }
        }, {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 35
          }
        }]
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var cov_vs7b1dqdq = function () {
  var path = "/data/zeit/next.js/lib/shallow-equals.js",
      hash = "7797cabedbf3f009d172dfd0eec390ae2a930ebc",
      global = new Function('return this')(),
      gcv = "__coverage__",
      coverageData = {
    path: "/data/zeit/next.js/lib/shallow-equals.js",
    statementMap: {
      "0": {
        start: {
          line: 2,
          column: 2
        },
        end: {
          line: 4,
          column: 3
        }
      },
      "1": {
        start: {
          line: 3,
          column: 4
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "2": {
        start: {
          line: 3,
          column: 23
        },
        end: {
          line: 3,
          column: 35
        }
      },
      "3": {
        start: {
          line: 6,
          column: 2
        },
        end: {
          line: 8,
          column: 3
        }
      },
      "4": {
        start: {
          line: 7,
          column: 4
        },
        end: {
          line: 7,
          column: 35
        }
      },
      "5": {
        start: {
          line: 7,
          column: 23
        },
        end: {
          line: 7,
          column: 35
        }
      },
      "6": {
        start: {
          line: 10,
          column: 2
        },
        end: {
          line: 10,
          column: 13
        }
      }
    },
    fnMap: {
      "0": {
        name: "shallowEquals",
        decl: {
          start: {
            line: 1,
            column: 24
          },
          end: {
            line: 1,
            column: 37
          }
        },
        loc: {
          start: {
            line: 1,
            column: 45
          },
          end: {
            line: 11,
            column: 1
          }
        }
      }
    },
    branchMap: {
      "0": {
        loc: {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 35
          }
        }, {
          start: {
            line: 3,
            column: 4
          },
          end: {
            line: 3,
            column: 35
          }
        }]
      },
      "1": {
        loc: {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 35
          }
        },
        type: "if",
        locations: [{
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 35
          }
        }, {
          start: {
            line: 7,
            column: 4
          },
          end: {
            line: 7,
            column: 35
          }
        }]
      }
    },
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0
    },
    f: {
      "0": 0
    },
    b: {
      "0": [0, 0],
      "1": [0, 0]
    },
    _coverageSchema: "332fd63041d2c1bcb487cc26dd0d5f7d97098a6c"
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

exports.default = shallowEquals;
function shallowEquals(a, b) {
  ++cov_vs7b1dqdq.f[0];
  ++cov_vs7b1dqdq.f[0];
  ++cov_vs7b1dqdq.s[0];
  ++cov_vs7b1dqdq.s[0];

  for (var i in a) {
    ++cov_vs7b1dqdq.s[1];
    ++cov_vs7b1dqdq.s[1];

    if (b[i] !== a[i]) {
        ++cov_vs7b1dqdq.b[0][0];
        ++cov_vs7b1dqdq.b[0][0];
        ++cov_vs7b1dqdq.s[2];
        ++cov_vs7b1dqdq.s[2];
        return false;
      } else {
      ++cov_vs7b1dqdq.b[0][1];
      ++cov_vs7b1dqdq.b[0][1];
    }
  }

  ++cov_vs7b1dqdq.s[3];
  ++cov_vs7b1dqdq.s[3];
  for (var _i in b) {
    ++cov_vs7b1dqdq.s[4];
    ++cov_vs7b1dqdq.s[4];

    if (b[_i] !== a[_i]) {
        ++cov_vs7b1dqdq.b[1][0];
        ++cov_vs7b1dqdq.b[1][0];
        ++cov_vs7b1dqdq.s[5];
        ++cov_vs7b1dqdq.s[5];
        return false;
      } else {
      ++cov_vs7b1dqdq.b[1][1];
      ++cov_vs7b1dqdq.b[1][1];
    }
  }

  ++cov_vs7b1dqdq.s[6];
  ++cov_vs7b1dqdq.s[6];
  return true;
}

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/data/zeit/next.js/dist/lib/shallow-equals.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/data/zeit/next.js/dist/lib/shallow-equals.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 230 */,
/* 231 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



// The Symbol used to tag the ReactElement type. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;

/***/ }),
/* 232 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */

/**
 * ReactElementValidator provides a wrapper around a element factory
 * which validates the props passed to the element. This is intended to be
 * used only in DEV and could be replaced by a static type checker for languages
 * that support it.
 */



var ReactCurrentOwner = __webpack_require__(18);
var ReactComponentTreeHook = __webpack_require__(11);
var ReactElement = __webpack_require__(38);

var checkReactTypeSpec = __webpack_require__(551);

var canDefineProperty = __webpack_require__(143);
var getIteratorFn = __webpack_require__(144);
var warning = __webpack_require__(1);

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */
var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */
function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.
  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */
function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);
    // Entry iterators provide implicit keys.
    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */
function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {

  createElement: function (type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';
    // We warn in this case but don't throw. We expect the element creation to
    // succeed and there will likely be errors in render.
    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }
        info += getDeclarationErrorAddendum();
        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    // The result can be nullish if a mock or a custom function is used.
    // TODO: Drop this when these are no longer allowed as the type argument.
    if (element == null) {
      return element;
    }

    // Skip key warning if the type isn't valid since our key validation logic
    // doesn't expect a non-string/function type and can throw confusing errors.
    // We don't want exception behavior to differ between dev and prod.
    // (Rendering will throw with a helpful message and as soon as the type is
    // fixed, the key warnings will appear.)
    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function (type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);
    // Legacy hook TODO: Warn if this is accessed
    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function () {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function (element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 233 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;

/***/ }),
/* 234 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.flush = flush;

var _react = __webpack_require__(8);

var _render = __webpack_require__(561);

var _render2 = _interopRequireDefault(_render);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var update = typeof window === 'undefined' ? doRender : updateOnClient;
var components = [];
var updatePromise = void 0;

var _class = function (_Component) {
  _inherits(_class, _Component);

  function _class() {
    _classCallCheck(this, _class);

    return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
  }

  _createClass(_class, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      mount(this);
    }
  }, {
    key: 'componentWillUpdate',
    value: function componentWillUpdate() {
      update();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      unmount(this);
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }]);

  return _class;
}(_react.Component);

exports.default = _class;
function flush() {
  var ret = {};

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref2 = _step.value;
      var props = _ref2.props;

      ret[props.styleId] = props.css;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  components = [];

  return ret;
}

function mount(component) {
  components.push(component);
  update();
}

function unmount(component) {
  var i = components.indexOf(component);
  if (i < 0) {
    return;
  }

  components.splice(i, 1);
  update();
}

function updateOnClient() {
  // Debounce calls and only render once the latest promise resolves.
  // rAF causes FOUC in Safari, setTimeout causes FOUC in Chrome, Promise#then()
  // ensures micro task enqueuing of styles update before paint.
  var promise = updatePromise = Promise.resolve().then(function () {
    if (promise === updatePromise) {
      updatePromise = null;
      doRender();
    }
  });
}

function doRender() {
  (0, _render2.default)(components);
}

/***/ }),
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

module.exports = function () {
	return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
};


/***/ }),
/* 242 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(251), __esModule: true };

/***/ }),
/* 243 */,
/* 244 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(255), __esModule: true };

/***/ }),
/* 245 */,
/* 246 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(260), __esModule: true };

/***/ }),
/* 247 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(263), __esModule: true };

/***/ }),
/* 248 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(264), __esModule: true };

/***/ }),
/* 249 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(92);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function (obj, key, value) {
  if (key in obj) {
    (0, _defineProperty2.default)(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

/***/ }),
/* 250 */,
/* 251 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(42);
__webpack_require__(290);
module.exports = __webpack_require__(6).Array.from;

/***/ }),
/* 252 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(53);
__webpack_require__(42);
module.exports = __webpack_require__(288);

/***/ }),
/* 253 */,
/* 254 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(292);
module.exports = __webpack_require__(6).Object.assign;

/***/ }),
/* 255 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(293);
var $Object = __webpack_require__(6).Object;
module.exports = function create(P, D){
  return $Object.create(P, D);
};

/***/ }),
/* 256 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(294);
var $Object = __webpack_require__(6).Object;
module.exports = function defineProperty(it, key, desc){
  return $Object.defineProperty(it, key, desc);
};

/***/ }),
/* 257 */,
/* 258 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(295);
module.exports = __webpack_require__(6).Object.getPrototypeOf;

/***/ }),
/* 259 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(296);
module.exports = __webpack_require__(6).Object.keys;

/***/ }),
/* 260 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(297);
module.exports = __webpack_require__(6).Object.setPrototypeOf;

/***/ }),
/* 261 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(112);
__webpack_require__(42);
__webpack_require__(53);
__webpack_require__(298);
module.exports = __webpack_require__(6).Promise;

/***/ }),
/* 262 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(112);
__webpack_require__(42);
__webpack_require__(53);
__webpack_require__(299);
__webpack_require__(302);
module.exports = __webpack_require__(6).Set;

/***/ }),
/* 263 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(300);
__webpack_require__(112);
__webpack_require__(303);
__webpack_require__(304);
module.exports = __webpack_require__(6).Symbol;

/***/ }),
/* 264 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(42);
__webpack_require__(53);
module.exports = __webpack_require__(110).f('iterator');

/***/ }),
/* 265 */
/***/ (function(module, exports) {

module.exports = function(){ /* empty */ };

/***/ }),
/* 266 */
/***/ (function(module, exports, __webpack_require__) {

var forOf = __webpack_require__(70);

module.exports = function(iter, ITERATOR){
  var result = [];
  forOf(iter, false, result.push, result, ITERATOR);
  return result;
};


/***/ }),
/* 267 */
/***/ (function(module, exports, __webpack_require__) {

// false -> Array#indexOf
// true  -> Array#includes
var toIObject = __webpack_require__(31)
  , toLength  = __webpack_require__(73)
  , toIndex   = __webpack_require__(287);
module.exports = function(IS_INCLUDES){
  return function($this, el, fromIndex){
    var O      = toIObject($this)
      , length = toLength(O.length)
      , index  = toIndex(fromIndex, length)
      , value;
    // Array#includes uses SameValueZero equality algorithm
    if(IS_INCLUDES && el != el)while(length > index){
      value = O[index++];
      if(value != value)return true;
    // Array#toIndex ignores holes, Array#includes - not
    } else for(;length > index; index++)if(IS_INCLUDES || index in O){
      if(O[index] === el)return IS_INCLUDES || index || 0;
    } return !IS_INCLUDES && -1;
  };
};

/***/ }),
/* 268 */
/***/ (function(module, exports, __webpack_require__) {

// 0 -> Array#forEach
// 1 -> Array#map
// 2 -> Array#filter
// 3 -> Array#some
// 4 -> Array#every
// 5 -> Array#find
// 6 -> Array#findIndex
var ctx      = __webpack_require__(28)
  , IObject  = __webpack_require__(100)
  , toObject = __webpack_require__(41)
  , toLength = __webpack_require__(73)
  , asc      = __webpack_require__(270);
module.exports = function(TYPE, $create){
  var IS_MAP        = TYPE == 1
    , IS_FILTER     = TYPE == 2
    , IS_SOME       = TYPE == 3
    , IS_EVERY      = TYPE == 4
    , IS_FIND_INDEX = TYPE == 6
    , NO_HOLES      = TYPE == 5 || IS_FIND_INDEX
    , create        = $create || asc;
  return function($this, callbackfn, that){
    var O      = toObject($this)
      , self   = IObject(O)
      , f      = ctx(callbackfn, that, 3)
      , length = toLength(self.length)
      , index  = 0
      , result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined
      , val, res;
    for(;length > index; index++)if(NO_HOLES || index in self){
      val = self[index];
      res = f(val, index, O);
      if(TYPE){
        if(IS_MAP)result[index] = res;            // map
        else if(res)switch(TYPE){
          case 3: return true;                    // some
          case 5: return val;                     // find
          case 6: return index;                   // findIndex
          case 2: result.push(val);               // filter
        } else if(IS_EVERY)return false;          // every
      }
    }
    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;
  };
};

/***/ }),
/* 269 */
/***/ (function(module, exports, __webpack_require__) {

var isObject = __webpack_require__(30)
  , isArray  = __webpack_require__(152)
  , SPECIES  = __webpack_require__(9)('species');

module.exports = function(original){
  var C;
  if(isArray(original)){
    C = original.constructor;
    // cross-realm fallback
    if(typeof C == 'function' && (C === Array || isArray(C.prototype)))C = undefined;
    if(isObject(C)){
      C = C[SPECIES];
      if(C === null)C = undefined;
    }
  } return C === undefined ? Array : C;
};

/***/ }),
/* 270 */
/***/ (function(module, exports, __webpack_require__) {

// 9.4.2.3 ArraySpeciesCreate(originalArray, length)
var speciesConstructor = __webpack_require__(269);

module.exports = function(original, length){
  return new (speciesConstructor(original))(length);
};

/***/ }),
/* 271 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var dP          = __webpack_require__(14).f
  , create      = __webpack_require__(72)
  , redefineAll = __webpack_require__(104)
  , ctx         = __webpack_require__(28)
  , anInstance  = __webpack_require__(97)
  , defined     = __webpack_require__(69)
  , forOf       = __webpack_require__(70)
  , $iterDefine = __webpack_require__(101)
  , step        = __webpack_require__(155)
  , setSpecies  = __webpack_require__(162)
  , DESCRIPTORS = __webpack_require__(16)
  , fastKey     = __webpack_require__(102).fastKey
  , SIZE        = DESCRIPTORS ? '_s' : 'size';

var getEntry = function(that, key){
  // fast case
  var index = fastKey(key), entry;
  if(index !== 'F')return that._i[index];
  // frozen object case
  for(entry = that._f; entry; entry = entry.n){
    if(entry.k == key)return entry;
  }
};

module.exports = {
  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
    var C = wrapper(function(that, iterable){
      anInstance(that, C, NAME, '_i');
      that._i = create(null); // index
      that._f = undefined;    // first entry
      that._l = undefined;    // last entry
      that[SIZE] = 0;         // size
      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
    });
    redefineAll(C.prototype, {
      // 23.1.3.1 Map.prototype.clear()
      // 23.2.3.2 Set.prototype.clear()
      clear: function clear(){
        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
          entry.r = true;
          if(entry.p)entry.p = entry.p.n = undefined;
          delete data[entry.i];
        }
        that._f = that._l = undefined;
        that[SIZE] = 0;
      },
      // 23.1.3.3 Map.prototype.delete(key)
      // 23.2.3.4 Set.prototype.delete(value)
      'delete': function(key){
        var that  = this
          , entry = getEntry(that, key);
        if(entry){
          var next = entry.n
            , prev = entry.p;
          delete that._i[entry.i];
          entry.r = true;
          if(prev)prev.n = next;
          if(next)next.p = prev;
          if(that._f == entry)that._f = next;
          if(that._l == entry)that._l = prev;
          that[SIZE]--;
        } return !!entry;
      },
      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
      forEach: function forEach(callbackfn /*, that = undefined */){
        anInstance(this, C, 'forEach');
        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
          , entry;
        while(entry = entry ? entry.n : this._f){
          f(entry.v, entry.k, this);
          // revert to the last existing entry
          while(entry && entry.r)entry = entry.p;
        }
      },
      // 23.1.3.7 Map.prototype.has(key)
      // 23.2.3.7 Set.prototype.has(value)
      has: function has(key){
        return !!getEntry(this, key);
      }
    });
    if(DESCRIPTORS)dP(C.prototype, 'size', {
      get: function(){
        return defined(this[SIZE]);
      }
    });
    return C;
  },
  def: function(that, key, value){
    var entry = getEntry(that, key)
      , prev, index;
    // change existing entry
    if(entry){
      entry.v = value;
    // create new entry
    } else {
      that._l = entry = {
        i: index = fastKey(key, true), // <- index
        k: key,                        // <- key
        v: value,                      // <- value
        p: prev = that._l,             // <- previous entry
        n: undefined,                  // <- next entry
        r: false                       // <- removed
      };
      if(!that._f)that._f = entry;
      if(prev)prev.n = entry;
      that[SIZE]++;
      // add to index
      if(index !== 'F')that._i[index] = entry;
    } return that;
  },
  getEntry: getEntry,
  setStrong: function(C, NAME, IS_MAP){
    // add .keys, .values, .entries, [@@iterator]
    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
    $iterDefine(C, NAME, function(iterated, kind){
      this._t = iterated;  // target
      this._k = kind;      // kind
      this._l = undefined; // previous
    }, function(){
      var that  = this
        , kind  = that._k
        , entry = that._l;
      // revert to the last existing entry
      while(entry && entry.r)entry = entry.p;
      // get next entry
      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
        // or finish the iteration
        that._t = undefined;
        return step(1);
      }
      // return step by kind
      if(kind == 'keys'  )return step(0, entry.k);
      if(kind == 'values')return step(0, entry.v);
      return step(0, [entry.k, entry.v]);
    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

    // add [@@species], 23.1.2.2, 23.2.2.2
    setSpecies(NAME);
  }
};

/***/ }),
/* 272 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var classof = __webpack_require__(68)
  , from    = __webpack_require__(266);
module.exports = function(NAME){
  return function toJSON(){
    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
    return from(this);
  };
};

/***/ }),
/* 273 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var global         = __webpack_require__(10)
  , $export        = __webpack_require__(12)
  , meta           = __webpack_require__(102)
  , fails          = __webpack_require__(33)
  , hide           = __webpack_require__(29)
  , redefineAll    = __webpack_require__(104)
  , forOf          = __webpack_require__(70)
  , anInstance     = __webpack_require__(97)
  , isObject       = __webpack_require__(30)
  , setToStringTag = __webpack_require__(52)
  , dP             = __webpack_require__(14).f
  , each           = __webpack_require__(268)(0)
  , DESCRIPTORS    = __webpack_require__(16);

module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
  var Base  = global[NAME]
    , C     = Base
    , ADDER = IS_MAP ? 'set' : 'add'
    , proto = C && C.prototype
    , O     = {};
  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
    new C().entries().next();
  }))){
    // create collection constructor
    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
    redefineAll(C.prototype, methods);
    meta.NEED = true;
  } else {
    C = wrapper(function(target, iterable){
      anInstance(target, C, NAME, '_c');
      target._c = new Base;
      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
    });
    each('add,clear,delete,forEach,get,has,set,keys,values,entries,toJSON'.split(','),function(KEY){
      var IS_ADDER = KEY == 'add' || KEY == 'set';
      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
        anInstance(this, C, KEY);
        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
        var result = this._c[KEY](a === 0 ? 0 : a, b);
        return IS_ADDER ? this : result;
      });
    });
    if('size' in proto)dP(C.prototype, 'size', {
      get: function(){
        return this._c.size;
      }
    });
  }

  setToStringTag(C, NAME);

  O[NAME] = C;
  $export($export.G + $export.W + $export.F, O);

  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

  return C;
};

/***/ }),
/* 274 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var $defineProperty = __webpack_require__(14)
  , createDesc      = __webpack_require__(51);

module.exports = function(object, index, value){
  if(index in object)$defineProperty.f(object, index, createDesc(0, value));
  else object[index] = value;
};

/***/ }),
/* 275 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(35)
  , gOPS    = __webpack_require__(103)
  , pIE     = __webpack_require__(50);
module.exports = function(it){
  var result     = getKeys(it)
    , getSymbols = gOPS.f;
  if(getSymbols){
    var symbols = getSymbols(it)
      , isEnum  = pIE.f
      , i       = 0
      , key;
    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))result.push(key);
  } return result;
};

/***/ }),
/* 276 */
/***/ (function(module, exports) {

// fast apply, http://jsperf.lnkit.com/fast-apply/5
module.exports = function(fn, args, that){
  var un = that === undefined;
  switch(args.length){
    case 0: return un ? fn()
                      : fn.call(that);
    case 1: return un ? fn(args[0])
                      : fn.call(that, args[0]);
    case 2: return un ? fn(args[0], args[1])
                      : fn.call(that, args[0], args[1]);
    case 3: return un ? fn(args[0], args[1], args[2])
                      : fn.call(that, args[0], args[1], args[2]);
    case 4: return un ? fn(args[0], args[1], args[2], args[3])
                      : fn.call(that, args[0], args[1], args[2], args[3]);
  } return              fn.apply(that, args);
};

/***/ }),
/* 277 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var create         = __webpack_require__(72)
  , descriptor     = __webpack_require__(51)
  , setToStringTag = __webpack_require__(52)
  , IteratorPrototype = {};

// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
__webpack_require__(29)(IteratorPrototype, __webpack_require__(9)('iterator'), function(){ return this; });

module.exports = function(Constructor, NAME, next){
  Constructor.prototype = create(IteratorPrototype, {next: descriptor(1, next)});
  setToStringTag(Constructor, NAME + ' Iterator');
};

/***/ }),
/* 278 */
/***/ (function(module, exports, __webpack_require__) {

var getKeys   = __webpack_require__(35)
  , toIObject = __webpack_require__(31);
module.exports = function(object, el){
  var O      = toIObject(object)
    , keys   = getKeys(O)
    , length = keys.length
    , index  = 0
    , key;
  while(length > index)if(O[key = keys[index++]] === el)return key;
};

/***/ }),
/* 279 */
/***/ (function(module, exports, __webpack_require__) {

var global    = __webpack_require__(10)
  , macrotask = __webpack_require__(163).set
  , Observer  = global.MutationObserver || global.WebKitMutationObserver
  , process   = global.process
  , Promise   = global.Promise
  , isNode    = __webpack_require__(49)(process) == 'process';

module.exports = function(){
  var head, last, notify;

  var flush = function(){
    var parent, fn;
    if(isNode && (parent = process.domain))parent.exit();
    while(head){
      fn   = head.fn;
      head = head.next;
      try {
        fn();
      } catch(e){
        if(head)notify();
        else last = undefined;
        throw e;
      }
    } last = undefined;
    if(parent)parent.enter();
  };

  // Node.js
  if(isNode){
    notify = function(){
      process.nextTick(flush);
    };
  // browsers with MutationObserver
  } else if(Observer){
    var toggle = true
      , node   = document.createTextNode('');
    new Observer(flush).observe(node, {characterData: true}); // eslint-disable-line no-new
    notify = function(){
      node.data = toggle = !toggle;
    };
  // environments with maybe non-completely correct, but existent Promise
  } else if(Promise && Promise.resolve){
    var promise = Promise.resolve();
    notify = function(){
      promise.then(flush);
    };
  // for other environments - macrotask based on:
  // - setImmediate
  // - MessageChannel
  // - window.postMessag
  // - onreadystatechange
  // - setTimeout
  } else {
    notify = function(){
      // strange IE + webpack dev server bug - use .call(global)
      macrotask.call(global, flush);
    };
  }

  return function(fn){
    var task = {fn: fn, next: undefined};
    if(last)last.next = task;
    if(!head){
      head = task;
      notify();
    } last = task;
  };
};

/***/ }),
/* 280 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// 19.1.2.1 Object.assign(target, source, ...)
var getKeys  = __webpack_require__(35)
  , gOPS     = __webpack_require__(103)
  , pIE      = __webpack_require__(50)
  , toObject = __webpack_require__(41)
  , IObject  = __webpack_require__(100)
  , $assign  = Object.assign;

// should work with symbols and should have deterministic property order (V8 bug)
module.exports = !$assign || __webpack_require__(33)(function(){
  var A = {}
    , B = {}
    , S = Symbol()
    , K = 'abcdefghijklmnopqrst';
  A[S] = 7;
  K.split('').forEach(function(k){ B[k] = k; });
  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
  var T     = toObject(target)
    , aLen  = arguments.length
    , index = 1
    , getSymbols = gOPS.f
    , isEnum     = pIE.f;
  while(aLen > index){
    var S      = IObject(arguments[index++])
      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
      , length = keys.length
      , j      = 0
      , key;
    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
  } return T;
} : $assign;

/***/ }),
/* 281 */
/***/ (function(module, exports, __webpack_require__) {

var dP       = __webpack_require__(14)
  , anObject = __webpack_require__(21)
  , getKeys  = __webpack_require__(35);

module.exports = __webpack_require__(16) ? Object.defineProperties : function defineProperties(O, Properties){
  anObject(O);
  var keys   = getKeys(Properties)
    , length = keys.length
    , i = 0
    , P;
  while(length > i)dP.f(O, P = keys[i++], Properties[P]);
  return O;
};

/***/ }),
/* 282 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(31)
  , gOPN      = __webpack_require__(157).f
  , toString  = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function(it){
  try {
    return gOPN(it);
  } catch(e){
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it){
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 283 */,
/* 284 */
/***/ (function(module, exports, __webpack_require__) {

// Works with __proto__ only. Old v8 can't work with null proto objects.
/* eslint-disable no-proto */
var isObject = __webpack_require__(30)
  , anObject = __webpack_require__(21);
var check = function(O, proto){
  anObject(O);
  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
};
module.exports = {
  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
    function(test, buggy, set){
      try {
        set = __webpack_require__(28)(Function.call, __webpack_require__(156).f(Object.prototype, '__proto__').set, 2);
        set(test, []);
        buggy = !(test instanceof Array);
      } catch(e){ buggy = true; }
      return function setPrototypeOf(O, proto){
        check(O, proto);
        if(buggy)O.__proto__ = proto;
        else set(O, proto);
        return O;
      };
    }({}, false) : undefined),
  check: check
};

/***/ }),
/* 285 */
/***/ (function(module, exports, __webpack_require__) {

// 7.3.20 SpeciesConstructor(O, defaultConstructor)
var anObject  = __webpack_require__(21)
  , aFunction = __webpack_require__(96)
  , SPECIES   = __webpack_require__(9)('species');
module.exports = function(O, D){
  var C = anObject(O).constructor, S;
  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);
};

/***/ }),
/* 286 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(107)
  , defined   = __webpack_require__(69);
// true  -> String#at
// false -> String#codePointAt
module.exports = function(TO_STRING){
  return function(that, pos){
    var s = String(defined(that))
      , i = toInteger(pos)
      , l = s.length
      , a, b;
    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
    a = s.charCodeAt(i);
    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
      ? TO_STRING ? s.charAt(i) : a
      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
  };
};

/***/ }),
/* 287 */
/***/ (function(module, exports, __webpack_require__) {

var toInteger = __webpack_require__(107)
  , max       = Math.max
  , min       = Math.min;
module.exports = function(index, length){
  index = toInteger(index);
  return index < 0 ? max(index + length, 0) : min(index, length);
};

/***/ }),
/* 288 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(21)
  , get      = __webpack_require__(111);
module.exports = __webpack_require__(6).getIterator = function(it){
  var iterFn = get(it);
  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};

/***/ }),
/* 289 */,
/* 290 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ctx            = __webpack_require__(28)
  , $export        = __webpack_require__(12)
  , toObject       = __webpack_require__(41)
  , call           = __webpack_require__(153)
  , isArrayIter    = __webpack_require__(151)
  , toLength       = __webpack_require__(73)
  , createProperty = __webpack_require__(274)
  , getIterFn      = __webpack_require__(111);

$export($export.S + $export.F * !__webpack_require__(154)(function(iter){ Array.from(iter); }), 'Array', {
  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
  from: function from(arrayLike/*, mapfn = undefined, thisArg = undefined*/){
    var O       = toObject(arrayLike)
      , C       = typeof this == 'function' ? this : Array
      , aLen    = arguments.length
      , mapfn   = aLen > 1 ? arguments[1] : undefined
      , mapping = mapfn !== undefined
      , index   = 0
      , iterFn  = getIterFn(O)
      , length, result, step, iterator;
    if(mapping)mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
    // if object isn't iterable or it's array with default iterator - use simple case
    if(iterFn != undefined && !(C == Array && isArrayIter(iterFn))){
      for(iterator = iterFn.call(O), result = new C; !(step = iterator.next()).done; index++){
        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);
      }
    } else {
      length = toLength(O.length);
      for(result = new C(length); length > index; index++){
        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
      }
    }
    result.length = index;
    return result;
  }
});


/***/ }),
/* 291 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var addToUnscopables = __webpack_require__(265)
  , step             = __webpack_require__(155)
  , Iterators        = __webpack_require__(40)
  , toIObject        = __webpack_require__(31);

// 22.1.3.4 Array.prototype.entries()
// 22.1.3.13 Array.prototype.keys()
// 22.1.3.29 Array.prototype.values()
// 22.1.3.30 Array.prototype[@@iterator]()
module.exports = __webpack_require__(101)(Array, 'Array', function(iterated, kind){
  this._t = toIObject(iterated); // target
  this._i = 0;                   // next index
  this._k = kind;                // kind
// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
}, function(){
  var O     = this._t
    , kind  = this._k
    , index = this._i++;
  if(!O || index >= O.length){
    this._t = undefined;
    return step(1);
  }
  if(kind == 'keys'  )return step(0, index);
  if(kind == 'values')return step(0, O[index]);
  return step(0, [index, O[index]]);
}, 'values');

// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
Iterators.Arguments = Iterators.Array;

addToUnscopables('keys');
addToUnscopables('values');
addToUnscopables('entries');

/***/ }),
/* 292 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.1 Object.assign(target, source)
var $export = __webpack_require__(12);

$export($export.S + $export.F, 'Object', {assign: __webpack_require__(280)});

/***/ }),
/* 293 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(12)
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', {create: __webpack_require__(72)});

/***/ }),
/* 294 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(12);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(16), 'Object', {defineProperty: __webpack_require__(14).f});

/***/ }),
/* 295 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.9 Object.getPrototypeOf(O)
var toObject        = __webpack_require__(41)
  , $getPrototypeOf = __webpack_require__(158);

__webpack_require__(160)('getPrototypeOf', function(){
  return function getPrototypeOf(it){
    return $getPrototypeOf(toObject(it));
  };
});

/***/ }),
/* 296 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(41)
  , $keys    = __webpack_require__(35);

__webpack_require__(160)('keys', function(){
  return function keys(it){
    return $keys(toObject(it));
  };
});

/***/ }),
/* 297 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.3.19 Object.setPrototypeOf(O, proto)
var $export = __webpack_require__(12);
$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(284).set});

/***/ }),
/* 298 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var LIBRARY            = __webpack_require__(71)
  , global             = __webpack_require__(10)
  , ctx                = __webpack_require__(28)
  , classof            = __webpack_require__(68)
  , $export            = __webpack_require__(12)
  , isObject           = __webpack_require__(30)
  , aFunction          = __webpack_require__(96)
  , anInstance         = __webpack_require__(97)
  , forOf              = __webpack_require__(70)
  , speciesConstructor = __webpack_require__(285)
  , task               = __webpack_require__(163).set
  , microtask          = __webpack_require__(279)()
  , PROMISE            = 'Promise'
  , TypeError          = global.TypeError
  , process            = global.process
  , $Promise           = global[PROMISE]
  , process            = global.process
  , isNode             = classof(process) == 'process'
  , empty              = function(){ /* empty */ }
  , Internal, GenericPromiseCapability, Wrapper;

var USE_NATIVE = !!function(){
  try {
    // correct subclassing with @@species support
    var promise     = $Promise.resolve(1)
      , FakePromise = (promise.constructor = {})[__webpack_require__(9)('species')] = function(exec){ exec(empty, empty); };
    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
    return (isNode || typeof PromiseRejectionEvent == 'function') && promise.then(empty) instanceof FakePromise;
  } catch(e){ /* empty */ }
}();

// helpers
var sameConstructor = function(a, b){
  // with library wrapper special case
  return a === b || a === $Promise && b === Wrapper;
};
var isThenable = function(it){
  var then;
  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
};
var newPromiseCapability = function(C){
  return sameConstructor($Promise, C)
    ? new PromiseCapability(C)
    : new GenericPromiseCapability(C);
};
var PromiseCapability = GenericPromiseCapability = function(C){
  var resolve, reject;
  this.promise = new C(function($$resolve, $$reject){
    if(resolve !== undefined || reject !== undefined)throw TypeError('Bad Promise constructor');
    resolve = $$resolve;
    reject  = $$reject;
  });
  this.resolve = aFunction(resolve);
  this.reject  = aFunction(reject);
};
var perform = function(exec){
  try {
    exec();
  } catch(e){
    return {error: e};
  }
};
var notify = function(promise, isReject){
  if(promise._n)return;
  promise._n = true;
  var chain = promise._c;
  microtask(function(){
    var value = promise._v
      , ok    = promise._s == 1
      , i     = 0;
    var run = function(reaction){
      var handler = ok ? reaction.ok : reaction.fail
        , resolve = reaction.resolve
        , reject  = reaction.reject
        , domain  = reaction.domain
        , result, then;
      try {
        if(handler){
          if(!ok){
            if(promise._h == 2)onHandleUnhandled(promise);
            promise._h = 1;
          }
          if(handler === true)result = value;
          else {
            if(domain)domain.enter();
            result = handler(value);
            if(domain)domain.exit();
          }
          if(result === reaction.promise){
            reject(TypeError('Promise-chain cycle'));
          } else if(then = isThenable(result)){
            then.call(result, resolve, reject);
          } else resolve(result);
        } else reject(value);
      } catch(e){
        reject(e);
      }
    };
    while(chain.length > i)run(chain[i++]); // variable length - can't use forEach
    promise._c = [];
    promise._n = false;
    if(isReject && !promise._h)onUnhandled(promise);
  });
};
var onUnhandled = function(promise){
  task.call(global, function(){
    var value = promise._v
      , abrupt, handler, console;
    if(isUnhandled(promise)){
      abrupt = perform(function(){
        if(isNode){
          process.emit('unhandledRejection', value, promise);
        } else if(handler = global.onunhandledrejection){
          handler({promise: promise, reason: value});
        } else if((console = global.console) && console.error){
          console.error('Unhandled promise rejection', value);
        }
      });
      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
      promise._h = isNode || isUnhandled(promise) ? 2 : 1;
    } promise._a = undefined;
    if(abrupt)throw abrupt.error;
  });
};
var isUnhandled = function(promise){
  if(promise._h == 1)return false;
  var chain = promise._a || promise._c
    , i     = 0
    , reaction;
  while(chain.length > i){
    reaction = chain[i++];
    if(reaction.fail || !isUnhandled(reaction.promise))return false;
  } return true;
};
var onHandleUnhandled = function(promise){
  task.call(global, function(){
    var handler;
    if(isNode){
      process.emit('rejectionHandled', promise);
    } else if(handler = global.onrejectionhandled){
      handler({promise: promise, reason: promise._v});
    }
  });
};
var $reject = function(value){
  var promise = this;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  promise._v = value;
  promise._s = 2;
  if(!promise._a)promise._a = promise._c.slice();
  notify(promise, true);
};
var $resolve = function(value){
  var promise = this
    , then;
  if(promise._d)return;
  promise._d = true;
  promise = promise._w || promise; // unwrap
  try {
    if(promise === value)throw TypeError("Promise can't be resolved itself");
    if(then = isThenable(value)){
      microtask(function(){
        var wrapper = {_w: promise, _d: false}; // wrap
        try {
          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));
        } catch(e){
          $reject.call(wrapper, e);
        }
      });
    } else {
      promise._v = value;
      promise._s = 1;
      notify(promise, false);
    }
  } catch(e){
    $reject.call({_w: promise, _d: false}, e); // wrap
  }
};

// constructor polyfill
if(!USE_NATIVE){
  // 25.4.3.1 Promise(executor)
  $Promise = function Promise(executor){
    anInstance(this, $Promise, PROMISE, '_h');
    aFunction(executor);
    Internal.call(this);
    try {
      executor(ctx($resolve, this, 1), ctx($reject, this, 1));
    } catch(err){
      $reject.call(this, err);
    }
  };
  Internal = function Promise(executor){
    this._c = [];             // <- awaiting reactions
    this._a = undefined;      // <- checked in isUnhandled reactions
    this._s = 0;              // <- state
    this._d = false;          // <- done
    this._v = undefined;      // <- value
    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
    this._n = false;          // <- notify
  };
  Internal.prototype = __webpack_require__(104)($Promise.prototype, {
    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
    then: function then(onFulfilled, onRejected){
      var reaction    = newPromiseCapability(speciesConstructor(this, $Promise));
      reaction.ok     = typeof onFulfilled == 'function' ? onFulfilled : true;
      reaction.fail   = typeof onRejected == 'function' && onRejected;
      reaction.domain = isNode ? process.domain : undefined;
      this._c.push(reaction);
      if(this._a)this._a.push(reaction);
      if(this._s)notify(this, false);
      return reaction.promise;
    },
    // 25.4.5.1 Promise.prototype.catch(onRejected)
    'catch': function(onRejected){
      return this.then(undefined, onRejected);
    }
  });
  PromiseCapability = function(){
    var promise  = new Internal;
    this.promise = promise;
    this.resolve = ctx($resolve, promise, 1);
    this.reject  = ctx($reject, promise, 1);
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Promise: $Promise});
__webpack_require__(52)($Promise, PROMISE);
__webpack_require__(162)(PROMISE);
Wrapper = __webpack_require__(6)[PROMISE];

// statics
$export($export.S + $export.F * !USE_NATIVE, PROMISE, {
  // 25.4.4.5 Promise.reject(r)
  reject: function reject(r){
    var capability = newPromiseCapability(this)
      , $$reject   = capability.reject;
    $$reject(r);
    return capability.promise;
  }
});
$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {
  // 25.4.4.6 Promise.resolve(x)
  resolve: function resolve(x){
    // instanceof instead of internal slot check because we should fix it without replacement native Promise core
    if(x instanceof $Promise && sameConstructor(x.constructor, this))return x;
    var capability = newPromiseCapability(this)
      , $$resolve  = capability.resolve;
    $$resolve(x);
    return capability.promise;
  }
});
$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(154)(function(iter){
  $Promise.all(iter)['catch'](empty);
})), PROMISE, {
  // 25.4.4.1 Promise.all(iterable)
  all: function all(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , resolve    = capability.resolve
      , reject     = capability.reject;
    var abrupt = perform(function(){
      var values    = []
        , index     = 0
        , remaining = 1;
      forOf(iterable, false, function(promise){
        var $index        = index++
          , alreadyCalled = false;
        values.push(undefined);
        remaining++;
        C.resolve(promise).then(function(value){
          if(alreadyCalled)return;
          alreadyCalled  = true;
          values[$index] = value;
          --remaining || resolve(values);
        }, reject);
      });
      --remaining || resolve(values);
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  },
  // 25.4.4.4 Promise.race(iterable)
  race: function race(iterable){
    var C          = this
      , capability = newPromiseCapability(C)
      , reject     = capability.reject;
    var abrupt = perform(function(){
      forOf(iterable, false, function(promise){
        C.resolve(promise).then(capability.resolve, reject);
      });
    });
    if(abrupt)reject(abrupt.error);
    return capability.promise;
  }
});

/***/ }),
/* 299 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var strong = __webpack_require__(271);

// 23.2 Set Objects
module.exports = __webpack_require__(273)('Set', function(get){
  return function Set(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
}, {
  // 23.2.3.1 Set.prototype.add(value)
  add: function add(value){
    return strong.def(this, value = value === 0 ? 0 : value, value);
  }
}, strong);

/***/ }),
/* 300 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global         = __webpack_require__(10)
  , has            = __webpack_require__(34)
  , DESCRIPTORS    = __webpack_require__(16)
  , $export        = __webpack_require__(12)
  , redefine       = __webpack_require__(161)
  , META           = __webpack_require__(102).KEY
  , $fails         = __webpack_require__(33)
  , shared         = __webpack_require__(106)
  , setToStringTag = __webpack_require__(52)
  , uid            = __webpack_require__(74)
  , wks            = __webpack_require__(9)
  , wksExt         = __webpack_require__(110)
  , wksDefine      = __webpack_require__(109)
  , keyOf          = __webpack_require__(278)
  , enumKeys       = __webpack_require__(275)
  , isArray        = __webpack_require__(152)
  , anObject       = __webpack_require__(21)
  , toIObject      = __webpack_require__(31)
  , toPrimitive    = __webpack_require__(108)
  , createDesc     = __webpack_require__(51)
  , _create        = __webpack_require__(72)
  , gOPNExt        = __webpack_require__(282)
  , $GOPD          = __webpack_require__(156)
  , $DP            = __webpack_require__(14)
  , $keys          = __webpack_require__(35)
  , gOPD           = $GOPD.f
  , dP             = $DP.f
  , gOPN           = gOPNExt.f
  , $Symbol        = global.Symbol
  , $JSON          = global.JSON
  , _stringify     = $JSON && $JSON.stringify
  , PROTOTYPE      = 'prototype'
  , HIDDEN         = wks('_hidden')
  , TO_PRIMITIVE   = wks('toPrimitive')
  , isEnum         = {}.propertyIsEnumerable
  , SymbolRegistry = shared('symbol-registry')
  , AllSymbols     = shared('symbols')
  , OPSymbols      = shared('op-symbols')
  , ObjectProto    = Object[PROTOTYPE]
  , USE_NATIVE     = typeof $Symbol == 'function'
  , QObject        = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function(){
  return _create(dP({}, 'a', {
    get: function(){ return dP(this, 'a', {value: 7}).a; }
  })).a != 7;
}) ? function(it, key, D){
  var protoDesc = gOPD(ObjectProto, key);
  if(protoDesc)delete ObjectProto[key];
  dP(it, key, D);
  if(protoDesc && it !== ObjectProto)dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function(tag){
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function(it){
  return typeof it == 'symbol';
} : function(it){
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D){
  if(it === ObjectProto)$defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if(has(AllSymbols, key)){
    if(!D.enumerable){
      if(!has(it, HIDDEN))dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
      D = _create(D, {enumerable: createDesc(0, false)});
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P){
  anObject(it);
  var keys = enumKeys(P = toIObject(P))
    , i    = 0
    , l = keys.length
    , key;
  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P){
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key){
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if(this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
  it  = toIObject(it);
  key = toPrimitive(key, true);
  if(it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key))return;
  var D = gOPD(it, key);
  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it){
  var names  = gOPN(toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META)result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
  var IS_OP  = it === ObjectProto
    , names  = gOPN(IS_OP ? OPSymbols : toIObject(it))
    , result = []
    , i      = 0
    , key;
  while(names.length > i){
    if(has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true))result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if(!USE_NATIVE){
  $Symbol = function Symbol(){
    if(this instanceof $Symbol)throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function(value){
      if(this === ObjectProto)$set.call(OPSymbols, value);
      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if(DESCRIPTORS && setter)setSymbolDesc(ObjectProto, tag, {configurable: true, set: $set});
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString(){
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f   = $defineProperty;
  __webpack_require__(157).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(50).f  = $propertyIsEnumerable;
  __webpack_require__(103).f = $getOwnPropertySymbols;

  if(DESCRIPTORS && !__webpack_require__(71)){
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function(name){
    return wrap(wks(name));
  }
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, {Symbol: $Symbol});

for(var symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), i = 0; symbols.length > i; )wks(symbols[i++]);

for(var symbols = $keys(wks.store), i = 0; symbols.length > i; )wksDefine(symbols[i++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function(key){
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(key){
    if(isSymbol(key))return keyOf(SymbolRegistry, key);
    throw TypeError(key + ' is not a symbol!');
  },
  useSetter: function(){ setter = true; },
  useSimple: function(){ setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function(){
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it){
    if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
    var args = [it]
      , i    = 1
      , replacer, $replacer;
    while(arguments.length > i)args.push(arguments[i++]);
    replacer = args[1];
    if(typeof replacer == 'function')$replacer = replacer;
    if($replacer || !isArray(replacer))replacer = function(key, value){
      if($replacer)value = $replacer.call(this, key, value);
      if(!isSymbol(value))return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(29)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);

/***/ }),
/* 301 */,
/* 302 */
/***/ (function(module, exports, __webpack_require__) {

// https://github.com/DavidBruant/Map-Set.prototype.toJSON
var $export  = __webpack_require__(12);

$export($export.P + $export.R, 'Set', {toJSON: __webpack_require__(272)('Set')});

/***/ }),
/* 303 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(109)('asyncIterator');

/***/ }),
/* 304 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(109)('observable');

/***/ }),
/* 305 */,
/* 306 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $isNaN = __webpack_require__(167);
var $isFinite = __webpack_require__(166);

var sign = __webpack_require__(169);
var mod = __webpack_require__(168);

var IsCallable = __webpack_require__(116);
var toPrimitive = __webpack_require__(310);

// https://es5.github.io/#x9
var ES5 = {
	ToPrimitive: toPrimitive,

	ToBoolean: function ToBoolean(value) {
		return Boolean(value);
	},
	ToNumber: function ToNumber(value) {
		return Number(value);
	},
	ToInteger: function ToInteger(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number)) { return 0; }
		if (number === 0 || !$isFinite(number)) { return number; }
		return sign(number) * Math.floor(Math.abs(number));
	},
	ToInt32: function ToInt32(x) {
		return this.ToNumber(x) >> 0;
	},
	ToUint32: function ToUint32(x) {
		return this.ToNumber(x) >>> 0;
	},
	ToUint16: function ToUint16(value) {
		var number = this.ToNumber(value);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x10000);
	},
	ToString: function ToString(value) {
		return String(value);
	},
	ToObject: function ToObject(value) {
		this.CheckObjectCoercible(value);
		return Object(value);
	},
	CheckObjectCoercible: function CheckObjectCoercible(value, optMessage) {
		/* jshint eqnull:true */
		if (value == null) {
			throw new TypeError(optMessage || 'Cannot call method on ' + value);
		}
		return value;
	},
	IsCallable: IsCallable,
	SameValue: function SameValue(x, y) {
		if (x === y) { // 0 === -0, but they are not identical.
			if (x === 0) { return 1 / x === 1 / y; }
			return true;
		}
		return $isNaN(x) && $isNaN(y);
	},

	// http://www.ecma-international.org/ecma-262/5.1/#sec-8
	Type: function Type(x) {
		if (x === null) {
			return 'Null';
		}
		if (typeof x === 'undefined') {
			return 'Undefined';
		}
		if (typeof x === 'function' || typeof x === 'object') {
			return 'Object';
		}
		if (typeof x === 'number') {
			return 'Number';
		}
		if (typeof x === 'boolean') {
			return 'Boolean';
		}
		if (typeof x === 'string') {
			return 'String';
		}
	}
};

module.exports = ES5;


/***/ }),
/* 307 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toStr = Object.prototype.toString;
var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';
var symbolToStr = hasSymbols ? Symbol.prototype.toString : toStr;

var $isNaN = __webpack_require__(167);
var $isFinite = __webpack_require__(166);
var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;

var assign = __webpack_require__(165);
var sign = __webpack_require__(169);
var mod = __webpack_require__(168);
var isPrimitive = __webpack_require__(309);
var toPrimitive = __webpack_require__(311);
var parseInteger = parseInt;
var bind = __webpack_require__(114);
var strSlice = bind.call(Function.call, String.prototype.slice);
var isBinary = bind.call(Function.call, RegExp.prototype.test, /^0b[01]+$/i);
var isOctal = bind.call(Function.call, RegExp.prototype.test, /^0o[0-7]+$/i);
var nonWS = ['\u0085', '\u200b', '\ufffe'].join('');
var nonWSregex = new RegExp('[' + nonWS + ']', 'g');
var hasNonWS = bind.call(Function.call, RegExp.prototype.test, nonWSregex);
var invalidHexLiteral = /^[\-\+]0x[0-9a-f]+$/i;
var isInvalidHexLiteral = bind.call(Function.call, RegExp.prototype.test, invalidHexLiteral);

// whitespace from: http://es5.github.io/#x15.5.4.20
// implementation from https://github.com/es-shims/es5-shim/blob/v3.4.0/es5-shim.js#L1304-L1324
var ws = [
	'\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003',
	'\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028',
	'\u2029\uFEFF'
].join('');
var trimRegex = new RegExp('(^[' + ws + ']+)|([' + ws + ']+$)', 'g');
var replace = bind.call(Function.call, String.prototype.replace);
var trim = function (value) {
	return replace(value, trimRegex, '');
};

var ES5 = __webpack_require__(306);

var hasRegExpMatcher = __webpack_require__(342);

// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-abstract-operations
var ES6 = assign(assign({}, ES5), {

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-call-f-v-args
	Call: function Call(F, V) {
		var args = arguments.length > 2 ? arguments[2] : [];
		if (!this.IsCallable(F)) {
			throw new TypeError(F + ' is not a function');
		}
		return F.apply(V, args);
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toprimitive
	ToPrimitive: toPrimitive,

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toboolean
	// ToBoolean: ES5.ToBoolean,

	// http://www.ecma-international.org/ecma-262/6.0/#sec-tonumber
	ToNumber: function ToNumber(argument) {
		var value = isPrimitive(argument) ? argument : toPrimitive(argument, 'number');
		if (typeof value === 'symbol') {
			throw new TypeError('Cannot convert a Symbol value to a number');
		}
		if (typeof value === 'string') {
			if (isBinary(value)) {
				return this.ToNumber(parseInteger(strSlice(value, 2), 2));
			} else if (isOctal(value)) {
				return this.ToNumber(parseInteger(strSlice(value, 2), 8));
			} else if (hasNonWS(value) || isInvalidHexLiteral(value)) {
				return NaN;
			} else {
				var trimmed = trim(value);
				if (trimmed !== value) {
					return this.ToNumber(trimmed);
				}
			}
		}
		return Number(value);
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tointeger
	// ToInteger: ES5.ToNumber,

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint32
	// ToInt32: ES5.ToInt32,

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint32
	// ToUint32: ES5.ToUint32,

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint16
	ToInt16: function ToInt16(argument) {
		var int16bit = this.ToUint16(argument);
		return int16bit >= 0x8000 ? int16bit - 0x10000 : int16bit;
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint16
	// ToUint16: ES5.ToUint16,

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toint8
	ToInt8: function ToInt8(argument) {
		var int8bit = this.ToUint8(argument);
		return int8bit >= 0x80 ? int8bit - 0x100 : int8bit;
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8
	ToUint8: function ToUint8(argument) {
		var number = this.ToNumber(argument);
		if ($isNaN(number) || number === 0 || !$isFinite(number)) { return 0; }
		var posInt = sign(number) * Math.floor(Math.abs(number));
		return mod(posInt, 0x100);
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-touint8clamp
	ToUint8Clamp: function ToUint8Clamp(argument) {
		var number = this.ToNumber(argument);
		if ($isNaN(number) || number <= 0) { return 0; }
		if (number >= 0xFF) { return 0xFF; }
		var f = Math.floor(argument);
		if (f + 0.5 < number) { return f + 1; }
		if (number < f + 0.5) { return f; }
		if (f % 2 !== 0) { return f + 1; }
		return f;
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tostring
	ToString: function ToString(argument) {
		if (typeof argument === 'symbol') {
			throw new TypeError('Cannot convert a Symbol value to a string');
		}
		return String(argument);
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-toobject
	ToObject: function ToObject(value) {
		this.RequireObjectCoercible(value);
		return Object(value);
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-topropertykey
	ToPropertyKey: function ToPropertyKey(argument) {
		var key = this.ToPrimitive(argument, String);
		return typeof key === 'symbol' ? symbolToStr.call(key) : this.ToString(key);
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	ToLength: function ToLength(argument) {
		var len = this.ToInteger(argument);
		if (len <= 0) { return 0; } // includes converting -0 to +0
		if (len > MAX_SAFE_INTEGER) { return MAX_SAFE_INTEGER; }
		return len;
	},

	// http://www.ecma-international.org/ecma-262/6.0/#sec-canonicalnumericindexstring
	CanonicalNumericIndexString: function CanonicalNumericIndexString(argument) {
		if (toStr.call(argument) !== '[object String]') {
			throw new TypeError('must be a string');
		}
		if (argument === '-0') { return -0; }
		var n = this.ToNumber(argument);
		if (this.SameValue(this.ToString(n), argument)) { return n; }
		return void 0;
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-requireobjectcoercible
	RequireObjectCoercible: ES5.CheckObjectCoercible,

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isarray
	IsArray: Array.isArray || function IsArray(argument) {
		return toStr.call(argument) === '[object Array]';
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-iscallable
	// IsCallable: ES5.IsCallable,

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isconstructor
	IsConstructor: function IsConstructor(argument) {
		return typeof argument === 'function' && !!argument.prototype; // unfortunately there's no way to truly check this without try/catch `new argument`
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isextensible-o
	IsExtensible: function IsExtensible(obj) {
		if (!Object.preventExtensions) { return true; }
		if (isPrimitive(obj)) {
			return false;
		}
		return Object.isExtensible(obj);
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-isinteger
	IsInteger: function IsInteger(argument) {
		if (typeof argument !== 'number' || $isNaN(argument) || !$isFinite(argument)) {
			return false;
		}
		var abs = Math.abs(argument);
		return Math.floor(abs) === abs;
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-ispropertykey
	IsPropertyKey: function IsPropertyKey(argument) {
		return typeof argument === 'string' || typeof argument === 'symbol';
	},

	// http://www.ecma-international.org/ecma-262/6.0/#sec-isregexp
	IsRegExp: function IsRegExp(argument) {
		if (!argument || typeof argument !== 'object') {
			return false;
		}
		if (hasSymbols) {
			var isRegExp = argument[Symbol.match];
			if (typeof isRegExp !== 'undefined') {
				return ES5.ToBoolean(isRegExp);
			}
		}
		return hasRegExpMatcher(argument);
	},

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevalue
	// SameValue: ES5.SameValue,

	// https://people.mozilla.org/~jorendorff/es6-draft.html#sec-samevaluezero
	SameValueZero: function SameValueZero(x, y) {
		return (x === y) || ($isNaN(x) && $isNaN(y));
	},

	Type: function Type(x) {
		if (typeof x === 'symbol') {
			return 'Symbol';
		}
		return ES5.Type(x);
	},

	// http://www.ecma-international.org/ecma-262/6.0/#sec-speciesconstructor
	SpeciesConstructor: function SpeciesConstructor(O, defaultConstructor) {
		if (this.Type(O) !== 'Object') {
			throw new TypeError('Assertion failed: Type(O) is not Object');
		}
		var C = O.constructor;
		if (typeof C === 'undefined') {
			return defaultConstructor;
		}
		if (this.Type(C) !== 'Object') {
			throw new TypeError('O.constructor is not an Object');
		}
		var S = hasSymbols && Symbol.species ? C[Symbol.species] : undefined;
		if (S == null) {
			return defaultConstructor;
		}
		if (this.IsConstructor(S)) {
			return S;
		}
		throw new TypeError('no constructor found');
	}
});

delete ES6.CheckObjectCoercible; // renamed in ES6 to RequireObjectCoercible

module.exports = ES6;


/***/ }),
/* 308 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var ES6 = __webpack_require__(307);
var assign = __webpack_require__(165);

var ES7 = assign(ES6, {
	// https://github.com/tc39/ecma262/pull/60
	SameValueNonNumber: function SameValueNonNumber(x, y) {
		if (typeof x === 'number' || typeof x !== typeof y) {
			throw new TypeError('SameValueNonNumber requires two non-number values of the same type.');
		}
		return this.SameValue(x, y);
	}
});

module.exports = ES7;


/***/ }),
/* 309 */
/***/ (function(module, exports) {

module.exports = function isPrimitive(value) {
	return value === null || (typeof value !== 'function' && typeof value !== 'object');
};


/***/ }),
/* 310 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toStr = Object.prototype.toString;

var isPrimitive = __webpack_require__(170);

var isCallable = __webpack_require__(116);

// https://es5.github.io/#x8.12
var ES5internalSlots = {
	'[[DefaultValue]]': function (O, hint) {
		var actualHint = hint || (toStr.call(O) === '[object Date]' ? String : Number);

		if (actualHint === String || actualHint === Number) {
			var methods = actualHint === String ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
			var value, i;
			for (i = 0; i < methods.length; ++i) {
				if (isCallable(O[methods[i]])) {
					value = O[methods[i]]();
					if (isPrimitive(value)) {
						return value;
					}
				}
			}
			throw new TypeError('No default value');
		}
		throw new TypeError('invalid [[DefaultValue]] hint supplied');
	}
};

// https://es5.github.io/#x9
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	return ES5internalSlots['[[DefaultValue]]'](input, PreferredType);
};


/***/ }),
/* 311 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var hasSymbols = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol';

var isPrimitive = __webpack_require__(170);
var isCallable = __webpack_require__(116);
var isDate = __webpack_require__(341);
var isSymbol = __webpack_require__(343);

var ordinaryToPrimitive = function OrdinaryToPrimitive(O, hint) {
	if (typeof O === 'undefined' || O === null) {
		throw new TypeError('Cannot call method on ' + O);
	}
	if (typeof hint !== 'string' || (hint !== 'number' && hint !== 'string')) {
		throw new TypeError('hint must be "string" or "number"');
	}
	var methodNames = hint === 'string' ? ['toString', 'valueOf'] : ['valueOf', 'toString'];
	var method, result, i;
	for (i = 0; i < methodNames.length; ++i) {
		method = O[methodNames[i]];
		if (isCallable(method)) {
			result = method.call(O);
			if (isPrimitive(result)) {
				return result;
			}
		}
	}
	throw new TypeError('No default value');
};

var GetMethod = function GetMethod(O, P) {
	var func = O[P];
	if (func !== null && typeof func !== 'undefined') {
		if (!isCallable(func)) {
			throw new TypeError(func + ' returned for property ' + P + ' of object ' + O + ' is not a function');
		}
		return func;
	}
};

// http://www.ecma-international.org/ecma-262/6.0/#sec-toprimitive
module.exports = function ToPrimitive(input, PreferredType) {
	if (isPrimitive(input)) {
		return input;
	}
	var hint = 'default';
	if (arguments.length > 1) {
		if (PreferredType === String) {
			hint = 'string';
		} else if (PreferredType === Number) {
			hint = 'number';
		}
	}

	var exoticToPrim;
	if (hasSymbols) {
		if (Symbol.toPrimitive) {
			exoticToPrim = GetMethod(input, Symbol.toPrimitive);
		} else if (isSymbol(input)) {
			exoticToPrim = Symbol.prototype.valueOf;
		}
	}
	if (typeof exoticToPrim !== 'undefined') {
		var result = exoticToPrim.call(input, hint);
		if (isPrimitive(result)) {
			return result;
		}
		throw new TypeError('unable to convert exotic object to primitive');
	}
	if (hint === 'default' && (isDate(input) || isSymbol(input))) {
		hint = 'string';
	}
	return ordinaryToPrimitive(input, hint === 'default' ? 'number' : hint);
};


/***/ }),
/* 312 */
/***/ (function(module, exports) {

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      } else {
        // At least give some kind of context to the user
        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
        err.context = er;
        throw err;
      }
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}


/***/ }),
/* 313 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _hyphenPattern = /-(.)/g;

/**
 * Camelcases a hyphenated string, for example:
 *
 *   > camelize('background-color')
 *   < "backgroundColor"
 *
 * @param {string} string
 * @return {string}
 */
function camelize(string) {
  return string.replace(_hyphenPattern, function (_, character) {
    return character.toUpperCase();
  });
}

module.exports = camelize;

/***/ }),
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright (c) 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @typechecks
 */

var _uppercasePattern = /([A-Z])/g;

/**
 * Hyphenates a camelcased string, for example:
 *
 *   > hyphenate('backgroundColor')
 *   < "background-color"
 *
 * For CSS style names, use `hyphenateStyleName` instead which works properly
 * with all vendor prefixes, including `ms`.
 *
 * @param {string} string
 * @return {string}
 */
function hyphenate(string) {
  return string.replace(_uppercasePattern, '-$1').toLowerCase();
}

module.exports = hyphenate;

/***/ }),
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */
/***/ (function(module, exports) {


var hasOwn = Object.prototype.hasOwnProperty;
var toString = Object.prototype.toString;

module.exports = function forEach (obj, fn, ctx) {
    if (toString.call(fn) !== '[object Function]') {
        throw new TypeError('iterator must be a function');
    }
    var l = obj.length;
    if (l === +l) {
        for (var i = 0; i < l; i++) {
            fn.call(ctx, obj[i], i, obj);
        }
    } else {
        for (var k in obj) {
            if (hasOwn.call(obj, k)) {
                fn.call(ctx, obj[k], k, obj);
            }
        }
    }
};



/***/ }),
/* 325 */
/***/ (function(module, exports) {

var ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var slice = Array.prototype.slice;
var toStr = Object.prototype.toString;
var funcType = '[object Function]';

module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
    }
    var args = slice.call(arguments, 1);

    var bound;
    var binder = function () {
        if (this instanceof bound) {
            var result = target.apply(
                this,
                args.concat(slice.call(arguments))
            );
            if (Object(result) === result) {
                return result;
            }
            return this;
        } else {
            return target.apply(
                that,
                args.concat(slice.call(arguments))
            );
        }
    };

    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for (var i = 0; i < boundLength; i++) {
        boundArgs.push('$' + i);
    }

    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);

    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }

    return bound;
};


/***/ }),
/* 326 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule CSSProperty
 */

/**
 * CSS properties which accept numbers but are not in units of "px".
 */

var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridRow: true,
  gridColumn: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,

  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};

/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */
function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}

/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */
var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

// Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.
Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Most style properties can be unset by doing .style[prop] = '' but IE8
 * doesn't like doing that with shorthand properties so for the properties that
 * IE8 breaks on, which are listed here, we instead unset each of the
 * individual properties. See http://bugs.jquery.com/ticket/12385.
 * The 4-value 'clock' properties like margin, padding, border-width seem to
 * behave without any problems. Curiously, list-style works too without any
 * special prodding.
 */
var shorthandPropertyExpansions = {
  background: {
    backgroundAttachment: true,
    backgroundColor: true,
    backgroundImage: true,
    backgroundPositionX: true,
    backgroundPositionY: true,
    backgroundRepeat: true
  },
  backgroundPosition: {
    backgroundPositionX: true,
    backgroundPositionY: true
  },
  border: {
    borderWidth: true,
    borderStyle: true,
    borderColor: true
  },
  borderBottom: {
    borderBottomWidth: true,
    borderBottomStyle: true,
    borderBottomColor: true
  },
  borderLeft: {
    borderLeftWidth: true,
    borderLeftStyle: true,
    borderLeftColor: true
  },
  borderRight: {
    borderRightWidth: true,
    borderRightStyle: true,
    borderRightColor: true
  },
  borderTop: {
    borderTopWidth: true,
    borderTopStyle: true,
    borderTopColor: true
  },
  font: {
    fontStyle: true,
    fontVariant: true,
    fontWeight: true,
    fontSize: true,
    lineHeight: true,
    fontFamily: true
  },
  outline: {
    outlineWidth: true,
    outlineStyle: true,
    outlineColor: true
  }
};

var CSSProperty = {
  isUnitlessNumber: isUnitlessNumber,
  shorthandPropertyExpansions: shorthandPropertyExpansions
};

exports.default = CSSProperty;

/***/ }),
/* 327 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _CSSProperty = __webpack_require__(326);

var _CSSProperty2 = _interopRequireDefault(_CSSProperty);

var _warning = __webpack_require__(1);

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * @providesModule dangerousStyleValue
 */

var isUnitlessNumber = _CSSProperty2.default.isUnitlessNumber;
var styleWarnings = {};

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @param {ReactDOMComponent} component
 * @return {string} Normalized style value with dimensions applied.
 */
function dangerousStyleValue(name, value, component) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901

  var isEmpty = value == null || typeof value === 'boolean' || value === '';
  if (isEmpty) {
    return '';
  }

  var isNonNumeric = isNaN(value);
  if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
    return '' + value; // cast to string
  }

  if (typeof value === 'string') {
    if (process.env.NODE_ENV !== 'production') {
      // Allow '0' to pass through without warning. 0 is already special and
      // doesn't require units, so we don't need to warn about it.
      if (component && value !== '0') {
        var owner = component._currentElement._owner;
        var ownerName = owner ? owner.getName() : null;
        if (ownerName && !styleWarnings[ownerName]) {
          styleWarnings[ownerName] = {};
        }
        var warned = false;
        if (ownerName) {
          var warnings = styleWarnings[ownerName];
          warned = warnings[name];
          if (!warned) {
            warnings[name] = true;
          }
        }
        if (!warned) {
          process.env.NODE_ENV !== 'production' ? (0, _warning2.default)(false, 'a `%s` tag (owner: `%s`) was passed a numeric string value ' + 'for CSS property `%s` (value: `%s`) which will be treated ' + 'as a unitless number in a future version of React.', component._currentElement.type, ownerName || 'unknown', name, value) : void 0;
        }
      }
    }
    value = value.trim();
  }
  return value + 'px';
}

exports.default = dangerousStyleValue;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 328 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = clean;
// Returns true for null, false, undefined and {}
function isFalsy(value) {
  return value === null || value === undefined || value === false || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && Object.keys(value).length === 0;
}

function cleanObject(object) {
  if (isFalsy(object)) return null;
  if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object') return object;

  var acc = {},
      keys = Object.keys(object),
      hasFalsy = false;
  for (var i = 0; i < keys.length; i++) {
    var value = object[keys[i]];
    var filteredValue = clean(value);
    if (filteredValue === null || filteredValue !== value) {
      hasFalsy = true;
    }
    if (filteredValue !== null) {
      acc[keys[i]] = filteredValue;
    }
  }
  return Object.keys(acc).length === 0 ? null : hasFalsy ? acc : object;
}

function cleanArray(rules) {
  var hasFalsy = false;
  var filtered = [];
  rules.forEach(function (rule) {
    var filteredRule = clean(rule);
    if (filteredRule === null || filteredRule !== rule) {
      hasFalsy = true;
    }
    if (filteredRule !== null) {
      filtered.push(filteredRule);
    }
  });
  return filtered.length == 0 ? null : hasFalsy ? filtered : rules;
}

// Takes style array or object provided by user and clears all the falsy data 
// If there is no styles left after filtration returns null
function clean(input) {
  return Array.isArray(input) ? cleanArray(input) : cleanObject(input);
}

/***/ }),
/* 329 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = doHash;
// murmurhash2 via https://gist.github.com/raycmorgan/588423

function doHash(str, seed) {
  var m = 0x5bd1e995;
  var r = 24;
  var h = seed ^ str.length;
  var length = str.length;
  var currentIndex = 0;

  while (length >= 4) {
    var k = UInt32(str, currentIndex);

    k = Umul32(k, m);
    k ^= k >>> r;
    k = Umul32(k, m);

    h = Umul32(h, m);
    h ^= k;

    currentIndex += 4;
    length -= 4;
  }

  switch (length) {
    case 3:
      h ^= UInt16(str, currentIndex);
      h ^= str.charCodeAt(currentIndex + 2) << 16;
      h = Umul32(h, m);
      break;

    case 2:
      h ^= UInt16(str, currentIndex);
      h = Umul32(h, m);
      break;

    case 1:
      h ^= str.charCodeAt(currentIndex);
      h = Umul32(h, m);
      break;
  }

  h ^= h >>> 13;
  h = Umul32(h, m);
  h ^= h >>> 15;

  return h >>> 0;
}

function UInt32(str, pos) {
  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8) + (str.charCodeAt(pos++) << 16) + (str.charCodeAt(pos) << 24);
}

function UInt16(str, pos) {
  return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8);
}

function Umul32(n, m) {
  n = n | 0;
  m = m | 0;
  var nlo = n & 0xffff;
  var nhi = n >>> 16;
  var res = nlo * m + ((nhi * m & 0xffff) << 16) | 0;
  return res;
}

/***/ }),
/* 330 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (global, factory) {
  ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? module.exports = factory() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : global.InlineStylePrefixAll = factory();
})(undefined, function () {
  'use strict';

  var babelHelpers = {};

  babelHelpers.classCallCheck = function (instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  };

  babelHelpers.createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  babelHelpers.defineProperty = function (obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  };

  babelHelpers;

  function __commonjs(fn, module) {
    return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var prefixProps = { "Webkit": { "transform": true, "transformOrigin": true, "transformOriginX": true, "transformOriginY": true, "backfaceVisibility": true, "perspective": true, "perspectiveOrigin": true, "transformStyle": true, "transformOriginZ": true, "animation": true, "animationDelay": true, "animationDirection": true, "animationFillMode": true, "animationDuration": true, "animationIterationCount": true, "animationName": true, "animationPlayState": true, "animationTimingFunction": true, "appearance": true, "userSelect": true, "fontKerning": true, "textEmphasisPosition": true, "textEmphasis": true, "textEmphasisStyle": true, "textEmphasisColor": true, "boxDecorationBreak": true, "clipPath": true, "maskImage": true, "maskMode": true, "maskRepeat": true, "maskPosition": true, "maskClip": true, "maskOrigin": true, "maskSize": true, "maskComposite": true, "mask": true, "maskBorderSource": true, "maskBorderMode": true, "maskBorderSlice": true, "maskBorderWidth": true, "maskBorderOutset": true, "maskBorderRepeat": true, "maskBorder": true, "maskType": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "filter": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true, "flex": true, "flexBasis": true, "flexDirection": true, "flexGrow": true, "flexFlow": true, "flexShrink": true, "flexWrap": true, "alignContent": true, "alignItems": true, "alignSelf": true, "justifyContent": true, "order": true, "backdropFilter": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "shapeImageThreshold": true, "shapeImageMargin": true, "shapeImageOutside": true, "hyphens": true, "flowInto": true, "flowFrom": true, "regionFragment": true, "textSizeAdjust": true, "transition": true, "transitionDelay": true, "transitionDuration": true, "transitionProperty": true, "transitionTimingFunction": true }, "Moz": { "appearance": true, "userSelect": true, "boxSizing": true, "textAlignLast": true, "textDecorationStyle": true, "textDecorationSkip": true, "textDecorationLine": true, "textDecorationColor": true, "tabSize": true, "hyphens": true, "fontFeatureSettings": true, "breakAfter": true, "breakBefore": true, "breakInside": true, "columnCount": true, "columnFill": true, "columnGap": true, "columnRule": true, "columnRuleColor": true, "columnRuleStyle": true, "columnRuleWidth": true, "columns": true, "columnSpan": true, "columnWidth": true }, "ms": { "flex": true, "flexBasis": false, "flexDirection": true, "flexGrow": false, "flexFlow": true, "flexShrink": false, "flexWrap": true, "alignContent": false, "alignItems": false, "alignSelf": false, "justifyContent": false, "order": false, "userSelect": true, "wrapFlow": true, "wrapThrough": true, "wrapMargin": true, "scrollSnapType": true, "scrollSnapPointsX": true, "scrollSnapPointsY": true, "scrollSnapDestination": true, "scrollSnapCoordinate": true, "touchAction": true, "hyphens": true, "flowInto": true, "flowFrom": true, "breakBefore": true, "breakAfter": true, "breakInside": true, "regionFragment": true, "gridTemplateColumns": true, "gridTemplateRows": true, "gridTemplateAreas": true, "gridTemplate": true, "gridAutoColumns": true, "gridAutoRows": true, "gridAutoFlow": true, "grid": true, "gridRowStart": true, "gridColumnStart": true, "gridRowEnd": true, "gridRow": true, "gridColumn": true, "gridColumnEnd": true, "gridColumnGap": true, "gridRowGap": true, "gridArea": true, "gridGap": true, "textSizeAdjust": true } };

  // helper to capitalize strings
  var capitalizeString = function capitalizeString(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  };

  var isPrefixedProperty = function isPrefixedProperty(property) {
    return property.match(/^(Webkit|Moz|O|ms)/) !== null;
  };

  function sortPrefixedStyle(style) {
    return Object.keys(style).sort(function (left, right) {
      if (isPrefixedProperty(left) && !isPrefixedProperty(right)) {
        return -1;
      } else if (!isPrefixedProperty(left) && isPrefixedProperty(right)) {
        return 1;
      }
      return 0;
    }).reduce(function (sortedStyle, prop) {
      sortedStyle[prop] = style[prop];
      return sortedStyle;
    }, {});
  }

  function position(property, value) {
    if (property === 'position' && value === 'sticky') {
      return { position: ['-webkit-sticky', 'sticky'] };
    }
  }

  // returns a style object with a single concated prefixed value string
  var joinPrefixedValue = function joinPrefixedValue(property, value) {
    var replacer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (prefix, value) {
      return prefix + value;
    };
    return babelHelpers.defineProperty({}, property, ['-webkit-', '-moz-', ''].map(function (prefix) {
      return replacer(prefix, value);
    }));
  };

  var isPrefixedValue = function isPrefixedValue(value) {
    if (Array.isArray(value)) value = value.join(',');

    return value.match(/-webkit-|-moz-|-ms-/) !== null;
  };

  function calc(property, value) {
    if (typeof value === 'string' && !isPrefixedValue(value) && value.indexOf('calc(') > -1) {
      return joinPrefixedValue(property, value, function (prefix, value) {
        return value.replace(/calc\(/g, prefix + 'calc(');
      });
    }
  }

  var values = {
    'zoom-in': true,
    'zoom-out': true,
    grab: true,
    grabbing: true
  };

  function cursor(property, value) {
    if (property === 'cursor' && values[value]) {
      return joinPrefixedValue(property, value);
    }
  }

  var values$1 = { flex: true, 'inline-flex': true };

  function flex(property, value) {
    if (property === 'display' && values$1[value]) {
      return {
        display: ['-webkit-box', '-moz-box', '-ms-' + value + 'box', '-webkit-' + value, value]
      };
    }
  }

  var properties = {
    maxHeight: true,
    maxWidth: true,
    width: true,
    height: true,
    columnWidth: true,
    minWidth: true,
    minHeight: true
  };
  var values$2 = {
    'min-content': true,
    'max-content': true,
    'fill-available': true,
    'fit-content': true,
    'contain-floats': true
  };

  function sizing(property, value) {
    if (properties[property] && values$2[value]) {
      return joinPrefixedValue(property, value);
    }
  }

  var values$3 = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

  function gradient(property, value) {
    if (typeof value === 'string' && !isPrefixedValue(value) && value.match(values$3) !== null) {
      return joinPrefixedValue(property, value);
    }
  }

  var index = __commonjs(function (module) {
    'use strict';

    var uppercasePattern = /[A-Z]/g;
    var msPattern = /^ms-/;
    var cache = {};

    function hyphenateStyleName(string) {
      return string in cache ? cache[string] : cache[string] = string.replace(uppercasePattern, '-$&').toLowerCase().replace(msPattern, '-ms-');
    }

    module.exports = hyphenateStyleName;
  });

  var hyphenateStyleName = index && (typeof index === 'undefined' ? 'undefined' : _typeof(index)) === 'object' && 'default' in index ? index['default'] : index;

  var properties$1 = {
    transition: true,
    transitionProperty: true,
    WebkitTransition: true,
    WebkitTransitionProperty: true
  };

  function transition(property, value) {
    // also check for already prefixed transitions
    if (typeof value === 'string' && properties$1[property]) {
      var _ref2;

      var outputValue = prefixValue(value);
      var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (value) {
        return value.match(/-moz-|-ms-/) === null;
      }).join(',');

      // if the property is already prefixed
      if (property.indexOf('Webkit') > -1) {
        return babelHelpers.defineProperty({}, property, webkitOutput);
      }

      return _ref2 = {}, babelHelpers.defineProperty(_ref2, 'Webkit' + capitalizeString(property), webkitOutput), babelHelpers.defineProperty(_ref2, property, outputValue), _ref2;
    }
  }

  function prefixValue(value) {
    if (isPrefixedValue(value)) {
      return value;
    }

    // only split multi values, not cubic beziers
    var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

    // iterate each single value and check for transitioned properties
    // that need to be prefixed as well
    multipleValues.forEach(function (val, index) {
      multipleValues[index] = Object.keys(prefixProps).reduce(function (out, prefix) {
        var dashCasePrefix = '-' + prefix.toLowerCase() + '-';

        Object.keys(prefixProps[prefix]).forEach(function (prop) {
          var dashCaseProperty = hyphenateStyleName(prop);

          if (val.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
            // join all prefixes and create a new value
            out = val.replace(dashCaseProperty, dashCasePrefix + dashCaseProperty) + ',' + out;
          }
        });
        return out;
      }, val);
    });

    return multipleValues.join(',');
  }

  var alternativeValues = {
    'space-around': 'distribute',
    'space-between': 'justify',
    'flex-start': 'start',
    'flex-end': 'end'
  };
  var alternativeProps = {
    alignContent: 'msFlexLinePack',
    alignSelf: 'msFlexItemAlign',
    alignItems: 'msFlexAlign',
    justifyContent: 'msFlexPack',
    order: 'msFlexOrder',
    flexGrow: 'msFlexPositive',
    flexShrink: 'msFlexNegative',
    flexBasis: 'msPreferredSize'
  };

  function flexboxIE(property, value) {
    if (alternativeProps[property]) {
      return babelHelpers.defineProperty({}, alternativeProps[property], alternativeValues[value] || value);
    }
  }

  var alternativeValues$1 = {
    'space-around': 'justify',
    'space-between': 'justify',
    'flex-start': 'start',
    'flex-end': 'end',
    'wrap-reverse': 'multiple',
    wrap: 'multiple'
  };

  var alternativeProps$1 = {
    alignItems: 'WebkitBoxAlign',
    justifyContent: 'WebkitBoxPack',
    flexWrap: 'WebkitBoxLines'
  };

  function flexboxOld(property, value) {
    if (property === 'flexDirection' && typeof value === 'string') {
      return {
        WebkitBoxOrient: value.indexOf('column') > -1 ? 'vertical' : 'horizontal',
        WebkitBoxDirection: value.indexOf('reverse') > -1 ? 'reverse' : 'normal'
      };
    }
    if (alternativeProps$1[property]) {
      return babelHelpers.defineProperty({}, alternativeProps$1[property], alternativeValues$1[value] || value);
    }
  }

  var plugins = [position, calc, cursor, sizing, gradient, transition, flexboxIE, flexboxOld, flex];

  /**
   * Returns a prefixed version of the style object using all vendor prefixes
   * @param {Object} styles - Style object that gets prefixed properties added
   * @returns {Object} - Style object with prefixed properties and values
   */
  function prefixAll(styles) {
    Object.keys(styles).forEach(function (property) {
      var value = styles[property];
      if (value instanceof Object && !Array.isArray(value)) {
        // recurse through nested style objects
        styles[property] = prefixAll(value);
      } else {
        Object.keys(prefixProps).forEach(function (prefix) {
          var properties = prefixProps[prefix];
          // add prefixes if needed
          if (properties[property]) {
            styles[prefix + capitalizeString(property)] = value;
          }
        });
      }
    });

    Object.keys(styles).forEach(function (property) {
      [].concat(styles[property]).forEach(function (value, index) {
        // resolve every special plugins
        plugins.forEach(function (plugin) {
          return assignStyles(styles, plugin(property, value));
        });
      });
    });

    return sortPrefixedStyle(styles);
  }

  function assignStyles(base) {
    var extend = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    Object.keys(extend).forEach(function (property) {
      var baseValue = base[property];
      if (Array.isArray(baseValue)) {
        [].concat(extend[property]).forEach(function (value) {
          var valueIndex = baseValue.indexOf(value);
          if (valueIndex > -1) {
            base[property].splice(valueIndex, 1);
          }
          base[property].push(value);
        });
      } else {
        base[property] = extend[property];
      }
    });
  }

  return prefixAll;
});

/***/ }),
/* 331 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.PluginSet = PluginSet;
exports.fallbacks = fallbacks;
exports.prefixes = prefixes;

var _objectAssign = __webpack_require__(4);

var _objectAssign2 = _interopRequireDefault(_objectAssign);

var _CSSPropertyOperations = __webpack_require__(177);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isDev = function (x) {
  return x === 'development' || !x;
}(process.env.NODE_ENV);

function PluginSet(initial) {
  this.fns = initial || [];
}

(0, _objectAssign2.default)(PluginSet.prototype, {
  add: function add() {
    var _this = this;

    for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
      fns[_key] = arguments[_key];
    }

    fns.forEach(function (fn) {
      if (_this.fns.indexOf(fn) >= 0) {
        if (isDev) {
          console.warn('adding the same plugin again, ignoring'); //eslint-disable-line no-console
        }
      } else {
        _this.fns = [fn].concat(_this.fns);
      }
    });
  },
  remove: function remove(fn) {
    this.fns = this.fns.filter(function (x) {
      return x !== fn;
    });
  },
  clear: function clear() {
    this.fns = [];
  },
  transform: function transform(o) {
    return this.fns.reduce(function (o, fn) {
      return fn(o);
    }, o);
  }
});

function fallbacks(node) {
  var hasArray = Object.keys(node.style).map(function (x) {
    return Array.isArray(node.style[x]);
  }).indexOf(true) >= 0;
  if (hasArray) {
    var _ret = function () {
      var style = node.style;

      var flattened = Object.keys(style).reduce(function (o, key) {
        o[key] = Array.isArray(style[key]) ? style[key].join('; ' + (0, _CSSPropertyOperations.processStyleName)(key) + ': ') : style[key];
        return o;
      }, {});
      // todo - 
      // flatten arrays which haven't been flattened yet 
      return {
        v: (0, _objectAssign2.default)({}, node, { style: flattened })
      };
    }();

    if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
  }
  return node;
}

var prefixAll = __webpack_require__(330);

function prefixes(node) {
  return (0, _objectAssign2.default)({}, node, { style: prefixAll(node.style) });
}
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 332 */,
/* 333 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StyleSheet = StyleSheet;

var _objectAssign = __webpack_require__(4);

var _objectAssign2 = _interopRequireDefault(_objectAssign);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/* 

high performance StyleSheet for css-in-js systems 

- uses multiple style tags behind the scenes for millions of rules 
- uses `insertRule` for appending in production for *much* faster performance
- 'polyfills' on server side 


// usage

import StyleSheet from 'glamor/lib/sheet'
let styleSheet = new StyleSheet()

styleSheet.inject() 
- 'injects' the stylesheet into the page (or into memory if on server)

styleSheet.insert('#box { border: 1px solid red; }') 
- appends a css rule into the stylesheet 

styleSheet.flush() 
- empties the stylesheet of all its contents


*/

function last(arr) {
  return arr[arr.length - 1];
}

function sheetForTag(tag) {
  if (tag.sheet) {
    return tag.sheet;
  }

  // this weirdness brought to you by firefox 
  for (var i = 0; i < document.styleSheets.length; i++) {
    if (document.styleSheets[i].ownerNode === tag) {
      return document.styleSheets[i];
    }
  }
}

var isBrowser = typeof window !== 'undefined';
var isDev = process.env.NODE_ENV === 'development' || !process.env.NODE_ENV; //(x => (x === 'development') || !x)(process.env.NODE_ENV)
var isTest = process.env.NODE_ENV === 'test';

var oldIE = function () {
  if (isBrowser) {
    var div = document.createElement('div');
    div.innerHTML = '<!--[if lt IE 10]><i></i><![endif]-->';
    return div.getElementsByTagName('i').length === 1;
  }
}();

function makeStyleTag() {
  var tag = document.createElement('style');
  tag.type = 'text/css';
  tag.setAttribute('data-glamor', '');
  tag.appendChild(document.createTextNode(''));
  (document.head || document.getElementsByTagName('head')[0]).appendChild(tag);
  return tag;
}

function StyleSheet() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$speedy = _ref.speedy,
      speedy = _ref$speedy === undefined ? !isDev && !isTest : _ref$speedy,
      _ref$maxLength = _ref.maxLength,
      maxLength = _ref$maxLength === undefined ? isBrowser && oldIE ? 4000 : 65000 : _ref$maxLength;

  this.isSpeedy = speedy; // the big drawback here is that the css won't be editable in devtools
  this.sheet = undefined;
  this.tags = [];
  this.maxLength = maxLength;
  this.ctr = 0;
}

(0, _objectAssign2.default)(StyleSheet.prototype, {
  getSheet: function getSheet() {
    return sheetForTag(last(this.tags));
  },
  inject: function inject() {
    var _this = this;

    if (this.injected) {
      throw new Error('already injected stylesheet!');
    }
    if (isBrowser) {
      this.tags[0] = makeStyleTag();
    } else {
      // server side 'polyfill'. just enough behavior to be useful.
      this.sheet = {
        cssRules: [],
        insertRule: function insertRule(rule) {
          // enough 'spec compliance' to be able to extract the rules later  
          // in other words, just the cssText field 
          _this.sheet.cssRules.push({ cssText: rule });
        }
      };
    }
    this.injected = true;
  },
  speedy: function speedy(bool) {
    if (this.ctr !== 0) {
      throw new Error('cannot change speedy mode after inserting any rule to sheet. Either call speedy(' + bool + ') earlier in your app, or call flush() before speedy(' + bool + ')');
    }
    this.isSpeedy = !!bool;
  },
  _insert: function _insert(rule) {
    // this weirdness for perf, and chrome's weird bug 
    // https://stackoverflow.com/questions/20007992/chrome-suddenly-stopped-accepting-insertrule
    try {
      var sheet = this.getSheet();
      sheet.insertRule(rule, rule.indexOf('@import') !== -1 ? 0 : sheet.cssRules.length);
    } catch (e) {
      if (isDev) {
        // might need beter dx for this 
        console.warn('whoops, illegal rule inserted', rule); //eslint-disable-line no-console
      }
    }
  },
  insert: function insert(rule) {

    if (isBrowser) {
      // this is the ultrafast version, works across browsers 
      if (this.isSpeedy && this.getSheet().insertRule) {
        this._insert(rule);
      }
      // more browser weirdness. I don't even know    
      // else if(this.tags.length > 0 && this.tags::last().styleSheet) {      
      //   this.tags::last().styleSheet.cssText+= rule
      // }
      else {
          if (rule.indexOf('@import') !== -1) {
            var tag = last(this.tags);
            tag.insertBefore(document.createTextNode(rule), tag.firstChild);
          } else {
            last(this.tags).appendChild(document.createTextNode(rule));
          }
        }
    } else {
      // server side is pretty simple         
      this.sheet.insertRule(rule, rule.indexOf('@import') !== -1 ? 0 : this.sheet.cssRules.length);
    }

    this.ctr++;
    if (isBrowser && this.ctr % this.maxLength === 0) {
      this.tags.push(makeStyleTag());
    }
    return this.ctr - 1;
  },

  // commenting this out till we decide on v3's decision 
  // _replace(index, rule) {
  //   // this weirdness for perf, and chrome's weird bug 
  //   // https://stackoverflow.com/questions/20007992/chrome-suddenly-stopped-accepting-insertrule
  //   try {  
  //     let sheet = this.getSheet()        
  //     sheet.deleteRule(index) // todo - correct index here     
  //     sheet.insertRule(rule, index)
  //   }
  //   catch(e) {
  //     if(isDev) {
  //       // might need beter dx for this 
  //       console.warn('whoops, problem replacing rule', rule) //eslint-disable-line no-console
  //     }          
  //   }          

  // }
  // replace(index, rule) {
  //   if(isBrowser) {
  //     if(this.isSpeedy && this.getSheet().insertRule) {
  //       this._replace(index, rule)
  //     }
  //     else {
  //       let _slot = Math.floor((index  + this.maxLength) / this.maxLength) - 1        
  //       let _index = (index % this.maxLength) + 1
  //       let tag = this.tags[_slot]
  //       tag.replaceChild(document.createTextNode(rule), tag.childNodes[_index])
  //     }
  //   }
  //   else {
  //     let rules = this.sheet.cssRules
  //     this.sheet.cssRules = [ ...rules.slice(0, index), { cssText: rule }, ...rules.slice(index + 1) ]
  //   }
  // }
  delete: function _delete(index) {
    // we insert a blank rule when 'deleting' so previously returned indexes remain stable
    return this.replace(index, '');
  },
  flush: function flush() {
    if (isBrowser) {
      this.tags.forEach(function (tag) {
        return tag.parentNode.removeChild(tag);
      });
      this.tags = [];
      this.sheet = null;
      this.ctr = 0;
      // todo - look for remnants in document.styleSheets
    } else {
      // simpler on server 
      this.sheet.cssRules = [];
    }
    this.injected = false;
  },
  rules: function rules() {
    if (!isBrowser) {
      return this.sheet.cssRules;
    }
    var arr = [];
    this.tags.forEach(function (tag) {
      return arr.splice.apply(arr, [arr.length, 0].concat(_toConsumableArray(Array.from(sheetForTag(tag).cssRules))));
    });
    return arr;
  }
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 334 */,
/* 335 */,
/* 336 */
/***/ (function(module, exports, __webpack_require__) {

var bind = __webpack_require__(114);

module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);


/***/ }),
/* 337 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = {
  XmlEntities: __webpack_require__(339),
  Html4Entities: __webpack_require__(338),
  Html5Entities: __webpack_require__(178),
  AllHtmlEntities: __webpack_require__(178)
};


/***/ }),
/* 338 */
/***/ (function(module, exports) {

var HTML_ALPHA = ['apos', 'nbsp', 'iexcl', 'cent', 'pound', 'curren', 'yen', 'brvbar', 'sect', 'uml', 'copy', 'ordf', 'laquo', 'not', 'shy', 'reg', 'macr', 'deg', 'plusmn', 'sup2', 'sup3', 'acute', 'micro', 'para', 'middot', 'cedil', 'sup1', 'ordm', 'raquo', 'frac14', 'frac12', 'frac34', 'iquest', 'Agrave', 'Aacute', 'Acirc', 'Atilde', 'Auml', 'Aring', 'Aelig', 'Ccedil', 'Egrave', 'Eacute', 'Ecirc', 'Euml', 'Igrave', 'Iacute', 'Icirc', 'Iuml', 'ETH', 'Ntilde', 'Ograve', 'Oacute', 'Ocirc', 'Otilde', 'Ouml', 'times', 'Oslash', 'Ugrave', 'Uacute', 'Ucirc', 'Uuml', 'Yacute', 'THORN', 'szlig', 'agrave', 'aacute', 'acirc', 'atilde', 'auml', 'aring', 'aelig', 'ccedil', 'egrave', 'eacute', 'ecirc', 'euml', 'igrave', 'iacute', 'icirc', 'iuml', 'eth', 'ntilde', 'ograve', 'oacute', 'ocirc', 'otilde', 'ouml', 'divide', 'Oslash', 'ugrave', 'uacute', 'ucirc', 'uuml', 'yacute', 'thorn', 'yuml', 'quot', 'amp', 'lt', 'gt', 'oelig', 'oelig', 'scaron', 'scaron', 'yuml', 'circ', 'tilde', 'ensp', 'emsp', 'thinsp', 'zwnj', 'zwj', 'lrm', 'rlm', 'ndash', 'mdash', 'lsquo', 'rsquo', 'sbquo', 'ldquo', 'rdquo', 'bdquo', 'dagger', 'dagger', 'permil', 'lsaquo', 'rsaquo', 'euro', 'fnof', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'alpha', 'beta', 'gamma', 'delta', 'epsilon', 'zeta', 'eta', 'theta', 'iota', 'kappa', 'lambda', 'mu', 'nu', 'xi', 'omicron', 'pi', 'rho', 'sigmaf', 'sigma', 'tau', 'upsilon', 'phi', 'chi', 'psi', 'omega', 'thetasym', 'upsih', 'piv', 'bull', 'hellip', 'prime', 'prime', 'oline', 'frasl', 'weierp', 'image', 'real', 'trade', 'alefsym', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'crarr', 'larr', 'uarr', 'rarr', 'darr', 'harr', 'forall', 'part', 'exist', 'empty', 'nabla', 'isin', 'notin', 'ni', 'prod', 'sum', 'minus', 'lowast', 'radic', 'prop', 'infin', 'ang', 'and', 'or', 'cap', 'cup', 'int', 'there4', 'sim', 'cong', 'asymp', 'ne', 'equiv', 'le', 'ge', 'sub', 'sup', 'nsub', 'sube', 'supe', 'oplus', 'otimes', 'perp', 'sdot', 'lceil', 'rceil', 'lfloor', 'rfloor', 'lang', 'rang', 'loz', 'spades', 'clubs', 'hearts', 'diams'];
var HTML_CODES = [39, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 34, 38, 60, 62, 338, 339, 352, 353, 376, 710, 732, 8194, 8195, 8201, 8204, 8205, 8206, 8207, 8211, 8212, 8216, 8217, 8218, 8220, 8221, 8222, 8224, 8225, 8240, 8249, 8250, 8364, 402, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 977, 978, 982, 8226, 8230, 8242, 8243, 8254, 8260, 8472, 8465, 8476, 8482, 8501, 8592, 8593, 8594, 8595, 8596, 8629, 8656, 8657, 8658, 8659, 8660, 8704, 8706, 8707, 8709, 8711, 8712, 8713, 8715, 8719, 8721, 8722, 8727, 8730, 8733, 8734, 8736, 8743, 8744, 8745, 8746, 8747, 8756, 8764, 8773, 8776, 8800, 8801, 8804, 8805, 8834, 8835, 8836, 8838, 8839, 8853, 8855, 8869, 8901, 8968, 8969, 8970, 8971, 9001, 9002, 9674, 9824, 9827, 9829, 9830];

var alphaIndex = {};
var numIndex = {};

var i = 0;
var length = HTML_ALPHA.length;
while (i < length) {
    var a = HTML_ALPHA[i];
    var c = HTML_CODES[i];
    alphaIndex[a] = String.fromCharCode(c);
    numIndex[c] = a;
    i++;
}

/**
 * @constructor
 */
function Html4Entities() {}

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.decode = function(str) {
    if (str.length === 0) {
        return '';
    }
    return str.replace(/&(#?[\w\d]+);?/g, function(s, entity) {
        var chr;
        if (entity.charAt(0) === "#") {
            var code = entity.charAt(1).toLowerCase() === 'x' ?
                parseInt(entity.substr(2), 16) :
                parseInt(entity.substr(1));

            if (!(isNaN(code) || code < -32768 || code > 65535)) {
                chr = String.fromCharCode(code);
            }
        } else {
            chr = alphaIndex[entity];
        }
        return chr || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.decode = function(str) {
    return new Html4Entities().decode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encode = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var alpha = numIndex[str.charCodeAt(i)];
        result += alpha ? "&" + alpha + ";" : str.charAt(i);
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encode = function(str) {
    return new Html4Entities().encode(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonUTF = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var cc = str.charCodeAt(i);
        var alpha = numIndex[cc];
        if (alpha) {
            result += "&" + alpha + ";";
        } else if (cc < 32 || cc > 126) {
            result += "&#" + cc + ";";
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonUTF = function(str) {
    return new Html4Entities().encodeNonUTF(str);
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.prototype.encodeNonASCII = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
Html4Entities.encodeNonASCII = function(str) {
    return new Html4Entities().encodeNonASCII(str);
};

module.exports = Html4Entities;


/***/ }),
/* 339 */
/***/ (function(module, exports) {

var ALPHA_INDEX = {
    '&lt': '<',
    '&gt': '>',
    '&quot': '"',
    '&apos': '\'',
    '&amp': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&apos;': '\'',
    '&amp;': '&'
};

var CHAR_INDEX = {
    60: 'lt',
    62: 'gt',
    34: 'quot',
    39: 'apos',
    38: 'amp'
};

var CHAR_S_INDEX = {
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    '\'': '&apos;',
    '&': '&amp;'
};

/**
 * @constructor
 */
function XmlEntities() {}

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encode = function(str) {
    if (str.length === 0) {
        return '';
    }
    return str.replace(/<|>|"|'|&/g, function(s) {
        return CHAR_S_INDEX[s];
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encode = function(str) {
    return new XmlEntities().encode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.decode = function(str) {
    if (str.length === 0) {
        return '';
    }
    return str.replace(/&#?[0-9a-zA-Z]+;?/g, function(s) {
        if (s.charAt(1) === '#') {
            var code = s.charAt(2).toLowerCase() === 'x' ?
                parseInt(s.substr(3), 16) :
                parseInt(s.substr(2));

            if (isNaN(code) || code < -32768 || code > 65535) {
                return '';
            }
            return String.fromCharCode(code);
        }
        return ALPHA_INDEX[s] || s;
    });
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.decode = function(str) {
    return new XmlEntities().decode(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonUTF = function(str) {
    var strLength = str.length;
    if (strLength === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLength) {
        var c = str.charCodeAt(i);
        var alpha = CHAR_INDEX[c];
        if (alpha) {
            result += "&" + alpha + ";";
            i++;
            continue;
        }
        if (c < 32 || c > 126) {
            result += '&#' + c + ';';
        } else {
            result += str.charAt(i);
        }
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonUTF = function(str) {
    return new XmlEntities().encodeNonUTF(str);
 };

/**
 * @param {String} str
 * @returns {String}
 */
XmlEntities.prototype.encodeNonASCII = function(str) {
    var strLenght = str.length;
    if (strLenght === 0) {
        return '';
    }
    var result = '';
    var i = 0;
    while (i < strLenght) {
        var c = str.charCodeAt(i);
        if (c <= 255) {
            result += str[i++];
            continue;
        }
        result += '&#' + c + ';';
        i++;
    }
    return result;
};

/**
 * @param {String} str
 * @returns {String}
 */
 XmlEntities.encodeNonASCII = function(str) {
    return new XmlEntities().encodeNonASCII(str);
 };

module.exports = XmlEntities;


/***/ }),
/* 340 */,
/* 341 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getDay = Date.prototype.getDay;
var tryDateObject = function tryDateObject(value) {
	try {
		getDay.call(value);
		return true;
	} catch (e) {
		return false;
	}
};

var toStr = Object.prototype.toString;
var dateClass = '[object Date]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isDateObject(value) {
	if (typeof value !== 'object' || value === null) { return false; }
	return hasToStringTag ? tryDateObject(value) : toStr.call(value) === dateClass;
};


/***/ }),
/* 342 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var regexExec = RegExp.prototype.exec;
var tryRegexExec = function tryRegexExec(value) {
	try {
		regexExec.call(value);
		return true;
	} catch (e) {
		return false;
	}
};
var toStr = Object.prototype.toString;
var regexClass = '[object RegExp]';
var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';

module.exports = function isRegex(value) {
	if (typeof value !== 'object') { return false; }
	return hasToStringTag ? tryRegexExec(value) : toStr.call(value) === regexClass;
};


/***/ }),
/* 343 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toStr = Object.prototype.toString;
var hasSymbols = typeof Symbol === 'function' && typeof Symbol() === 'symbol';

if (hasSymbols) {
	var symToStr = Symbol.prototype.toString;
	var symStringRegex = /^Symbol\(.*\)$/;
	var isSymbolObject = function isSymbolObject(value) {
		if (typeof value.valueOf() !== 'symbol') { return false; }
		return symStringRegex.test(symToStr.call(value));
	};
	module.exports = function isSymbol(value) {
		if (typeof value === 'symbol') { return true; }
		if (toStr.call(value) !== '[object Symbol]') { return false; }
		try {
			return isSymbolObject(value);
		} catch (e) {
			return false;
		}
	};
} else {
	module.exports = function isSymbol(value) {
		// this environment does not support Symbols.
		return false;
	};
}


/***/ }),
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module, global) {var __WEBPACK_AMD_DEFINE_RESULT__;/*! https://mths.be/punycode v1.4.1 by @mathias */
;(function(root) {

	/** Detect free variables */
	var freeExports = typeof exports == 'object' && exports &&
		!exports.nodeType && exports;
	var freeModule = typeof module == 'object' && module &&
		!module.nodeType && module;
	var freeGlobal = typeof global == 'object' && global;
	if (
		freeGlobal.global === freeGlobal ||
		freeGlobal.window === freeGlobal ||
		freeGlobal.self === freeGlobal
	) {
		root = freeGlobal;
	}

	/**
	 * The `punycode` object.
	 * @name punycode
	 * @type Object
	 */
	var punycode,

	/** Highest positive signed 32-bit float value */
	maxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1

	/** Bootstring parameters */
	base = 36,
	tMin = 1,
	tMax = 26,
	skew = 38,
	damp = 700,
	initialBias = 72,
	initialN = 128, // 0x80
	delimiter = '-', // '\x2D'

	/** Regular expressions */
	regexPunycode = /^xn--/,
	regexNonASCII = /[^\x20-\x7E]/, // unprintable ASCII chars + non-ASCII chars
	regexSeparators = /[\x2E\u3002\uFF0E\uFF61]/g, // RFC 3490 separators

	/** Error messages */
	errors = {
		'overflow': 'Overflow: input needs wider integers to process',
		'not-basic': 'Illegal input >= 0x80 (not a basic code point)',
		'invalid-input': 'Invalid input'
	},

	/** Convenience shortcuts */
	baseMinusTMin = base - tMin,
	floor = Math.floor,
	stringFromCharCode = String.fromCharCode,

	/** Temporary variable */
	key;

	/*--------------------------------------------------------------------------*/

	/**
	 * A generic error utility function.
	 * @private
	 * @param {String} type The error type.
	 * @returns {Error} Throws a `RangeError` with the applicable error message.
	 */
	function error(type) {
		throw new RangeError(errors[type]);
	}

	/**
	 * A generic `Array#map` utility function.
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} callback The function that gets called for every array
	 * item.
	 * @returns {Array} A new array of values returned by the callback function.
	 */
	function map(array, fn) {
		var length = array.length;
		var result = [];
		while (length--) {
			result[length] = fn(array[length]);
		}
		return result;
	}

	/**
	 * A simple `Array#map`-like wrapper to work with domain name strings or email
	 * addresses.
	 * @private
	 * @param {String} domain The domain name or email address.
	 * @param {Function} callback The function that gets called for every
	 * character.
	 * @returns {Array} A new string of characters returned by the callback
	 * function.
	 */
	function mapDomain(string, fn) {
		var parts = string.split('@');
		var result = '';
		if (parts.length > 1) {
			// In email addresses, only the domain name should be punycoded. Leave
			// the local part (i.e. everything up to `@`) intact.
			result = parts[0] + '@';
			string = parts[1];
		}
		// Avoid `split(regex)` for IE8 compatibility. See #17.
		string = string.replace(regexSeparators, '\x2E');
		var labels = string.split('.');
		var encoded = map(labels, fn).join('.');
		return result + encoded;
	}

	/**
	 * Creates an array containing the numeric code points of each Unicode
	 * character in the string. While JavaScript uses UCS-2 internally,
	 * this function will convert a pair of surrogate halves (each of which
	 * UCS-2 exposes as separate characters) into a single code point,
	 * matching UTF-16.
	 * @see `punycode.ucs2.encode`
	 * @see <https://mathiasbynens.be/notes/javascript-encoding>
	 * @memberOf punycode.ucs2
	 * @name decode
	 * @param {String} string The Unicode input string (UCS-2).
	 * @returns {Array} The new array of code points.
	 */
	function ucs2decode(string) {
		var output = [],
		    counter = 0,
		    length = string.length,
		    value,
		    extra;
		while (counter < length) {
			value = string.charCodeAt(counter++);
			if (value >= 0xD800 && value <= 0xDBFF && counter < length) {
				// high surrogate, and there is a next character
				extra = string.charCodeAt(counter++);
				if ((extra & 0xFC00) == 0xDC00) { // low surrogate
					output.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);
				} else {
					// unmatched surrogate; only append this code unit, in case the next
					// code unit is the high surrogate of a surrogate pair
					output.push(value);
					counter--;
				}
			} else {
				output.push(value);
			}
		}
		return output;
	}

	/**
	 * Creates a string based on an array of numeric code points.
	 * @see `punycode.ucs2.decode`
	 * @memberOf punycode.ucs2
	 * @name encode
	 * @param {Array} codePoints The array of numeric code points.
	 * @returns {String} The new Unicode string (UCS-2).
	 */
	function ucs2encode(array) {
		return map(array, function(value) {
			var output = '';
			if (value > 0xFFFF) {
				value -= 0x10000;
				output += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);
				value = 0xDC00 | value & 0x3FF;
			}
			output += stringFromCharCode(value);
			return output;
		}).join('');
	}

	/**
	 * Converts a basic code point into a digit/integer.
	 * @see `digitToBasic()`
	 * @private
	 * @param {Number} codePoint The basic numeric code point value.
	 * @returns {Number} The numeric value of a basic code point (for use in
	 * representing integers) in the range `0` to `base - 1`, or `base` if
	 * the code point does not represent a value.
	 */
	function basicToDigit(codePoint) {
		if (codePoint - 48 < 10) {
			return codePoint - 22;
		}
		if (codePoint - 65 < 26) {
			return codePoint - 65;
		}
		if (codePoint - 97 < 26) {
			return codePoint - 97;
		}
		return base;
	}

	/**
	 * Converts a digit/integer into a basic code point.
	 * @see `basicToDigit()`
	 * @private
	 * @param {Number} digit The numeric value of a basic code point.
	 * @returns {Number} The basic code point whose value (when used for
	 * representing integers) is `digit`, which needs to be in the range
	 * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is
	 * used; else, the lowercase form is used. The behavior is undefined
	 * if `flag` is non-zero and `digit` has no uppercase form.
	 */
	function digitToBasic(digit, flag) {
		//  0..25 map to ASCII a..z or A..Z
		// 26..35 map to ASCII 0..9
		return digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);
	}

	/**
	 * Bias adaptation function as per section 3.4 of RFC 3492.
	 * https://tools.ietf.org/html/rfc3492#section-3.4
	 * @private
	 */
	function adapt(delta, numPoints, firstTime) {
		var k = 0;
		delta = firstTime ? floor(delta / damp) : delta >> 1;
		delta += floor(delta / numPoints);
		for (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {
			delta = floor(delta / baseMinusTMin);
		}
		return floor(k + (baseMinusTMin + 1) * delta / (delta + skew));
	}

	/**
	 * Converts a Punycode string of ASCII-only symbols to a string of Unicode
	 * symbols.
	 * @memberOf punycode
	 * @param {String} input The Punycode string of ASCII-only symbols.
	 * @returns {String} The resulting string of Unicode symbols.
	 */
	function decode(input) {
		// Don't use UCS-2
		var output = [],
		    inputLength = input.length,
		    out,
		    i = 0,
		    n = initialN,
		    bias = initialBias,
		    basic,
		    j,
		    index,
		    oldi,
		    w,
		    k,
		    digit,
		    t,
		    /** Cached calculation results */
		    baseMinusT;

		// Handle the basic code points: let `basic` be the number of input code
		// points before the last delimiter, or `0` if there is none, then copy
		// the first basic code points to the output.

		basic = input.lastIndexOf(delimiter);
		if (basic < 0) {
			basic = 0;
		}

		for (j = 0; j < basic; ++j) {
			// if it's not a basic code point
			if (input.charCodeAt(j) >= 0x80) {
				error('not-basic');
			}
			output.push(input.charCodeAt(j));
		}

		// Main decoding loop: start just after the last delimiter if any basic code
		// points were copied; start at the beginning otherwise.

		for (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {

			// `index` is the index of the next character to be consumed.
			// Decode a generalized variable-length integer into `delta`,
			// which gets added to `i`. The overflow checking is easier
			// if we increase `i` as we go, then subtract off its starting
			// value at the end to obtain `delta`.
			for (oldi = i, w = 1, k = base; /* no condition */; k += base) {

				if (index >= inputLength) {
					error('invalid-input');
				}

				digit = basicToDigit(input.charCodeAt(index++));

				if (digit >= base || digit > floor((maxInt - i) / w)) {
					error('overflow');
				}

				i += digit * w;
				t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);

				if (digit < t) {
					break;
				}

				baseMinusT = base - t;
				if (w > floor(maxInt / baseMinusT)) {
					error('overflow');
				}

				w *= baseMinusT;

			}

			out = output.length + 1;
			bias = adapt(i - oldi, out, oldi == 0);

			// `i` was supposed to wrap around from `out` to `0`,
			// incrementing `n` each time, so we'll fix that now:
			if (floor(i / out) > maxInt - n) {
				error('overflow');
			}

			n += floor(i / out);
			i %= out;

			// Insert `n` at position `i` of the output
			output.splice(i++, 0, n);

		}

		return ucs2encode(output);
	}

	/**
	 * Converts a string of Unicode symbols (e.g. a domain name label) to a
	 * Punycode string of ASCII-only symbols.
	 * @memberOf punycode
	 * @param {String} input The string of Unicode symbols.
	 * @returns {String} The resulting Punycode string of ASCII-only symbols.
	 */
	function encode(input) {
		var n,
		    delta,
		    handledCPCount,
		    basicLength,
		    bias,
		    j,
		    m,
		    q,
		    k,
		    t,
		    currentValue,
		    output = [],
		    /** `inputLength` will hold the number of code points in `input`. */
		    inputLength,
		    /** Cached calculation results */
		    handledCPCountPlusOne,
		    baseMinusT,
		    qMinusT;

		// Convert the input in UCS-2 to Unicode
		input = ucs2decode(input);

		// Cache the length
		inputLength = input.length;

		// Initialize the state
		n = initialN;
		delta = 0;
		bias = initialBias;

		// Handle the basic code points
		for (j = 0; j < inputLength; ++j) {
			currentValue = input[j];
			if (currentValue < 0x80) {
				output.push(stringFromCharCode(currentValue));
			}
		}

		handledCPCount = basicLength = output.length;

		// `handledCPCount` is the number of code points that have been handled;
		// `basicLength` is the number of basic code points.

		// Finish the basic string - if it is not empty - with a delimiter
		if (basicLength) {
			output.push(delimiter);
		}

		// Main encoding loop:
		while (handledCPCount < inputLength) {

			// All non-basic code points < n have been handled already. Find the next
			// larger one:
			for (m = maxInt, j = 0; j < inputLength; ++j) {
				currentValue = input[j];
				if (currentValue >= n && currentValue < m) {
					m = currentValue;
				}
			}

			// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,
			// but guard against overflow
			handledCPCountPlusOne = handledCPCount + 1;
			if (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {
				error('overflow');
			}

			delta += (m - n) * handledCPCountPlusOne;
			n = m;

			for (j = 0; j < inputLength; ++j) {
				currentValue = input[j];

				if (currentValue < n && ++delta > maxInt) {
					error('overflow');
				}

				if (currentValue == n) {
					// Represent delta as a generalized variable-length integer
					for (q = delta, k = base; /* no condition */; k += base) {
						t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);
						if (q < t) {
							break;
						}
						qMinusT = q - t;
						baseMinusT = base - t;
						output.push(
							stringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))
						);
						q = floor(qMinusT / baseMinusT);
					}

					output.push(stringFromCharCode(digitToBasic(q, 0)));
					bias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);
					delta = 0;
					++handledCPCount;
				}
			}

			++delta;
			++n;

		}
		return output.join('');
	}

	/**
	 * Converts a Punycode string representing a domain name or an email address
	 * to Unicode. Only the Punycoded parts of the input will be converted, i.e.
	 * it doesn't matter if you call it on a string that has already been
	 * converted to Unicode.
	 * @memberOf punycode
	 * @param {String} input The Punycoded domain name or email address to
	 * convert to Unicode.
	 * @returns {String} The Unicode representation of the given Punycode
	 * string.
	 */
	function toUnicode(input) {
		return mapDomain(input, function(string) {
			return regexPunycode.test(string)
				? decode(string.slice(4).toLowerCase())
				: string;
		});
	}

	/**
	 * Converts a Unicode string representing a domain name or an email address to
	 * Punycode. Only the non-ASCII parts of the domain name will be converted,
	 * i.e. it doesn't matter if you call it with a domain that's already in
	 * ASCII.
	 * @memberOf punycode
	 * @param {String} input The domain name or email address to convert, as a
	 * Unicode string.
	 * @returns {String} The Punycode representation of the given domain name or
	 * email address.
	 */
	function toASCII(input) {
		return mapDomain(input, function(string) {
			return regexNonASCII.test(string)
				? 'xn--' + encode(string)
				: string;
		});
	}

	/*--------------------------------------------------------------------------*/

	/** Define the public API */
	punycode = {
		/**
		 * A string representing the current Punycode.js version number.
		 * @memberOf punycode
		 * @type String
		 */
		'version': '1.4.1',
		/**
		 * An object of methods to convert from JavaScript's internal character
		 * representation (UCS-2) to Unicode code points, and back.
		 * @see <https://mathiasbynens.be/notes/javascript-encoding>
		 * @memberOf punycode
		 * @type Object
		 */
		'ucs2': {
			'decode': ucs2decode,
			'encode': ucs2encode
		},
		'decode': decode,
		'encode': encode,
		'toASCII': toASCII,
		'toUnicode': toUnicode
	};

	/** Expose `punycode` */
	// Some AMD build optimizers, like r.js, check for specific condition patterns
	// like the following:
	if (
		true
	) {
		!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return punycode;
		}.call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (freeExports && freeModule) {
		if (module.exports == freeExports) {
			// in Node.js, io.js, or RingoJS v0.8.0+
			freeModule.exports = punycode;
		} else {
			// in Narwhal or RingoJS v0.7.0-
			for (key in punycode) {
				punycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);
			}
		}
	} else {
		// in Rhino or a web browser
		root.punycode = punycode;
	}

}(this));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(89)(module), __webpack_require__(65)))

/***/ }),
/* 443 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// modified from https://github.com/es-shims/es5-shim
var has = Object.prototype.hasOwnProperty;
var toStr = Object.prototype.toString;
var slice = Array.prototype.slice;
var isArgs = __webpack_require__(444);
var isEnumerable = Object.prototype.propertyIsEnumerable;
var hasDontEnumBug = !isEnumerable.call({ toString: null }, 'toString');
var hasProtoEnumBug = isEnumerable.call(function () {}, 'prototype');
var dontEnums = [
	'toString',
	'toLocaleString',
	'valueOf',
	'hasOwnProperty',
	'isPrototypeOf',
	'propertyIsEnumerable',
	'constructor'
];
var equalsConstructorPrototype = function (o) {
	var ctor = o.constructor;
	return ctor && ctor.prototype === o;
};
var excludedKeys = {
	$console: true,
	$external: true,
	$frame: true,
	$frameElement: true,
	$frames: true,
	$innerHeight: true,
	$innerWidth: true,
	$outerHeight: true,
	$outerWidth: true,
	$pageXOffset: true,
	$pageYOffset: true,
	$parent: true,
	$scrollLeft: true,
	$scrollTop: true,
	$scrollX: true,
	$scrollY: true,
	$self: true,
	$webkitIndexedDB: true,
	$webkitStorageInfo: true,
	$window: true
};
var hasAutomationEqualityBug = (function () {
	/* global window */
	if (typeof window === 'undefined') { return false; }
	for (var k in window) {
		try {
			if (!excludedKeys['$' + k] && has.call(window, k) && window[k] !== null && typeof window[k] === 'object') {
				try {
					equalsConstructorPrototype(window[k]);
				} catch (e) {
					return true;
				}
			}
		} catch (e) {
			return true;
		}
	}
	return false;
}());
var equalsConstructorPrototypeIfNotBuggy = function (o) {
	/* global window */
	if (typeof window === 'undefined' || !hasAutomationEqualityBug) {
		return equalsConstructorPrototype(o);
	}
	try {
		return equalsConstructorPrototype(o);
	} catch (e) {
		return false;
	}
};

var keysShim = function keys(object) {
	var isObject = object !== null && typeof object === 'object';
	var isFunction = toStr.call(object) === '[object Function]';
	var isArguments = isArgs(object);
	var isString = isObject && toStr.call(object) === '[object String]';
	var theKeys = [];

	if (!isObject && !isFunction && !isArguments) {
		throw new TypeError('Object.keys called on a non-object');
	}

	var skipProto = hasProtoEnumBug && isFunction;
	if (isString && object.length > 0 && !has.call(object, 0)) {
		for (var i = 0; i < object.length; ++i) {
			theKeys.push(String(i));
		}
	}

	if (isArguments && object.length > 0) {
		for (var j = 0; j < object.length; ++j) {
			theKeys.push(String(j));
		}
	} else {
		for (var name in object) {
			if (!(skipProto && name === 'prototype') && has.call(object, name)) {
				theKeys.push(String(name));
			}
		}
	}

	if (hasDontEnumBug) {
		var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);

		for (var k = 0; k < dontEnums.length; ++k) {
			if (!(skipConstructor && dontEnums[k] === 'constructor') && has.call(object, dontEnums[k])) {
				theKeys.push(dontEnums[k]);
			}
		}
	}
	return theKeys;
};

keysShim.shim = function shimObjectKeys() {
	if (Object.keys) {
		var keysWorksWithArguments = (function () {
			// Safari 5.0 bug
			return (Object.keys(arguments) || '').length === 2;
		}(1, 2));
		if (!keysWorksWithArguments) {
			var originalKeys = Object.keys;
			Object.keys = function keys(object) {
				if (isArgs(object)) {
					return originalKeys(slice.call(object));
				} else {
					return originalKeys(object);
				}
			};
		}
	} else {
		Object.keys = keysShim;
	}
	return Object.keys || keysShim;
};

module.exports = keysShim;


/***/ }),
/* 444 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var toStr = Object.prototype.toString;

module.exports = function isArguments(value) {
	var str = toStr.call(value);
	var isArgs = str === '[object Arguments]';
	if (!isArgs) {
		isArgs = str !== '[object Array]' &&
			value !== null &&
			typeof value === 'object' &&
			typeof value.length === 'number' &&
			value.length >= 0 &&
			toStr.call(value.callee) === '[object Function]';
	}
	return isArgs;
};


/***/ }),
/* 445 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var define = __webpack_require__(164);

var implementation = __webpack_require__(203);
var getPolyfill = __webpack_require__(204);
var shim = __webpack_require__(446);

var polyfill = getPolyfill();

define(polyfill, {
	getPolyfill: getPolyfill,
	implementation: implementation,
	shim: shim
});

module.exports = polyfill;


/***/ }),
/* 446 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var getPolyfill = __webpack_require__(204);
var define = __webpack_require__(164);

module.exports = function shimEntries() {
	var polyfill = getPolyfill();
	define(Object, { entries: polyfill }, {
		entries: function testEntries() {
			return Object.entries !== polyfill;
		}
	});
	return polyfill;
};


/***/ }),
/* 447 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};


/***/ }),
/* 448 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.



var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};


/***/ }),
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */,
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */,
/* 488 */,
/* 489 */,
/* 490 */,
/* 491 */,
/* 492 */,
/* 493 */,
/* 494 */,
/* 495 */,
/* 496 */,
/* 497 */,
/* 498 */,
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */,
/* 515 */,
/* 516 */,
/* 517 */,
/* 518 */,
/* 519 */,
/* 520 */,
/* 521 */,
/* 522 */,
/* 523 */,
/* 524 */,
/* 525 */,
/* 526 */,
/* 527 */,
/* 528 */,
/* 529 */,
/* 530 */,
/* 531 */,
/* 532 */,
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var cov_1fs7kvfmn9 = function () {
  var path = '/data/zeit/next.js/lib/link.js',
      hash = 'e617d85eca13a4b6e38b86d6e5962b2fe83eeef7',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/link.js',
    statementMap: {
      '0': {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 16
        }
      },
      '1': {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 50
        }
      },
      '2': {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 24,
          column: 5
        }
      },
      '3': {
        start: {
          line: 23,
          column: 6
        },
        end: {
          line: 23,
          column: 12
        }
      },
      '4': {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      '5': {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 12
        }
      },
      '6': {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 34
        }
      },
      '7': {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 42
        }
      },
      '8': {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 22
        }
      },
      '9': {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      '10': {
        start: {
          line: 42,
          column: 6
        },
        end: {
          line: 42,
          column: 34
        }
      },
      '11': {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 53,
          column: 8
        }
      },
      '12': {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 28
        }
      },
      '13': {
        start: {
          line: 48,
          column: 22
        },
        end: {
          line: 48,
          column: 28
        }
      },
      '14': {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 41
        }
      },
      '15': {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 41
        }
      },
      '16': {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 55
        }
      },
      '17': {
        start: {
          line: 52,
          column: 32
        },
        end: {
          line: 52,
          column: 55
        }
      },
      '18': {
        start: {
          line: 66,
          column: 6
        },
        end: {
          line: 68,
          column: 7
        }
      },
      '19': {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 53
        }
      },
      '20': {
        start: {
          line: 70,
          column: 6
        },
        end: {
          line: 75,
          column: 7
        }
      },
      '21': {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 47
        }
      },
      '22': {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 140
        }
      },
      '23': {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 40
        }
      },
      '24': {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 22
        }
      },
      '25': {
        start: {
          line: 84,
          column: 2
        },
        end: {
          line: 85,
          column: 44
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 7,
            column: 2
          },
          end: {
            line: 7,
            column: 3
          }
        },
        loc: {
          start: {
            line: 7,
            column: 22
          },
          end: {
            line: 10,
            column: 3
          }
        }
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        },
        loc: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 54,
            column: 3
          }
        }
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        loc: {
          start: {
            line: 47,
            column: 25
          },
          end: {
            line: 50,
            column: 7
          }
        }
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 51,
            column: 13
          },
          end: {
            line: 51,
            column: 14
          }
        },
        loc: {
          start: {
            line: 51,
            column: 22
          },
          end: {
            line: 53,
            column: 7
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 56,
            column: 2
          },
          end: {
            line: 56,
            column: 3
          }
        },
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 79,
            column: 3
          }
        }
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 57,
            column: 55
          },
          end: {
            line: 57,
            column: 56
          }
        },
        loc: {
          start: {
            line: 57,
            column: 66
          },
          end: {
            line: 76,
            column: 5
          }
        }
      },
      '6': {
        name: 'isLocal',
        decl: {
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 82,
            column: 23
          }
        },
        loc: {
          start: {
            line: 82,
            column: 31
          },
          end: {
            line: 86,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        }, {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 21,
            column: 92
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        }, {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 35,
            column: 9
          },
          end: {
            line: 35,
            column: 42
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 28
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 28
          }
        }, {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 28
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 49,
            column: 41
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 49,
            column: 41
          }
        }, {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 49,
            column: 41
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 55
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 55
          }
        }, {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 55
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 62,
            column: 23
          },
          end: {
            line: 62,
            column: 50
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '9': {
        loc: {
          start: {
            line: 66,
            column: 6
          },
          end: {
            line: 68,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 66,
            column: 6
          },
          end: {
            line: 68,
            column: 7
          }
        }, {
          start: {
            line: 66,
            column: 6
          },
          end: {
            line: 68,
            column: 7
          }
        }]
      },
      '10': {
        loc: {
          start: {
            line: 66,
            column: 10
          },
          end: {
            line: 66,
            column: 47
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '11': {
        loc: {
          start: {
            line: 67,
            column: 21
          },
          end: {
            line: 67,
            column: 53
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '12': {
        loc: {
          start: {
            line: 70,
            column: 6
          },
          end: {
            line: 75,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 70,
            column: 6
          },
          end: {
            line: 75,
            column: 7
          }
        }, {
          start: {
            line: 70,
            column: 6
          },
          end: {
            line: 75,
            column: 7
          }
        }]
      },
      '13': {
        loc: {
          start: {
            line: 84,
            column: 9
          },
          end: {
            line: 85,
            column: 44
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0, 0, 0, 0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0],
      '10': [0, 0],
      '11': [0, 0],
      '12': [0, 0],
      '13': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = __webpack_require__(25);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(19);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(20);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(27);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(26);

var _inherits3 = _interopRequireDefault(_inherits2);

var cov_1fs7kvfmn9 = function () {
  var path = '/data/zeit/next.js/lib/link.js',
      hash = '989d6c4423342761e86f3db03f6331bff922e687',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/link.js',
    statementMap: {
      '0': {
        start: {
          line: 8,
          column: 4
        },
        end: {
          line: 8,
          column: 16
        }
      },
      '1': {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 50
        }
      },
      '2': {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 24,
          column: 5
        }
      },
      '3': {
        start: {
          line: 23,
          column: 6
        },
        end: {
          line: 23,
          column: 12
        }
      },
      '4': {
        start: {
          line: 26,
          column: 23
        },
        end: {
          line: 26,
          column: 33
        }
      },
      '5': {
        start: {
          line: 28,
          column: 4
        },
        end: {
          line: 31,
          column: 5
        }
      },
      '6': {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 12
        }
      },
      '7': {
        start: {
          line: 33,
          column: 25
        },
        end: {
          line: 33,
          column: 40
        }
      },
      '8': {
        start: {
          line: 34,
          column: 4
        },
        end: {
          line: 34,
          column: 34
        }
      },
      '9': {
        start: {
          line: 35,
          column: 4
        },
        end: {
          line: 35,
          column: 42
        }
      },
      '10': {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 22
        }
      },
      '11': {
        start: {
          line: 40,
          column: 21
        },
        end: {
          line: 40,
          column: 31
        }
      },
      '12': {
        start: {
          line: 41,
          column: 4
        },
        end: {
          line: 43,
          column: 5
        }
      },
      '13': {
        start: {
          line: 42,
          column: 6
        },
        end: {
          line: 42,
          column: 34
        }
      },
      '14': {
        start: {
          line: 46,
          column: 4
        },
        end: {
          line: 53,
          column: 8
        }
      },
      '15': {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 28
        }
      },
      '16': {
        start: {
          line: 48,
          column: 22
        },
        end: {
          line: 48,
          column: 28
        }
      },
      '17': {
        start: {
          line: 49,
          column: 8
        },
        end: {
          line: 49,
          column: 41
        }
      },
      '18': {
        start: {
          line: 49,
          column: 20
        },
        end: {
          line: 49,
          column: 41
        }
      },
      '19': {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 55
        }
      },
      '20': {
        start: {
          line: 52,
          column: 32
        },
        end: {
          line: 52,
          column: 55
        }
      },
      '21': {
        start: {
          line: 57,
          column: 21
        },
        end: {
          line: 76,
          column: 6
        }
      },
      '22': {
        start: {
          line: 58,
          column: 20
        },
        end: {
          line: 60,
          column: 7
        }
      },
      '23': {
        start: {
          line: 62,
          column: 23
        },
        end: {
          line: 62,
          column: 50
        }
      },
      '24': {
        start: {
          line: 66,
          column: 6
        },
        end: {
          line: 68,
          column: 7
        }
      },
      '25': {
        start: {
          line: 67,
          column: 8
        },
        end: {
          line: 67,
          column: 53
        }
      },
      '26': {
        start: {
          line: 70,
          column: 6
        },
        end: {
          line: 75,
          column: 7
        }
      },
      '27': {
        start: {
          line: 71,
          column: 8
        },
        end: {
          line: 71,
          column: 47
        }
      },
      '28': {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 140
        }
      },
      '29': {
        start: {
          line: 74,
          column: 8
        },
        end: {
          line: 74,
          column: 40
        }
      },
      '30': {
        start: {
          line: 78,
          column: 4
        },
        end: {
          line: 78,
          column: 22
        }
      },
      '31': {
        start: {
          line: 83,
          column: 17
        },
        end: {
          line: 83,
          column: 39
        }
      },
      '32': {
        start: {
          line: 84,
          column: 2
        },
        end: {
          line: 85,
          column: 44
        }
      },
      '33': {
        start: {
          line: 88,
          column: 17
        },
        end: {
          line: 88,
          column: 31
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 7,
            column: 2
          },
          end: {
            line: 7,
            column: 3
          }
        },
        loc: {
          start: {
            line: 7,
            column: 22
          },
          end: {
            line: 10,
            column: 3
          }
        }
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 19,
            column: 3
          }
        },
        loc: {
          start: {
            line: 19,
            column: 18
          },
          end: {
            line: 54,
            column: 3
          }
        }
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 47,
            column: 12
          },
          end: {
            line: 47,
            column: 13
          }
        },
        loc: {
          start: {
            line: 47,
            column: 25
          },
          end: {
            line: 50,
            column: 7
          }
        }
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 51,
            column: 13
          },
          end: {
            line: 51,
            column: 14
          }
        },
        loc: {
          start: {
            line: 51,
            column: 22
          },
          end: {
            line: 53,
            column: 7
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 56,
            column: 2
          },
          end: {
            line: 56,
            column: 3
          }
        },
        loc: {
          start: {
            line: 56,
            column: 12
          },
          end: {
            line: 79,
            column: 3
          }
        }
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 57,
            column: 55
          },
          end: {
            line: 57,
            column: 56
          }
        },
        loc: {
          start: {
            line: 57,
            column: 66
          },
          end: {
            line: 76,
            column: 5
          }
        }
      },
      '6': {
        name: 'isLocal',
        decl: {
          start: {
            line: 82,
            column: 16
          },
          end: {
            line: 82,
            column: 23
          }
        },
        loc: {
          start: {
            line: 82,
            column: 31
          },
          end: {
            line: 86,
            column: 1
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        }, {
          start: {
            line: 20,
            column: 4
          },
          end: {
            line: 24,
            column: 5
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 21,
            column: 92
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 20,
            column: 8
          },
          end: {
            line: 20,
            column: 33
          }
        }, {
          start: {
            line: 21,
            column: 7
          },
          end: {
            line: 21,
            column: 16
          }
        }, {
          start: {
            line: 21,
            column: 20
          },
          end: {
            line: 21,
            column: 29
          }
        }, {
          start: {
            line: 21,
            column: 33
          },
          end: {
            line: 21,
            column: 43
          }
        }, {
          start: {
            line: 21,
            column: 48
          },
          end: {
            line: 21,
            column: 61
          }
        }, {
          start: {
            line: 21,
            column: 65
          },
          end: {
            line: 21,
            column: 90
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        }, {
          start: {
            line: 28,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 35,
            column: 9
          },
          end: {
            line: 35,
            column: 42
          }
        },
        type: 'cond-expr',
        locations: [{
          start: {
            line: 35,
            column: 14
          },
          end: {
            line: 35,
            column: 35
          }
        }, {
          start: {
            line: 35,
            column: 38
          },
          end: {
            line: 35,
            column: 42
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }, {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 43,
            column: 5
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 28
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 28
          }
        }, {
          start: {
            line: 48,
            column: 8
          },
          end: {
            line: 48,
            column: 28
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 49,
            column: 41
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 49,
            column: 41
          }
        }, {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 49,
            column: 41
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 55
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 55
          }
        }, {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 55
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 62,
            column: 23
          },
          end: {
            line: 62,
            column: 50
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 62,
            column: 23
          },
          end: {
            line: 62,
            column: 28
          }
        }, {
          start: {
            line: 62,
            column: 32
          },
          end: {
            line: 62,
            column: 50
          }
        }]
      },
      '9': {
        loc: {
          start: {
            line: 66,
            column: 6
          },
          end: {
            line: 68,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 66,
            column: 6
          },
          end: {
            line: 68,
            column: 7
          }
        }, {
          start: {
            line: 66,
            column: 6
          },
          end: {
            line: 68,
            column: 7
          }
        }]
      },
      '10': {
        loc: {
          start: {
            line: 66,
            column: 10
          },
          end: {
            line: 66,
            column: 47
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 66,
            column: 10
          },
          end: {
            line: 66,
            column: 19
          }
        }, {
          start: {
            line: 66,
            column: 23
          },
          end: {
            line: 66,
            column: 47
          }
        }]
      },
      '11': {
        loc: {
          start: {
            line: 67,
            column: 21
          },
          end: {
            line: 67,
            column: 53
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 67,
            column: 21
          },
          end: {
            line: 67,
            column: 34
          }
        }, {
          start: {
            line: 67,
            column: 38
          },
          end: {
            line: 67,
            column: 53
          }
        }]
      },
      '12': {
        loc: {
          start: {
            line: 70,
            column: 6
          },
          end: {
            line: 75,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 70,
            column: 6
          },
          end: {
            line: 75,
            column: 7
          }
        }, {
          start: {
            line: 70,
            column: 6
          },
          end: {
            line: 75,
            column: 7
          }
        }]
      },
      '13': {
        loc: {
          start: {
            line: 84,
            column: 9
          },
          end: {
            line: 85,
            column: 44
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 84,
            column: 9
          },
          end: {
            line: 84,
            column: 38
          }
        }, {
          start: {
            line: 85,
            column: 4
          },
          end: {
            line: 85,
            column: 44
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0, 0, 0, 0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0],
      '10': [0, 0],
      '11': [0, 0],
      '12': [0, 0],
      '13': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

exports.isLocal = isLocal;

var _url = __webpack_require__(145);

var _react = __webpack_require__(8);

var _react2 = _interopRequireDefault(_react);

var _router = __webpack_require__(139);

var _router2 = _interopRequireDefault(_router);

var _utils = __webpack_require__(64);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Link = function (_Component) {
  (0, _inherits3.default)(Link, _Component);

  function Link(props) {
    (0, _classCallCheck3.default)(this, Link);
    ++cov_1fs7kvfmn9.f[0];
    ++cov_1fs7kvfmn9.f[0];
    ++cov_1fs7kvfmn9.s[0];
    ++cov_1fs7kvfmn9.s[0];

    var _this = (0, _possibleConstructorReturn3.default)(this, (Link.__proto__ || (0, _getPrototypeOf2.default)(Link)).call(this, props));

    ++cov_1fs7kvfmn9.s[1];
    ++cov_1fs7kvfmn9.s[1];

    _this.linkClicked = _this.linkClicked.bind(_this);
    return _this;
  }

  (0, _createClass3.default)(Link, [{
    key: 'linkClicked',
    value: function linkClicked(e) {
      var _this2 = this;

      ++cov_1fs7kvfmn9.f[1];
      ++cov_1fs7kvfmn9.f[1];
      ++cov_1fs7kvfmn9.s[2];
      ++cov_1fs7kvfmn9.s[2];

      if ((++cov_1fs7kvfmn9.b[1][0], (++cov_1fs7kvfmn9.b[1][0], e.target.nodeName === 'A')) && ((++cov_1fs7kvfmn9.b[1][1], (++cov_1fs7kvfmn9.b[1][1], e.metaKey)) || (++cov_1fs7kvfmn9.b[1][2], (++cov_1fs7kvfmn9.b[1][2], e.ctrlKey)) || (++cov_1fs7kvfmn9.b[1][3], (++cov_1fs7kvfmn9.b[1][3], e.shiftKey)) || (++cov_1fs7kvfmn9.b[1][4], (++cov_1fs7kvfmn9.b[1][4], e.nativeEvent)) && (++cov_1fs7kvfmn9.b[1][5], (++cov_1fs7kvfmn9.b[1][5], e.nativeEvent.which === 2)))) {
        ++cov_1fs7kvfmn9.b[0][0];
        ++cov_1fs7kvfmn9.b[0][0];
        ++cov_1fs7kvfmn9.s[3];
        ++cov_1fs7kvfmn9.s[3];

        // ignore click for new tab / new window behavior
        return;
      } else {
        ++cov_1fs7kvfmn9.b[0][1];
        ++cov_1fs7kvfmn9.b[0][1];
      }

      var _ref = (++cov_1fs7kvfmn9.s[4], this.props),
          href = _ref.href,
          as = _ref.as;

      ++cov_1fs7kvfmn9.s[5];
      ++cov_1fs7kvfmn9.s[4];


      if (!isLocal(href)) {
        ++cov_1fs7kvfmn9.b[2][0];
        ++cov_1fs7kvfmn9.b[2][0];
        ++cov_1fs7kvfmn9.s[6];
        ++cov_1fs7kvfmn9.s[5];

        // ignore click if it's outside our scope
        return;
      } else {
        ++cov_1fs7kvfmn9.b[2][1];
        ++cov_1fs7kvfmn9.b[2][1];
      }

      var _ref2 = (++cov_1fs7kvfmn9.s[7], window.location),
          pathname = _ref2.pathname;

      ++cov_1fs7kvfmn9.s[8];
      ++cov_1fs7kvfmn9.s[6];

      href = (0, _url.resolve)(pathname, href);
      ++cov_1fs7kvfmn9.s[9];
      ++cov_1fs7kvfmn9.s[7];
      as = as ? (++cov_1fs7kvfmn9.b[3][0], (++cov_1fs7kvfmn9.b[3][0], (0, _url.resolve)(pathname, as))) : (++cov_1fs7kvfmn9.b[3][1], (++cov_1fs7kvfmn9.b[3][1], href));

      ++cov_1fs7kvfmn9.s[10];
      ++cov_1fs7kvfmn9.s[8];
      e.preventDefault();

      //  avoid scroll for urls with anchor refs

      var _ref3 = (++cov_1fs7kvfmn9.s[11], this.props),
          scroll = _ref3.scroll;

      ++cov_1fs7kvfmn9.s[12];
      ++cov_1fs7kvfmn9.s[9];

      if (scroll == null) {
        ++cov_1fs7kvfmn9.b[4][0];
        ++cov_1fs7kvfmn9.b[4][0];
        ++cov_1fs7kvfmn9.s[13];
        ++cov_1fs7kvfmn9.s[10];

        scroll = as.indexOf('#') < 0;
      } else {
        ++cov_1fs7kvfmn9.b[4][1];
        ++cov_1fs7kvfmn9.b[4][1];
      }

      // straight up redirect
      ++cov_1fs7kvfmn9.s[14];
      ++cov_1fs7kvfmn9.s[11];
      _router2.default.push(href, as).then(function (success) {
        ++cov_1fs7kvfmn9.f[2];
        ++cov_1fs7kvfmn9.f[2];
        ++cov_1fs7kvfmn9.s[15];
        ++cov_1fs7kvfmn9.s[12];

        if (!success) {
            ++cov_1fs7kvfmn9.b[5][0];
            ++cov_1fs7kvfmn9.b[5][0];
            ++cov_1fs7kvfmn9.s[16];
            ++cov_1fs7kvfmn9.s[13];
            return;
          } else {
          ++cov_1fs7kvfmn9.b[5][1];
          ++cov_1fs7kvfmn9.b[5][1];
        }++cov_1fs7kvfmn9.s[17];
        ++cov_1fs7kvfmn9.s[14];
        if (scroll) {
            ++cov_1fs7kvfmn9.b[6][0];
            ++cov_1fs7kvfmn9.b[6][0];
            ++cov_1fs7kvfmn9.s[18];
            ++cov_1fs7kvfmn9.s[15];
            window.scrollTo(0, 0);
          } else {
          ++cov_1fs7kvfmn9.b[6][1];
          ++cov_1fs7kvfmn9.b[6][1];
        }
      }).catch(function (err) {
        ++cov_1fs7kvfmn9.f[3];
        ++cov_1fs7kvfmn9.f[3];
        ++cov_1fs7kvfmn9.s[19];
        ++cov_1fs7kvfmn9.s[16];

        if (_this2.props.onError) {
            ++cov_1fs7kvfmn9.b[7][0];
            ++cov_1fs7kvfmn9.b[7][0];
            ++cov_1fs7kvfmn9.s[20];
            ++cov_1fs7kvfmn9.s[17];
            _this2.props.onError(err);
          } else {
          ++cov_1fs7kvfmn9.b[7][1];
          ++cov_1fs7kvfmn9.b[7][1];
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      ++cov_1fs7kvfmn9.f[4];
      ++cov_1fs7kvfmn9.f[4];

      var children = (++cov_1fs7kvfmn9.s[21], _react.Children.map(this.props.children, function (child) {
        ++cov_1fs7kvfmn9.f[5];
        ++cov_1fs7kvfmn9.f[5];

        var props = (++cov_1fs7kvfmn9.s[22], {
          onClick: _this3.linkClicked
        });

        var isAnchor = (++cov_1fs7kvfmn9.s[23], (++cov_1fs7kvfmn9.b[8][0], (++cov_1fs7kvfmn9.b[8][0], child)) && (++cov_1fs7kvfmn9.b[8][1], (++cov_1fs7kvfmn9.b[8][1], child.type === 'a')));

        // if child does not specify a href, specify it
        // so that repetition is not needed by the user
        ++cov_1fs7kvfmn9.s[24];
        ++cov_1fs7kvfmn9.s[18];
        if ((++cov_1fs7kvfmn9.b[10][0], (++cov_1fs7kvfmn9.b[10][0], !isAnchor)) || (++cov_1fs7kvfmn9.b[10][1], (++cov_1fs7kvfmn9.b[10][1], !('href' in child.props)))) {
          ++cov_1fs7kvfmn9.b[9][0];
          ++cov_1fs7kvfmn9.b[9][0];
          ++cov_1fs7kvfmn9.s[25];
          ++cov_1fs7kvfmn9.s[19];

          props.href = (++cov_1fs7kvfmn9.b[11][0], (++cov_1fs7kvfmn9.b[11][0], _this3.props.as)) || (++cov_1fs7kvfmn9.b[11][1], (++cov_1fs7kvfmn9.b[11][1], _this3.props.href));
        } else {
          ++cov_1fs7kvfmn9.b[9][1];
          ++cov_1fs7kvfmn9.b[9][1];
        }

        ++cov_1fs7kvfmn9.s[26];
        ++cov_1fs7kvfmn9.s[20];
        if (isAnchor) {
          ++cov_1fs7kvfmn9.b[12][0];
          ++cov_1fs7kvfmn9.b[12][0];
          ++cov_1fs7kvfmn9.s[27];
          ++cov_1fs7kvfmn9.s[21];

          return _react2.default.cloneElement(child, props);
        } else {
          ++cov_1fs7kvfmn9.b[12][1];
          ++cov_1fs7kvfmn9.b[12][1];
          ++cov_1fs7kvfmn9.s[28];
          ++cov_1fs7kvfmn9.s[22];

          warnLink('Warning: Every Link must be the parent of an anchor, this pattern is deprecated. Please add an anchor inside the <Link>.');
          ++cov_1fs7kvfmn9.s[29];
          ++cov_1fs7kvfmn9.s[23];
          return _react2.default.createElement(
            'a',
            props,
            child
          );
        }
      }));

      ++cov_1fs7kvfmn9.s[30];
      ++cov_1fs7kvfmn9.s[24];
      return children[0];
    }
  }]);
  return Link;
}(_react.Component);

Link.propTypes = {
  children: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.element]).isRequired
};
exports.default = Link;
function isLocal(href) {
  ++cov_1fs7kvfmn9.f[6];
  ++cov_1fs7kvfmn9.f[6];

  var origin = (++cov_1fs7kvfmn9.s[31], window.location.origin);
  ++cov_1fs7kvfmn9.s[32];
  ++cov_1fs7kvfmn9.s[25];
  return (++cov_1fs7kvfmn9.b[13][0], (++cov_1fs7kvfmn9.b[13][0], !/^(https?:)?\/\//.test(href))) || (++cov_1fs7kvfmn9.b[13][1], (++cov_1fs7kvfmn9.b[13][1], origin === href.substr(0, origin.length)));
}

var warnLink = (++cov_1fs7kvfmn9.s[33], (0, _utils.execOnce)(_utils.warn));

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/data/zeit/next.js/dist/lib/link.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/data/zeit/next.js/dist/lib/link.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var cov_18qoxqy2gd = function () {
  var path = '/data/zeit/next.js/lib/prefetch.js',
      hash = '60caaf050fe5f1ec6f6bc1d53cb8b5c776970eb4',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/prefetch.js',
    statementMap: {
      '0': {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 15
        }
      },
      '1': {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 22
        }
      },
      '2': {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 41
        }
      },
      '3': {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 34
        }
      },
      '4': {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      '5': {
        start: {
          line: 15,
          column: 6
        },
        end: {
          line: 15,
          column: 41
        }
      },
      '6': {
        start: {
          line: 15,
          column: 35
        },
        end: {
          line: 15,
          column: 41
        }
      },
      '7': {
        start: {
          line: 16,
          column: 6
        },
        end: {
          line: 18,
          column: 7
        }
      },
      '8': {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 42
        }
      },
      '9': {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 22
        }
      },
      '10': {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 43,
          column: 6
        }
      },
      '11': {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 37,
          column: 7
        }
      },
      '12': {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 43
        }
      },
      '13': {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 36,
          column: 10
        }
      },
      '14': {
        start: {
          line: 35,
          column: 10
        },
        end: {
          line: 35,
          column: 45
        }
      },
      '15': {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 35
        }
      },
      '16': {
        start: {
          line: 40,
          column: 17
        },
        end: {
          line: 40,
          column: 35
        }
      },
      '17': {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 24
        }
      },
      '18': {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 58,
          column: 5
        }
      },
      '19': {
        start: {
          line: 51,
          column: 6
        },
        end: {
          line: 55,
          column: 7
        }
      },
      '20': {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 22
        }
      },
      '21': {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 29
        }
      },
      '22': {
        start: {
          line: 57,
          column: 6
        },
        end: {
          line: 57,
          column: 30
        }
      },
      '23': {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 62
        }
      },
      '24': {
        start: {
          line: 64,
          column: 18
        },
        end: {
          line: 66,
          column: 5
        }
      },
      '25': {
        start: {
          line: 65,
          column: 6
        },
        end: {
          line: 65,
          column: 41
        }
      },
      '26': {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 72,
          column: 5
        }
      },
      '27': {
        start: {
          line: 69,
          column: 6
        },
        end: {
          line: 69,
          column: 13
        }
      },
      '28': {
        start: {
          line: 71,
          column: 6
        },
        end: {
          line: 71,
          column: 56
        }
      },
      '29': {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      '30': {
        start: {
          line: 77,
          column: 6
        },
        end: {
          line: 77,
          column: 12
        }
      },
      '31': {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 43
        }
      },
      '32': {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 60
        }
      },
      '33': {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 96,
          column: 6
        }
      },
      '34': {
        start: {
          line: 92,
          column: 6
        },
        end: {
          line: 92,
          column: 24
        }
      },
      '35': {
        start: {
          line: 92,
          column: 15
        },
        end: {
          line: 92,
          column: 24
        }
      },
      '36': {
        start: {
          line: 93,
          column: 6
        },
        end: {
          line: 93,
          column: 44
        }
      },
      '37': {
        start: {
          line: 94,
          column: 6
        },
        end: {
          line: 94,
          column: 58
        }
      },
      '38': {
        start: {
          line: 94,
          column: 53
        },
        end: {
          line: 94,
          column: 57
        }
      },
      '39': {
        start: {
          line: 95,
          column: 6
        },
        end: {
          line: 95,
          column: 43
        }
      },
      '40': {
        start: {
          line: 101,
          column: 2
        },
        end: {
          line: 101,
          column: 70
        }
      },
      '41': {
        start: {
          line: 107,
          column: 0
        },
        end: {
          line: 109,
          column: 1
        }
      },
      '42': {
        start: {
          line: 108,
          column: 2
        },
        end: {
          line: 108,
          column: 29
        }
      },
      '43': {
        start: {
          line: 115,
          column: 2
        },
        end: {
          line: 115,
          column: 12
        }
      },
      '44': {
        start: {
          line: 119,
          column: 2
        },
        end: {
          line: 119,
          column: 40
        }
      },
      '45': {
        start: {
          line: 119,
          column: 34
        },
        end: {
          line: 119,
          column: 40
        }
      },
      '46': {
        start: {
          line: 120,
          column: 2
        },
        end: {
          line: 120,
          column: 28
        }
      },
      '47': {
        start: {
          line: 120,
          column: 22
        },
        end: {
          line: 120,
          column: 28
        }
      },
      '48': {
        start: {
          line: 123,
          column: 2
        },
        end: {
          line: 123,
          column: 31
        }
      },
      '49': {
        start: {
          line: 126,
          column: 2
        },
        end: {
          line: 128,
          column: 3
        }
      },
      '50': {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 74
        }
      },
      '51': {
        start: {
          line: 130,
          column: 2
        },
        end: {
          line: 130,
          column: 29
        }
      },
      '52': {
        start: {
          line: 135,
          column: 2
        },
        end: {
          line: 135,
          column: 35
        }
      },
      '53': {
        start: {
          line: 135,
          column: 29
        },
        end: {
          line: 135,
          column: 35
        }
      },
      '54': {
        start: {
          line: 137,
          column: 2
        },
        end: {
          line: 137,
          column: 29
        }
      },
      '55': {
        start: {
          line: 138,
          column: 2
        },
        end: {
          line: 138,
          column: 22
        }
      },
      '56': {
        start: {
          line: 144,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      '57': {
        start: {
          line: 145,
          column: 6
        },
        end: {
          line: 145,
          column: 20
        }
      },
      '58': {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 148,
          column: 37
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 8,
            column: 3
          }
        },
        loc: {
          start: {
            line: 8,
            column: 17
          },
          end: {
            line: 27,
            column: 3
          }
        }
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 14,
            column: 56
          },
          end: {
            line: 14,
            column: 57
          }
        },
        loc: {
          start: {
            line: 14,
            column: 70
          },
          end: {
            line: 19,
            column: 5
          }
        }
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        },
        loc: {
          start: {
            line: 29,
            column: 17
          },
          end: {
            line: 44,
            column: 3
          }
        }
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 30,
            column: 23
          },
          end: {
            line: 30,
            column: 24
          }
        },
        loc: {
          start: {
            line: 30,
            column: 44
          },
          end: {
            line: 43,
            column: 5
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 34,
            column: 46
          },
          end: {
            line: 34,
            column: 47
          }
        },
        loc: {
          start: {
            line: 34,
            column: 52
          },
          end: {
            line: 36,
            column: 9
          }
        }
      },
      '5': {
        name: 'handleCallback',
        decl: {
          start: {
            line: 39,
            column: 15
          },
          end: {
            line: 39,
            column: 29
          }
        },
        loc: {
          start: {
            line: 39,
            column: 36
          },
          end: {
            line: 42,
            column: 7
          }
        }
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        },
        loc: {
          start: {
            line: 46,
            column: 33
          },
          end: {
            line: 61,
            column: 3
          }
        }
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 46,
            column: 23
          },
          end: {
            line: 46,
            column: 24
          }
        },
        loc: {
          start: {
            line: 46,
            column: 29
          },
          end: {
            line: 46,
            column: 31
          }
        }
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 50,
            column: 24
          },
          end: {
            line: 50,
            column: 25
          }
        },
        loc: {
          start: {
            line: 50,
            column: 34
          },
          end: {
            line: 58,
            column: 5
          }
        }
      },
      '9': {
        name: '(anonymous_9)',
        decl: {
          start: {
            line: 63,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        },
        loc: {
          start: {
            line: 63,
            column: 19
          },
          end: {
            line: 73,
            column: 3
          }
        }
      },
      '10': {
        name: '(anonymous_10)',
        decl: {
          start: {
            line: 64,
            column: 18
          },
          end: {
            line: 64,
            column: 19
          }
        },
        loc: {
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 66,
            column: 5
          }
        }
      },
      '11': {
        name: '(anonymous_11)',
        decl: {
          start: {
            line: 75,
            column: 2
          },
          end: {
            line: 75,
            column: 3
          }
        },
        loc: {
          start: {
            line: 75,
            column: 23
          },
          end: {
            line: 97,
            column: 3
          }
        }
      },
      '12': {
        name: '(anonymous_12)',
        decl: {
          start: {
            line: 91,
            column: 21
          },
          end: {
            line: 91,
            column: 22
          }
        },
        loc: {
          start: {
            line: 91,
            column: 30
          },
          end: {
            line: 96,
            column: 5
          }
        }
      },
      '13': {
        name: '(anonymous_13)',
        decl: {
          start: {
            line: 94,
            column: 47
          },
          end: {
            line: 94,
            column: 48
          }
        },
        loc: {
          start: {
            line: 94,
            column: 53
          },
          end: {
            line: 94,
            column: 57
          }
        }
      },
      '14': {
        name: 'hasServiceWorkerSupport',
        decl: {
          start: {
            line: 100,
            column: 9
          },
          end: {
            line: 100,
            column: 32
          }
        },
        loc: {
          start: {
            line: 100,
            column: 36
          },
          end: {
            line: 102,
            column: 1
          }
        }
      },
      '15': {
        name: 'getPrefetchUrl',
        decl: {
          start: {
            line: 111,
            column: 9
          },
          end: {
            line: 111,
            column: 23
          }
        },
        loc: {
          start: {
            line: 111,
            column: 31
          },
          end: {
            line: 116,
            column: 1
          }
        }
      },
      '16': {
        name: 'prefetch',
        decl: {
          start: {
            line: 118,
            column: 22
          },
          end: {
            line: 118,
            column: 30
          }
        },
        loc: {
          start: {
            line: 118,
            column: 38
          },
          end: {
            line: 131,
            column: 1
          }
        }
      },
      '17': {
        name: 'reloadIfPrefetched',
        decl: {
          start: {
            line: 133,
            column: 22
          },
          end: {
            line: 133,
            column: 40
          }
        },
        loc: {
          start: {
            line: 133,
            column: 48
          },
          end: {
            line: 139,
            column: 1
          }
        }
      },
      '18': {
        name: '(anonymous_18)',
        decl: {
          start: {
            line: 142,
            column: 2
          },
          end: {
            line: 142,
            column: 3
          }
        },
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 149,
            column: 3
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 15,
            column: 6
          },
          end: {
            line: 15,
            column: 41
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 15,
            column: 6
          },
          end: {
            line: 15,
            column: 41
          }
        }, {
          start: {
            line: 15,
            column: 6
          },
          end: {
            line: 15,
            column: 41
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 16,
            column: 6
          },
          end: {
            line: 18,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 16,
            column: 6
          },
          end: {
            line: 18,
            column: 7
          }
        }, {
          start: {
            line: 16,
            column: 6
          },
          end: {
            line: 18,
            column: 7
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 37,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 37,
            column: 7
          }
        }, {
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 37,
            column: 7
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 35
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 35
          }
        }, {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 35
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 46,
            column: 18
          },
          end: {
            line: 46,
            column: 31
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 51,
            column: 6
          },
          end: {
            line: 55,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 51,
            column: 6
          },
          end: {
            line: 55,
            column: 7
          }
        }, {
          start: {
            line: 51,
            column: 6
          },
          end: {
            line: 55,
            column: 7
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        }, {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        }, {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 92,
            column: 6
          },
          end: {
            line: 92,
            column: 24
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 92,
            column: 6
          },
          end: {
            line: 92,
            column: 24
          }
        }, {
          start: {
            line: 92,
            column: 6
          },
          end: {
            line: 92,
            column: 24
          }
        }]
      },
      '9': {
        loc: {
          start: {
            line: 101,
            column: 10
          },
          end: {
            line: 101,
            column: 69
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '10': {
        loc: {
          start: {
            line: 107,
            column: 0
          },
          end: {
            line: 109,
            column: 1
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 107,
            column: 0
          },
          end: {
            line: 109,
            column: 1
          }
        }, {
          start: {
            line: 107,
            column: 0
          },
          end: {
            line: 109,
            column: 1
          }
        }]
      },
      '11': {
        loc: {
          start: {
            line: 119,
            column: 2
          },
          end: {
            line: 119,
            column: 40
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 119,
            column: 2
          },
          end: {
            line: 119,
            column: 40
          }
        }, {
          start: {
            line: 119,
            column: 2
          },
          end: {
            line: 119,
            column: 40
          }
        }]
      },
      '12': {
        loc: {
          start: {
            line: 120,
            column: 2
          },
          end: {
            line: 120,
            column: 28
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 120,
            column: 2
          },
          end: {
            line: 120,
            column: 28
          }
        }, {
          start: {
            line: 120,
            column: 2
          },
          end: {
            line: 120,
            column: 28
          }
        }]
      },
      '13': {
        loc: {
          start: {
            line: 126,
            column: 2
          },
          end: {
            line: 128,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 126,
            column: 2
          },
          end: {
            line: 128,
            column: 3
          }
        }, {
          start: {
            line: 126,
            column: 2
          },
          end: {
            line: 128,
            column: 3
          }
        }]
      },
      '14': {
        loc: {
          start: {
            line: 135,
            column: 2
          },
          end: {
            line: 135,
            column: 35
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 135,
            column: 2
          },
          end: {
            line: 135,
            column: 35
          }
        }, {
          start: {
            line: 135,
            column: 2
          },
          end: {
            line: 135,
            column: 35
          }
        }]
      },
      '15': {
        loc: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }, {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0,
      '42': 0,
      '43': 0,
      '44': 0,
      '45': 0,
      '46': 0,
      '47': 0,
      '48': 0,
      '49': 0,
      '50': 0,
      '51': 0,
      '52': 0,
      '53': 0,
      '54': 0,
      '55': 0,
      '56': 0,
      '57': 0,
      '58': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0],
      '10': [0, 0],
      '11': [0, 0],
      '12': [0, 0],
      '13': [0, 0],
      '14': [0, 0],
      '15': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.reloadIfPrefetched = exports.prefetch = undefined;

var _getPrototypeOf = __webpack_require__(25);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _possibleConstructorReturn2 = __webpack_require__(27);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(26);

var _inherits3 = _interopRequireDefault(_inherits2);

var _regenerator = __webpack_require__(67);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = __webpack_require__(66);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = __webpack_require__(94);

var _extends3 = _interopRequireDefault(_extends2);

var _promise = __webpack_require__(47);

var _promise2 = _interopRequireDefault(_promise);

var _classCallCheck2 = __webpack_require__(19);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(20);

var _createClass3 = _interopRequireDefault(_createClass2);

var cov_18qoxqy2gd = function () {
  var path = '/data/zeit/next.js/lib/prefetch.js',
      hash = '2241593ea6b03aa408387ed11ed0c0bca46e5bf3',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/prefetch.js',
    statementMap: {
      '0': {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 15
        }
      },
      '1': {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 22
        }
      },
      '2': {
        start: {
          line: 11,
          column: 4
        },
        end: {
          line: 11,
          column: 41
        }
      },
      '3': {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 34
        }
      },
      '4': {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 19,
          column: 6
        }
      },
      '5': {
        start: {
          line: 15,
          column: 6
        },
        end: {
          line: 15,
          column: 41
        }
      },
      '6': {
        start: {
          line: 15,
          column: 35
        },
        end: {
          line: 15,
          column: 41
        }
      },
      '7': {
        start: {
          line: 16,
          column: 6
        },
        end: {
          line: 18,
          column: 7
        }
      },
      '8': {
        start: {
          line: 17,
          column: 8
        },
        end: {
          line: 17,
          column: 42
        }
      },
      '9': {
        start: {
          line: 26,
          column: 4
        },
        end: {
          line: 26,
          column: 22
        }
      },
      '10': {
        start: {
          line: 30,
          column: 4
        },
        end: {
          line: 43,
          column: 6
        }
      },
      '11': {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 37,
          column: 7
        }
      },
      '12': {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 43
        }
      },
      '13': {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 36,
          column: 10
        }
      },
      '14': {
        start: {
          line: 35,
          column: 10
        },
        end: {
          line: 35,
          column: 45
        }
      },
      '15': {
        start: {
          line: 40,
          column: 8
        },
        end: {
          line: 40,
          column: 35
        }
      },
      '16': {
        start: {
          line: 40,
          column: 17
        },
        end: {
          line: 40,
          column: 35
        }
      },
      '17': {
        start: {
          line: 41,
          column: 8
        },
        end: {
          line: 41,
          column: 24
        }
      },
      '18': {
        start: {
          line: 47,
          column: 15
        },
        end: {
          line: 47,
          column: 25
        }
      },
      '19': {
        start: {
          line: 48,
          column: 23
        },
        end: {
          line: 48,
          column: 41
        }
      },
      '20': {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 58,
          column: 5
        }
      },
      '21': {
        start: {
          line: 51,
          column: 6
        },
        end: {
          line: 55,
          column: 7
        }
      },
      '22': {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 52,
          column: 22
        }
      },
      '23': {
        start: {
          line: 54,
          column: 8
        },
        end: {
          line: 54,
          column: 29
        }
      },
      '24': {
        start: {
          line: 57,
          column: 6
        },
        end: {
          line: 57,
          column: 30
        }
      },
      '25': {
        start: {
          line: 60,
          column: 4
        },
        end: {
          line: 60,
          column: 62
        }
      },
      '26': {
        start: {
          line: 64,
          column: 18
        },
        end: {
          line: 66,
          column: 5
        }
      },
      '27': {
        start: {
          line: 65,
          column: 6
        },
        end: {
          line: 65,
          column: 41
        }
      },
      '28': {
        start: {
          line: 68,
          column: 4
        },
        end: {
          line: 72,
          column: 5
        }
      },
      '29': {
        start: {
          line: 69,
          column: 6
        },
        end: {
          line: 69,
          column: 13
        }
      },
      '30': {
        start: {
          line: 71,
          column: 6
        },
        end: {
          line: 71,
          column: 56
        }
      },
      '31': {
        start: {
          line: 76,
          column: 4
        },
        end: {
          line: 78,
          column: 5
        }
      },
      '32': {
        start: {
          line: 77,
          column: 6
        },
        end: {
          line: 77,
          column: 12
        }
      },
      '33': {
        start: {
          line: 80,
          column: 4
        },
        end: {
          line: 80,
          column: 43
        }
      },
      '34': {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 60
        }
      },
      '35': {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 96,
          column: 6
        }
      },
      '36': {
        start: {
          line: 92,
          column: 6
        },
        end: {
          line: 92,
          column: 24
        }
      },
      '37': {
        start: {
          line: 92,
          column: 15
        },
        end: {
          line: 92,
          column: 24
        }
      },
      '38': {
        start: {
          line: 93,
          column: 6
        },
        end: {
          line: 93,
          column: 44
        }
      },
      '39': {
        start: {
          line: 94,
          column: 6
        },
        end: {
          line: 94,
          column: 58
        }
      },
      '40': {
        start: {
          line: 94,
          column: 53
        },
        end: {
          line: 94,
          column: 57
        }
      },
      '41': {
        start: {
          line: 95,
          column: 6
        },
        end: {
          line: 95,
          column: 43
        }
      },
      '42': {
        start: {
          line: 101,
          column: 2
        },
        end: {
          line: 101,
          column: 70
        }
      },
      '43': {
        start: {
          line: 104,
          column: 24
        },
        end: {
          line: 104,
          column: 26
        }
      },
      '44': {
        start: {
          line: 107,
          column: 0
        },
        end: {
          line: 109,
          column: 1
        }
      },
      '45': {
        start: {
          line: 108,
          column: 2
        },
        end: {
          line: 108,
          column: 29
        }
      },
      '46': {
        start: {
          line: 112,
          column: 21
        },
        end: {
          line: 112,
          column: 35
        }
      },
      '47': {
        start: {
          line: 113,
          column: 14
        },
        end: {
          line: 113,
          column: 64
        }
      },
      '48': {
        start: {
          line: 115,
          column: 2
        },
        end: {
          line: 115,
          column: 12
        }
      },
      '49': {
        start: {
          line: 119,
          column: 2
        },
        end: {
          line: 119,
          column: 40
        }
      },
      '50': {
        start: {
          line: 119,
          column: 34
        },
        end: {
          line: 119,
          column: 40
        }
      },
      '51': {
        start: {
          line: 120,
          column: 2
        },
        end: {
          line: 120,
          column: 28
        }
      },
      '52': {
        start: {
          line: 120,
          column: 22
        },
        end: {
          line: 120,
          column: 28
        }
      },
      '53': {
        start: {
          line: 123,
          column: 2
        },
        end: {
          line: 123,
          column: 31
        }
      },
      '54': {
        start: {
          line: 125,
          column: 14
        },
        end: {
          line: 125,
          column: 34
        }
      },
      '55': {
        start: {
          line: 126,
          column: 2
        },
        end: {
          line: 128,
          column: 3
        }
      },
      '56': {
        start: {
          line: 127,
          column: 4
        },
        end: {
          line: 127,
          column: 74
        }
      },
      '57': {
        start: {
          line: 130,
          column: 2
        },
        end: {
          line: 130,
          column: 29
        }
      },
      '58': {
        start: {
          line: 134,
          column: 14
        },
        end: {
          line: 134,
          column: 34
        }
      },
      '59': {
        start: {
          line: 135,
          column: 2
        },
        end: {
          line: 135,
          column: 35
        }
      },
      '60': {
        start: {
          line: 135,
          column: 29
        },
        end: {
          line: 135,
          column: 35
        }
      },
      '61': {
        start: {
          line: 137,
          column: 2
        },
        end: {
          line: 137,
          column: 29
        }
      },
      '62': {
        start: {
          line: 138,
          column: 2
        },
        end: {
          line: 138,
          column: 22
        }
      },
      '63': {
        start: {
          line: 143,
          column: 21
        },
        end: {
          line: 143,
          column: 31
        }
      },
      '64': {
        start: {
          line: 144,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      '65': {
        start: {
          line: 145,
          column: 6
        },
        end: {
          line: 145,
          column: 20
        }
      },
      '66': {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 148,
          column: 37
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 8,
            column: 3
          }
        },
        loc: {
          start: {
            line: 8,
            column: 17
          },
          end: {
            line: 27,
            column: 3
          }
        }
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 14,
            column: 56
          },
          end: {
            line: 14,
            column: 57
          }
        },
        loc: {
          start: {
            line: 14,
            column: 70
          },
          end: {
            line: 19,
            column: 5
          }
        }
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 29,
            column: 3
          }
        },
        loc: {
          start: {
            line: 29,
            column: 17
          },
          end: {
            line: 44,
            column: 3
          }
        }
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 30,
            column: 23
          },
          end: {
            line: 30,
            column: 24
          }
        },
        loc: {
          start: {
            line: 30,
            column: 44
          },
          end: {
            line: 43,
            column: 5
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 34,
            column: 46
          },
          end: {
            line: 34,
            column: 47
          }
        },
        loc: {
          start: {
            line: 34,
            column: 52
          },
          end: {
            line: 36,
            column: 9
          }
        }
      },
      '5': {
        name: 'handleCallback',
        decl: {
          start: {
            line: 39,
            column: 15
          },
          end: {
            line: 39,
            column: 29
          }
        },
        loc: {
          start: {
            line: 39,
            column: 36
          },
          end: {
            line: 42,
            column: 7
          }
        }
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 46,
            column: 2
          },
          end: {
            line: 46,
            column: 3
          }
        },
        loc: {
          start: {
            line: 46,
            column: 33
          },
          end: {
            line: 61,
            column: 3
          }
        }
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 46,
            column: 23
          },
          end: {
            line: 46,
            column: 24
          }
        },
        loc: {
          start: {
            line: 46,
            column: 29
          },
          end: {
            line: 46,
            column: 31
          }
        }
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 50,
            column: 24
          },
          end: {
            line: 50,
            column: 25
          }
        },
        loc: {
          start: {
            line: 50,
            column: 34
          },
          end: {
            line: 58,
            column: 5
          }
        }
      },
      '9': {
        name: '(anonymous_9)',
        decl: {
          start: {
            line: 63,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        },
        loc: {
          start: {
            line: 63,
            column: 19
          },
          end: {
            line: 73,
            column: 3
          }
        }
      },
      '10': {
        name: '(anonymous_10)',
        decl: {
          start: {
            line: 64,
            column: 18
          },
          end: {
            line: 64,
            column: 19
          }
        },
        loc: {
          start: {
            line: 64,
            column: 24
          },
          end: {
            line: 66,
            column: 5
          }
        }
      },
      '11': {
        name: '(anonymous_11)',
        decl: {
          start: {
            line: 75,
            column: 2
          },
          end: {
            line: 75,
            column: 3
          }
        },
        loc: {
          start: {
            line: 75,
            column: 23
          },
          end: {
            line: 97,
            column: 3
          }
        }
      },
      '12': {
        name: '(anonymous_12)',
        decl: {
          start: {
            line: 91,
            column: 21
          },
          end: {
            line: 91,
            column: 22
          }
        },
        loc: {
          start: {
            line: 91,
            column: 30
          },
          end: {
            line: 96,
            column: 5
          }
        }
      },
      '13': {
        name: '(anonymous_13)',
        decl: {
          start: {
            line: 94,
            column: 47
          },
          end: {
            line: 94,
            column: 48
          }
        },
        loc: {
          start: {
            line: 94,
            column: 53
          },
          end: {
            line: 94,
            column: 57
          }
        }
      },
      '14': {
        name: 'hasServiceWorkerSupport',
        decl: {
          start: {
            line: 100,
            column: 9
          },
          end: {
            line: 100,
            column: 32
          }
        },
        loc: {
          start: {
            line: 100,
            column: 36
          },
          end: {
            line: 102,
            column: 1
          }
        }
      },
      '15': {
        name: 'getPrefetchUrl',
        decl: {
          start: {
            line: 111,
            column: 9
          },
          end: {
            line: 111,
            column: 23
          }
        },
        loc: {
          start: {
            line: 111,
            column: 31
          },
          end: {
            line: 116,
            column: 1
          }
        }
      },
      '16': {
        name: 'prefetch',
        decl: {
          start: {
            line: 118,
            column: 22
          },
          end: {
            line: 118,
            column: 30
          }
        },
        loc: {
          start: {
            line: 118,
            column: 38
          },
          end: {
            line: 131,
            column: 1
          }
        }
      },
      '17': {
        name: 'reloadIfPrefetched',
        decl: {
          start: {
            line: 133,
            column: 22
          },
          end: {
            line: 133,
            column: 40
          }
        },
        loc: {
          start: {
            line: 133,
            column: 48
          },
          end: {
            line: 139,
            column: 1
          }
        }
      },
      '18': {
        name: '(anonymous_18)',
        decl: {
          start: {
            line: 142,
            column: 2
          },
          end: {
            line: 142,
            column: 3
          }
        },
        loc: {
          start: {
            line: 142,
            column: 12
          },
          end: {
            line: 149,
            column: 3
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 15,
            column: 6
          },
          end: {
            line: 15,
            column: 41
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 15,
            column: 6
          },
          end: {
            line: 15,
            column: 41
          }
        }, {
          start: {
            line: 15,
            column: 6
          },
          end: {
            line: 15,
            column: 41
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 16,
            column: 6
          },
          end: {
            line: 18,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 16,
            column: 6
          },
          end: {
            line: 18,
            column: 7
          }
        }, {
          start: {
            line: 16,
            column: 6
          },
          end: {
            line: 18,
            column: 7
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 37,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 37,
            column: 7
          }
        }, {
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 37,
            column: 7
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 35
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 35
          }
        }, {
          start: {
            line: 40,
            column: 8
          },
          end: {
            line: 40,
            column: 35
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 46,
            column: 18
          },
          end: {
            line: 46,
            column: 31
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 46,
            column: 23
          },
          end: {
            line: 46,
            column: 31
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 51,
            column: 6
          },
          end: {
            line: 55,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 51,
            column: 6
          },
          end: {
            line: 55,
            column: 7
          }
        }, {
          start: {
            line: 51,
            column: 6
          },
          end: {
            line: 55,
            column: 7
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        }, {
          start: {
            line: 68,
            column: 4
          },
          end: {
            line: 72,
            column: 5
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        }, {
          start: {
            line: 76,
            column: 4
          },
          end: {
            line: 78,
            column: 5
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 92,
            column: 6
          },
          end: {
            line: 92,
            column: 24
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 92,
            column: 6
          },
          end: {
            line: 92,
            column: 24
          }
        }, {
          start: {
            line: 92,
            column: 6
          },
          end: {
            line: 92,
            column: 24
          }
        }]
      },
      '9': {
        loc: {
          start: {
            line: 101,
            column: 10
          },
          end: {
            line: 101,
            column: 69
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 101,
            column: 10
          },
          end: {
            line: 101,
            column: 42
          }
        }, {
          start: {
            line: 101,
            column: 46
          },
          end: {
            line: 101,
            column: 69
          }
        }]
      },
      '10': {
        loc: {
          start: {
            line: 107,
            column: 0
          },
          end: {
            line: 109,
            column: 1
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 107,
            column: 0
          },
          end: {
            line: 109,
            column: 1
          }
        }, {
          start: {
            line: 107,
            column: 0
          },
          end: {
            line: 109,
            column: 1
          }
        }]
      },
      '11': {
        loc: {
          start: {
            line: 119,
            column: 2
          },
          end: {
            line: 119,
            column: 40
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 119,
            column: 2
          },
          end: {
            line: 119,
            column: 40
          }
        }, {
          start: {
            line: 119,
            column: 2
          },
          end: {
            line: 119,
            column: 40
          }
        }]
      },
      '12': {
        loc: {
          start: {
            line: 120,
            column: 2
          },
          end: {
            line: 120,
            column: 28
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 120,
            column: 2
          },
          end: {
            line: 120,
            column: 28
          }
        }, {
          start: {
            line: 120,
            column: 2
          },
          end: {
            line: 120,
            column: 28
          }
        }]
      },
      '13': {
        loc: {
          start: {
            line: 126,
            column: 2
          },
          end: {
            line: 128,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 126,
            column: 2
          },
          end: {
            line: 128,
            column: 3
          }
        }, {
          start: {
            line: 126,
            column: 2
          },
          end: {
            line: 128,
            column: 3
          }
        }]
      },
      '14': {
        loc: {
          start: {
            line: 135,
            column: 2
          },
          end: {
            line: 135,
            column: 35
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 135,
            column: 2
          },
          end: {
            line: 135,
            column: 35
          }
        }, {
          start: {
            line: 135,
            column: 2
          },
          end: {
            line: 135,
            column: 35
          }
        }]
      },
      '15': {
        loc: {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }, {
          start: {
            line: 144,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0,
      '42': 0,
      '43': 0,
      '44': 0,
      '45': 0,
      '46': 0,
      '47': 0,
      '48': 0,
      '49': 0,
      '50': 0,
      '51': 0,
      '52': 0,
      '53': 0,
      '54': 0,
      '55': 0,
      '56': 0,
      '57': 0,
      '58': 0,
      '59': 0,
      '60': 0,
      '61': 0,
      '62': 0,
      '63': 0,
      '64': 0,
      '65': 0,
      '66': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0],
      '10': [0, 0],
      '11': [0, 0],
      '12': [0, 0],
      '13': [0, 0],
      '14': [0, 0],
      '15': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}(); /* global __NEXT_DATA__ */

var prefetch = exports.prefetch = function () {
  var _ref3 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(href) {
    var url;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            ++cov_18qoxqy2gd.f[16];
            ++cov_18qoxqy2gd.f[16];
            ++cov_18qoxqy2gd.s[49];
            ++cov_18qoxqy2gd.s[44];

            if (hasServiceWorkerSupport()) {
              _context.next = 12;
              break;
            }

            ++cov_18qoxqy2gd.b[11][0];
            ++cov_18qoxqy2gd.b[11][0];
            ++cov_18qoxqy2gd.s[50];
            ++cov_18qoxqy2gd.s[45];
            return _context.abrupt('return');

          case 12:
            ++cov_18qoxqy2gd.b[11][1];
            ++cov_18qoxqy2gd.b[11][1];

          case 14:
            ++cov_18qoxqy2gd.s[51];
            ++cov_18qoxqy2gd.s[46];

            if ((0, _link.isLocal)(href)) {
              _context.next = 24;
              break;
            }

            ++cov_18qoxqy2gd.b[12][0];
            ++cov_18qoxqy2gd.b[12][0];
            ++cov_18qoxqy2gd.s[52];
            ++cov_18qoxqy2gd.s[47];
            return _context.abrupt('return');

          case 24:
            ++cov_18qoxqy2gd.b[12][1];
            ++cov_18qoxqy2gd.b[12][1];

          case 26:
            ++cov_18qoxqy2gd.s[53];
            ++cov_18qoxqy2gd.s[48];


            // Register the service worker if it's not.
            messenger.ensureInitialized();

            url = (++cov_18qoxqy2gd.s[54], getPrefetchUrl(href));
            ++cov_18qoxqy2gd.s[55];
            ++cov_18qoxqy2gd.s[49];

            if (!PREFETCHED_URLS[url]) {
              ++cov_18qoxqy2gd.b[13][0];
              ++cov_18qoxqy2gd.b[13][0];
              ++cov_18qoxqy2gd.s[56];
              ++cov_18qoxqy2gd.s[50];

              PREFETCHED_URLS[url] = messenger.send({ action: 'ADD_URL', url: url });
            } else {
              ++cov_18qoxqy2gd.b[13][1];
              ++cov_18qoxqy2gd.b[13][1];
            }

            ++cov_18qoxqy2gd.s[57];
            ++cov_18qoxqy2gd.s[51];
            return _context.abrupt('return', PREFETCHED_URLS[url]);

          case 36:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function prefetch(_x2) {
    return _ref3.apply(this, arguments);
  };
}();

var reloadIfPrefetched = exports.reloadIfPrefetched = function () {
  var _ref4 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(href) {
    var url;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            ++cov_18qoxqy2gd.f[17];
            ++cov_18qoxqy2gd.f[17];
            url = (++cov_18qoxqy2gd.s[58], getPrefetchUrl(href));
            ++cov_18qoxqy2gd.s[59];
            ++cov_18qoxqy2gd.s[52];

            if (PREFETCHED_URLS[url]) {
              _context2.next = 13;
              break;
            }

            ++cov_18qoxqy2gd.b[14][0];
            ++cov_18qoxqy2gd.b[14][0];
            ++cov_18qoxqy2gd.s[60];
            ++cov_18qoxqy2gd.s[53];
            return _context2.abrupt('return');

          case 13:
            ++cov_18qoxqy2gd.b[14][1];
            ++cov_18qoxqy2gd.b[14][1];

          case 15:
            ++cov_18qoxqy2gd.s[61];
            ++cov_18qoxqy2gd.s[54];


            delete PREFETCHED_URLS[url];
            ++cov_18qoxqy2gd.s[62];
            ++cov_18qoxqy2gd.s[55];
            _context2.next = 22;
            return prefetch(href);

          case 22:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function reloadIfPrefetched(_x3) {
    return _ref4.apply(this, arguments);
  };
}();

var _react = __webpack_require__(8);

var _react2 = _interopRequireDefault(_react);

var _link = __webpack_require__(533);

var _link2 = _interopRequireDefault(_link);

var _url = __webpack_require__(145);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Messenger = function () {
  function Messenger() {
    var _this = this;

    (0, _classCallCheck3.default)(this, Messenger);
    ++cov_18qoxqy2gd.f[0];
    ++cov_18qoxqy2gd.f[0];
    ++cov_18qoxqy2gd.s[0];
    ++cov_18qoxqy2gd.s[0];

    this.id = 0;
    ++cov_18qoxqy2gd.s[1];
    ++cov_18qoxqy2gd.s[1];
    this.callacks = {};
    ++cov_18qoxqy2gd.s[2];
    ++cov_18qoxqy2gd.s[2];
    this.serviceWorkerReadyCallbacks = [];
    ++cov_18qoxqy2gd.s[3];
    ++cov_18qoxqy2gd.s[3];
    this.serviceWorkerState = null;

    ++cov_18qoxqy2gd.s[4];
    ++cov_18qoxqy2gd.s[4];
    navigator.serviceWorker.addEventListener('message', function (_ref) {
      var data = _ref.data;
      ++cov_18qoxqy2gd.f[1];
      ++cov_18qoxqy2gd.f[1];
      ++cov_18qoxqy2gd.s[5];
      ++cov_18qoxqy2gd.s[5];

      if (data.action !== 'REPLY') {
          ++cov_18qoxqy2gd.b[0][0];
          ++cov_18qoxqy2gd.b[0][0];
          ++cov_18qoxqy2gd.s[6];
          ++cov_18qoxqy2gd.s[6];
          return;
        } else {
        ++cov_18qoxqy2gd.b[0][1];
        ++cov_18qoxqy2gd.b[0][1];
      }++cov_18qoxqy2gd.s[7];
      ++cov_18qoxqy2gd.s[7];
      if (_this.callacks[data.replyFor]) {
        ++cov_18qoxqy2gd.b[1][0];
        ++cov_18qoxqy2gd.b[1][0];
        ++cov_18qoxqy2gd.s[8];
        ++cov_18qoxqy2gd.s[8];

        _this.callacks[data.replyFor](data);
      } else {
        ++cov_18qoxqy2gd.b[1][1];
        ++cov_18qoxqy2gd.b[1][1];
      }
    });

    // Reset the cache always.
    // Sometimes, there's an already running service worker with cached requests.
    // If the app doesn't use any prefetch calls, `ensureInitialized` won't get
    // called and cleanup resources.
    // So, that's why we do this.
    ++cov_18qoxqy2gd.s[9];
    ++cov_18qoxqy2gd.s[9];
    this._resetCache();
  }

  (0, _createClass3.default)(Messenger, [{
    key: 'send',
    value: function send(payload) {
      var _this2 = this;

      ++cov_18qoxqy2gd.f[2];
      ++cov_18qoxqy2gd.f[2];
      ++cov_18qoxqy2gd.s[10];
      ++cov_18qoxqy2gd.s[10];

      return new _promise2.default(function (resolve, reject) {
        ++cov_18qoxqy2gd.f[3];
        ++cov_18qoxqy2gd.f[3];
        ++cov_18qoxqy2gd.s[11];
        ++cov_18qoxqy2gd.s[11];

        if (_this2.serviceWorkerState === 'REGISTERED') {
          ++cov_18qoxqy2gd.b[2][0];
          ++cov_18qoxqy2gd.b[2][0];
          ++cov_18qoxqy2gd.s[12];
          ++cov_18qoxqy2gd.s[12];

          _this2._send(payload, handleCallback);
        } else {
          ++cov_18qoxqy2gd.b[2][1];
          ++cov_18qoxqy2gd.b[2][1];
          ++cov_18qoxqy2gd.s[13];
          ++cov_18qoxqy2gd.s[13];

          _this2.serviceWorkerReadyCallbacks.push(function () {
            ++cov_18qoxqy2gd.f[4];
            ++cov_18qoxqy2gd.f[4];
            ++cov_18qoxqy2gd.s[14];
            ++cov_18qoxqy2gd.s[14];

            _this2._send(payload, handleCallback);
          });
        }

        function handleCallback(err) {
          ++cov_18qoxqy2gd.f[5];
          ++cov_18qoxqy2gd.f[5];
          ++cov_18qoxqy2gd.s[15];
          ++cov_18qoxqy2gd.s[15];

          if (err) {
              ++cov_18qoxqy2gd.b[3][0];
              ++cov_18qoxqy2gd.b[3][0];
              ++cov_18qoxqy2gd.s[16];
              ++cov_18qoxqy2gd.s[16];
              return reject(err);
            } else {
            ++cov_18qoxqy2gd.b[3][1];
            ++cov_18qoxqy2gd.b[3][1];
          }++cov_18qoxqy2gd.s[17];
          ++cov_18qoxqy2gd.s[17];
          return resolve();
        }
      });
    }
  }, {
    key: '_send',
    value: function _send(payload) {
      var _this3 = this;

      var cb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (++cov_18qoxqy2gd.b[4][0], (++cov_18qoxqy2gd.b[4][0], function () {
        ++cov_18qoxqy2gd.f[7];
        ++cov_18qoxqy2gd.f[7];
      }));
      ++cov_18qoxqy2gd.f[6];
      ++cov_18qoxqy2gd.f[6];

      var id = (++cov_18qoxqy2gd.s[18], this.id++);
      var newPayload = (++cov_18qoxqy2gd.s[19], (0, _extends3.default)({}, payload, { id: id }));

      ++cov_18qoxqy2gd.s[20];
      ++cov_18qoxqy2gd.s[18];
      this.callacks[id] = function (data) {
        ++cov_18qoxqy2gd.f[8];
        ++cov_18qoxqy2gd.f[8];
        ++cov_18qoxqy2gd.s[21];
        ++cov_18qoxqy2gd.s[19];

        if (data.error) {
          ++cov_18qoxqy2gd.b[5][0];
          ++cov_18qoxqy2gd.b[5][0];
          ++cov_18qoxqy2gd.s[22];
          ++cov_18qoxqy2gd.s[20];

          cb(data.error);
        } else {
          ++cov_18qoxqy2gd.b[5][1];
          ++cov_18qoxqy2gd.b[5][1];
          ++cov_18qoxqy2gd.s[23];
          ++cov_18qoxqy2gd.s[21];

          cb(null, data.result);
        }

        ++cov_18qoxqy2gd.s[24];
        ++cov_18qoxqy2gd.s[22];
        delete _this3.callacks[id];
      };

      ++cov_18qoxqy2gd.s[25];
      ++cov_18qoxqy2gd.s[23];
      navigator.serviceWorker.controller.postMessage(newPayload);
    }
  }, {
    key: '_resetCache',
    value: function _resetCache(cb) {
      var _this4 = this;

      ++cov_18qoxqy2gd.f[9];
      ++cov_18qoxqy2gd.f[9];
      ++cov_18qoxqy2gd.s[26];
      ++cov_18qoxqy2gd.s[24];

      var reset = function reset() {
        ++cov_18qoxqy2gd.f[10];
        ++cov_18qoxqy2gd.f[10];
        ++cov_18qoxqy2gd.s[27];
        ++cov_18qoxqy2gd.s[25];

        _this4._send({ action: 'RESET' }, cb);
      };

      ++cov_18qoxqy2gd.s[28];
      ++cov_18qoxqy2gd.s[26];
      if (navigator.serviceWorker.controller) {
        ++cov_18qoxqy2gd.b[6][0];
        ++cov_18qoxqy2gd.b[6][0];
        ++cov_18qoxqy2gd.s[29];
        ++cov_18qoxqy2gd.s[27];

        reset();
      } else {
        ++cov_18qoxqy2gd.b[6][1];
        ++cov_18qoxqy2gd.b[6][1];
        ++cov_18qoxqy2gd.s[30];
        ++cov_18qoxqy2gd.s[28];

        navigator.serviceWorker.oncontrollerchange = reset;
      }
    }
  }, {
    key: 'ensureInitialized',
    value: function ensureInitialized() {
      var _this5 = this;

      ++cov_18qoxqy2gd.f[11];
      ++cov_18qoxqy2gd.f[11];
      ++cov_18qoxqy2gd.s[31];
      ++cov_18qoxqy2gd.s[29];

      if (this.serviceWorkerState) {
        ++cov_18qoxqy2gd.b[7][0];
        ++cov_18qoxqy2gd.b[7][0];
        ++cov_18qoxqy2gd.s[32];
        ++cov_18qoxqy2gd.s[30];

        return;
      } else {
        ++cov_18qoxqy2gd.b[7][1];
        ++cov_18qoxqy2gd.b[7][1];
      }

      ++cov_18qoxqy2gd.s[33];
      ++cov_18qoxqy2gd.s[31];
      this.serviceWorkerState = 'REGISTERING';
      ++cov_18qoxqy2gd.s[34];
      ++cov_18qoxqy2gd.s[32];
      navigator.serviceWorker.register('/_next-prefetcher.js');

      // Reset the cache after registered
      // We don't need to have any old caches since service workers lives beyond
      // life time of the webpage.
      // With this prefetching won't work 100% if multiple pages of the same app
      // loads in the same browser in same time.
      // Basically, cache will only have prefetched resourses for the last loaded
      // page of a given app.
      // We could mitigate this, when we add a hash to a every file we fetch.
      ++cov_18qoxqy2gd.s[35];
      ++cov_18qoxqy2gd.s[33];
      this._resetCache(function (err) {
        ++cov_18qoxqy2gd.f[12];
        ++cov_18qoxqy2gd.f[12];
        ++cov_18qoxqy2gd.s[36];
        ++cov_18qoxqy2gd.s[34];

        if (err) {
            ++cov_18qoxqy2gd.b[8][0];
            ++cov_18qoxqy2gd.b[8][0];
            ++cov_18qoxqy2gd.s[37];
            ++cov_18qoxqy2gd.s[35];
            throw err;
          } else {
          ++cov_18qoxqy2gd.b[8][1];
          ++cov_18qoxqy2gd.b[8][1];
        }++cov_18qoxqy2gd.s[38];
        ++cov_18qoxqy2gd.s[36];
        _this5.serviceWorkerState = 'REGISTERED';
        ++cov_18qoxqy2gd.s[39];
        ++cov_18qoxqy2gd.s[37];
        _this5.serviceWorkerReadyCallbacks.forEach(function (cb) {
          ++cov_18qoxqy2gd.f[13];
          ++cov_18qoxqy2gd.f[13];
          ++cov_18qoxqy2gd.s[40];
          ++cov_18qoxqy2gd.s[38];
          return cb();
        });
        ++cov_18qoxqy2gd.s[41];
        ++cov_18qoxqy2gd.s[39];
        _this5.serviceWorkerReadyCallbacks = [];
      });
    }
  }]);
  return Messenger;
}();

function hasServiceWorkerSupport() {
  ++cov_18qoxqy2gd.f[14];
  ++cov_18qoxqy2gd.f[14];
  ++cov_18qoxqy2gd.s[42];
  ++cov_18qoxqy2gd.s[40];

  return (++cov_18qoxqy2gd.b[9][0], (++cov_18qoxqy2gd.b[9][0], typeof navigator !== 'undefined')) && (++cov_18qoxqy2gd.b[9][1], (++cov_18qoxqy2gd.b[9][1], navigator.serviceWorker));
}

var PREFETCHED_URLS = (++cov_18qoxqy2gd.s[43], {});
var messenger = void 0;

++cov_18qoxqy2gd.s[44];
++cov_18qoxqy2gd.s[41];
if (hasServiceWorkerSupport()) {
  ++cov_18qoxqy2gd.b[10][0];
  ++cov_18qoxqy2gd.b[10][0];
  ++cov_18qoxqy2gd.s[45];
  ++cov_18qoxqy2gd.s[42];

  messenger = new Messenger();
} else {
  ++cov_18qoxqy2gd.b[10][1];
  ++cov_18qoxqy2gd.b[10][1];
}

function getPrefetchUrl(href) {
  ++cov_18qoxqy2gd.f[15];
  ++cov_18qoxqy2gd.f[15];

  var _ref2 = (++cov_18qoxqy2gd.s[46], (0, _url.parse)(href)),
      pathname = _ref2.pathname;

  var url = (++cov_18qoxqy2gd.s[47], '/_next/' + __NEXT_DATA__.buildId + '/pages' + pathname);

  ++cov_18qoxqy2gd.s[48];
  ++cov_18qoxqy2gd.s[43];
  return url;
}

var LinkPrefetch = function (_React$Component) {
  (0, _inherits3.default)(LinkPrefetch, _React$Component);

  function LinkPrefetch() {
    (0, _classCallCheck3.default)(this, LinkPrefetch);
    return (0, _possibleConstructorReturn3.default)(this, (LinkPrefetch.__proto__ || (0, _getPrototypeOf2.default)(LinkPrefetch)).apply(this, arguments));
  }

  (0, _createClass3.default)(LinkPrefetch, [{
    key: 'render',
    value: function render() {
      ++cov_18qoxqy2gd.f[18];
      ++cov_18qoxqy2gd.f[18];

      var _ref5 = (++cov_18qoxqy2gd.s[63], this.props),
          href = _ref5.href;

      ++cov_18qoxqy2gd.s[64];
      ++cov_18qoxqy2gd.s[56];

      if (this.props.prefetch !== false) {
        ++cov_18qoxqy2gd.b[15][0];
        ++cov_18qoxqy2gd.b[15][0];
        ++cov_18qoxqy2gd.s[65];
        ++cov_18qoxqy2gd.s[57];

        prefetch(href);
      } else {
        ++cov_18qoxqy2gd.b[15][1];
        ++cov_18qoxqy2gd.b[15][1];
      }

      ++cov_18qoxqy2gd.s[66];
      ++cov_18qoxqy2gd.s[58];
      return _react2.default.createElement(_link2.default, this.props);
    }
  }]);
  return LinkPrefetch;
}(_react2.default.Component);

exports.default = LinkPrefetch;

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/data/zeit/next.js/dist/lib/prefetch.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/data/zeit/next.js/dist/lib/prefetch.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var cov_1lmtbaxwkx = function () {
  var path = '/data/zeit/next.js/lib/router/router.js',
      hash = 'c547b25e4cb5e8ff5e1977985a7c5ea3aa54ea8b',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/router/router.js',
    statementMap: {
      '0': {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 11
        }
      },
      '1': {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 34
        }
      },
      '2': {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 58
        }
      },
      '3': {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 40
        }
      },
      '4': {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 28
        }
      },
      '5': {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 22
        }
      },
      '6': {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 34
        }
      },
      '7': {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 35
        }
      },
      '8': {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 48
        }
      },
      '9': {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 5
        }
      },
      '10': {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 57
        }
      },
      '11': {
        start: {
          line: 32,
          column: 6
        },
        end: {
          line: 32,
          column: 58
        }
      },
      '12': {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 29
        }
      },
      '13': {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 46,
          column: 5
        }
      },
      '14': {
        start: {
          line: 43,
          column: 6
        },
        end: {
          line: 43,
          column: 39
        }
      },
      '15': {
        start: {
          line: 44,
          column: 6
        },
        end: {
          line: 44,
          column: 42
        }
      },
      '16': {
        start: {
          line: 45,
          column: 6
        },
        end: {
          line: 45,
          column: 12
        }
      },
      '17': {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 37
        }
      },
      '18': {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      '19': {
        start: {
          line: 58,
          column: 6
        },
        end: {
          line: 58,
          column: 46
        }
      },
      '20': {
        start: {
          line: 59,
          column: 6
        },
        end: {
          line: 59,
          column: 12
        }
      },
      '21': {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 22
        }
      },
      '22': {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 49
        }
      },
      '23': {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      '24': {
        start: {
          line: 66,
          column: 6
        },
        end: {
          line: 66,
          column: 46
        }
      },
      '25': {
        start: {
          line: 68,
          column: 6
        },
        end: {
          line: 68,
          column: 42
        }
      },
      '26': {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 36
        }
      },
      '27': {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      '28': {
        start: {
          line: 78,
          column: 6
        },
        end: {
          line: 78,
          column: 26
        }
      },
      '29': {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 33
        }
      },
      '30': {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 84,
          column: 35
        }
      },
      '31': {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 86,
          column: 36
        }
      },
      '32': {
        start: {
          line: 86,
          column: 30
        },
        end: {
          line: 86,
          column: 36
        }
      },
      '33': {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 38
        }
      },
      '34': {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      '35': {
        start: {
          line: 99,
          column: 6
        },
        end: {
          line: 99,
          column: 47
        }
      },
      '36': {
        start: {
          line: 100,
          column: 6
        },
        end: {
          line: 100,
          column: 12
        }
      },
      '37': {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 35
        }
      },
      '38': {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      '39': {
        start: {
          line: 106,
          column: 6
        },
        end: {
          line: 106,
          column: 47
        }
      },
      '40': {
        start: {
          line: 107,
          column: 6
        },
        end: {
          line: 107,
          column: 17
        }
      },
      '41': {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 41
        }
      },
      '42': {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 114,
          column: 25
        }
      },
      '43': {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 118,
          column: 44
        }
      },
      '44': {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 122,
          column: 47
        }
      },
      '45': {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 29
        }
      },
      '46': {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 134,
          column: 5
        }
      },
      '47': {
        start: {
          line: 130,
          column: 6
        },
        end: {
          line: 130,
          column: 39
        }
      },
      '48': {
        start: {
          line: 131,
          column: 6
        },
        end: {
          line: 131,
          column: 19
        }
      },
      '49': {
        start: {
          line: 132,
          column: 6
        },
        end: {
          line: 132,
          column: 42
        }
      },
      '50': {
        start: {
          line: 133,
          column: 6
        },
        end: {
          line: 133,
          column: 17
        }
      },
      '51': {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 138,
          column: 37
        }
      },
      '52': {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      '53': {
        start: {
          line: 144,
          column: 6
        },
        end: {
          line: 144,
          column: 46
        }
      },
      '54': {
        start: {
          line: 145,
          column: 6
        },
        end: {
          line: 145,
          column: 18
        }
      },
      '55': {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 148,
          column: 17
        }
      },
      '56': {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 150,
          column: 22
        }
      },
      '57': {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 151,
          column: 49
        }
      },
      '58': {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 156,
          column: 5
        }
      },
      '59': {
        start: {
          line: 154,
          column: 6
        },
        end: {
          line: 154,
          column: 46
        }
      },
      '60': {
        start: {
          line: 155,
          column: 6
        },
        end: {
          line: 155,
          column: 17
        }
      },
      '61': {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 158,
          column: 40
        }
      },
      '62': {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 159,
          column: 15
        }
      },
      '63': {
        start: {
          line: 162,
          column: 6
        },
        end: {
          line: 164,
          column: 7
        }
      },
      '64': {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 53
        }
      },
      '65': {
        start: {
          line: 171,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      '66': {
        start: {
          line: 174,
          column: 6
        },
        end: {
          line: 174,
          column: 66
        }
      },
      '67': {
        start: {
          line: 176,
          column: 6
        },
        end: {
          line: 178,
          column: 7
        }
      },
      '68': {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 29
        }
      },
      '69': {
        start: {
          line: 181,
          column: 6
        },
        end: {
          line: 181,
          column: 41
        }
      },
      '70': {
        start: {
          line: 183,
          column: 6
        },
        end: {
          line: 183,
          column: 66
        }
      },
      '71': {
        start: {
          line: 185,
          column: 6
        },
        end: {
          line: 185,
          column: 27
        }
      },
      '72': {
        start: {
          line: 186,
          column: 6
        },
        end: {
          line: 186,
          column: 24
        }
      },
      '73': {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 189,
          column: 20
        }
      },
      '74': {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 193,
          column: 28
        }
      },
      '75': {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 194,
          column: 22
        }
      },
      '76': {
        start: {
          line: 195,
          column: 4
        },
        end: {
          line: 195,
          column: 21
        }
      },
      '77': {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 199,
          column: 74
        }
      },
      '78': {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 229,
          column: 5
        }
      },
      '79': {
        start: {
          line: 207,
          column: 6
        },
        end: {
          line: 222,
          column: 8
        }
      },
      '80': {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      '81': {
        start: {
          line: 209,
          column: 10
        },
        end: {
          line: 214,
          column: 11
        }
      },
      '82': {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 23
        }
      },
      '83': {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 34
        }
      },
      '84': {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 25
        }
      },
      '85': {
        start: {
          line: 219,
          column: 10
        },
        end: {
          line: 219,
          column: 37
        }
      },
      '86': {
        start: {
          line: 219,
          column: 19
        },
        end: {
          line: 219,
          column: 37
        }
      },
      '87': {
        start: {
          line: 220,
          column: 10
        },
        end: {
          line: 220,
          column: 35
        }
      },
      '88': {
        start: {
          line: 224,
          column: 6
        },
        end: {
          line: 226,
          column: 7
        }
      },
      '89': {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 39
        }
      },
      '90': {
        start: {
          line: 228,
          column: 6
        },
        end: {
          line: 228,
          column: 35
        }
      },
      '91': {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 230,
          column: 15
        }
      },
      '92': {
        start: {
          line: 235,
          column: 19
        },
        end: {
          line: 235,
          column: 45
        }
      },
      '93': {
        start: {
          line: 235,
          column: 27
        },
        end: {
          line: 235,
          column: 43
        }
      },
      '94': {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 236,
          column: 37
        }
      },
      '95': {
        start: {
          line: 240,
          column: 4
        },
        end: {
          line: 242,
          column: 5
        }
      },
      '96': {
        start: {
          line: 241,
          column: 6
        },
        end: {
          line: 241,
          column: 37
        }
      },
      '97': {
        start: {
          line: 244,
          column: 4
        },
        end: {
          line: 248,
          column: 5
        }
      },
      '98': {
        start: {
          line: 246,
          column: 6
        },
        end: {
          line: 246,
          column: 26
        }
      },
      '99': {
        start: {
          line: 247,
          column: 6
        },
        end: {
          line: 247,
          column: 15
        }
      },
      '100': {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 250,
          column: 16
        }
      },
      '101': {
        start: {
          line: 254,
          column: 4
        },
        end: {
          line: 257,
          column: 5
        }
      },
      '102': {
        start: {
          line: 255,
          column: 6
        },
        end: {
          line: 255,
          column: 32
        }
      },
      '103': {
        start: {
          line: 256,
          column: 6
        },
        end: {
          line: 256,
          column: 37
        }
      },
      '104': {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 261,
          column: 48
        }
      },
      '105': {
        start: {
          line: 261,
          column: 39
        },
        end: {
          line: 261,
          column: 47
        }
      },
      '106': {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 265,
          column: 30
        }
      },
      '107': {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 266,
          column: 46
        }
      },
      '108': {
        start: {
          line: 266,
          column: 17
        },
        end: {
          line: 266,
          column: 46
        }
      },
      '109': {
        start: {
          line: 271,
          column: 2
        },
        end: {
          line: 271,
          column: 97
        }
      },
      '110': {
        start: {
          line: 275,
          column: 2
        },
        end: {
          line: 275,
          column: 39
        }
      },
      '111': {
        start: {
          line: 279,
          column: 2
        },
        end: {
          line: 291,
          column: 4
        }
      },
      '112': {
        start: {
          line: 280,
          column: 4
        },
        end: {
          line: 280,
          column: 27
        }
      },
      '113': {
        start: {
          line: 280,
          column: 13
        },
        end: {
          line: 280,
          column: 27
        }
      },
      '114': {
        start: {
          line: 283,
          column: 4
        },
        end: {
          line: 287,
          column: 5
        }
      },
      '115': {
        start: {
          line: 284,
          column: 6
        },
        end: {
          line: 284,
          column: 41
        }
      },
      '116': {
        start: {
          line: 286,
          column: 6
        },
        end: {
          line: 286,
          column: 20
        }
      },
      '117': {
        start: {
          line: 290,
          column: 4
        },
        end: {
          line: 290,
          column: 42
        }
      },
      '118': {
        start: {
          line: 296,
          column: 2
        },
        end: {
          line: 307,
          column: 3
        }
      },
      '119': {
        start: {
          line: 299,
          column: 4
        },
        end: {
          line: 304,
          column: 5
        }
      },
      '120': {
        start: {
          line: 300,
          column: 6
        },
        end: {
          line: 300,
          column: 41
        }
      },
      '121': {
        start: {
          line: 302,
          column: 6
        },
        end: {
          line: 302,
          column: 53
        }
      },
      '122': {
        start: {
          line: 303,
          column: 6
        },
        end: {
          line: 303,
          column: 12
        }
      },
      '123': {
        start: {
          line: 306,
          column: 4
        },
        end: {
          line: 306,
          column: 18
        }
      },
      '124': {
        start: {
          line: 308,
          column: 2
        },
        end: {
          line: 310,
          column: 3
        }
      },
      '125': {
        start: {
          line: 309,
          column: 4
        },
        end: {
          line: 309,
          column: 54
        }
      },
      '126': {
        start: {
          line: 311,
          column: 2
        },
        end: {
          line: 315,
          column: 3
        }
      },
      '127': {
        start: {
          line: 313,
          column: 4
        },
        end: {
          line: 313,
          column: 24
        }
      },
      '128': {
        start: {
          line: 314,
          column: 4
        },
        end: {
          line: 314,
          column: 11
        }
      },
      '129': {
        start: {
          line: 316,
          column: 2
        },
        end: {
          line: 316,
          column: 22
        }
      },
      '130': {
        start: {
          line: 317,
          column: 2
        },
        end: {
          line: 317,
          column: 52
        }
      },
      '131': {
        start: {
          line: 318,
          column: 2
        },
        end: {
          line: 318,
          column: 12
        }
      },
      '132': {
        start: {
          line: 320,
          column: 2
        },
        end: {
          line: 320,
          column: 12
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 11,
            column: 2
          },
          end: {
            line: 11,
            column: 3
          }
        },
        loc: {
          start: {
            line: 11,
            column: 73
          },
          end: {
            line: 34,
            column: 3
          }
        }
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 36,
            column: 3
          }
        },
        loc: {
          start: {
            line: 36,
            column: 23
          },
          end: {
            line: 70,
            column: 3
          }
        }
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 72,
            column: 2
          },
          end: {
            line: 72,
            column: 3
          }
        },
        loc: {
          start: {
            line: 72,
            column: 28
          },
          end: {
            line: 80,
            column: 3
          }
        }
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        },
        loc: {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 111,
            column: 3
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 113,
            column: 2
          },
          end: {
            line: 113,
            column: 3
          }
        },
        loc: {
          start: {
            line: 113,
            column: 10
          },
          end: {
            line: 115,
            column: 3
          }
        }
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 117,
            column: 2
          },
          end: {
            line: 117,
            column: 3
          }
        },
        loc: {
          start: {
            line: 117,
            column: 23
          },
          end: {
            line: 119,
            column: 3
          }
        }
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 121,
            column: 2
          },
          end: {
            line: 121,
            column: 3
          }
        },
        loc: {
          start: {
            line: 121,
            column: 26
          },
          end: {
            line: 123,
            column: 3
          }
        }
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 125,
            column: 2
          },
          end: {
            line: 125,
            column: 3
          }
        },
        loc: {
          start: {
            line: 125,
            column: 33
          },
          end: {
            line: 166,
            column: 3
          }
        }
      },
      '8': {
        name: 'changeState',
        decl: {
          start: {
            line: 161,
            column: 13
          },
          end: {
            line: 161,
            column: 24
          }
        },
        loc: {
          start: {
            line: 161,
            column: 28
          },
          end: {
            line: 165,
            column: 5
          }
        }
      },
      '9': {
        name: '(anonymous_9)',
        decl: {
          start: {
            line: 168,
            column: 2
          },
          end: {
            line: 168,
            column: 3
          }
        },
        loc: {
          start: {
            line: 168,
            column: 46
          },
          end: {
            line: 190,
            column: 3
          }
        }
      },
      '10': {
        name: '(anonymous_10)',
        decl: {
          start: {
            line: 192,
            column: 2
          },
          end: {
            line: 192,
            column: 3
          }
        },
        loc: {
          start: {
            line: 192,
            column: 30
          },
          end: {
            line: 196,
            column: 3
          }
        }
      },
      '11': {
        name: '(anonymous_11)',
        decl: {
          start: {
            line: 198,
            column: 2
          },
          end: {
            line: 198,
            column: 3
          }
        },
        loc: {
          start: {
            line: 198,
            column: 29
          },
          end: {
            line: 200,
            column: 3
          }
        }
      },
      '12': {
        name: '(anonymous_12)',
        decl: {
          start: {
            line: 202,
            column: 2
          },
          end: {
            line: 202,
            column: 3
          }
        },
        loc: {
          start: {
            line: 202,
            column: 31
          },
          end: {
            line: 231,
            column: 3
          }
        }
      },
      '13': {
        name: '(anonymous_13)',
        decl: {
          start: {
            line: 207,
            column: 31
          },
          end: {
            line: 207,
            column: 32
          }
        },
        loc: {
          start: {
            line: 207,
            column: 52
          },
          end: {
            line: 222,
            column: 7
          }
        }
      },
      '14': {
        name: '(anonymous_14)',
        decl: {
          start: {
            line: 208,
            column: 44
          },
          end: {
            line: 208,
            column: 45
          }
        },
        loc: {
          start: {
            line: 208,
            column: 50
          },
          end: {
            line: 215,
            column: 9
          }
        }
      },
      '15': {
        name: '(anonymous_15)',
        decl: {
          start: {
            line: 218,
            column: 39
          },
          end: {
            line: 218,
            column: 40
          }
        },
        loc: {
          start: {
            line: 218,
            column: 54
          },
          end: {
            line: 221,
            column: 9
          }
        }
      },
      '16': {
        name: '(anonymous_16)',
        decl: {
          start: {
            line: 233,
            column: 2
          },
          end: {
            line: 233,
            column: 3
          }
        },
        loc: {
          start: {
            line: 233,
            column: 41
          },
          end: {
            line: 251,
            column: 3
          }
        }
      },
      '17': {
        name: '(anonymous_17)',
        decl: {
          start: {
            line: 235,
            column: 19
          },
          end: {
            line: 235,
            column: 20
          }
        },
        loc: {
          start: {
            line: 235,
            column: 25
          },
          end: {
            line: 235,
            column: 45
          }
        }
      },
      '18': {
        name: '(anonymous_18)',
        decl: {
          start: {
            line: 253,
            column: 2
          },
          end: {
            line: 253,
            column: 3
          }
        },
        loc: {
          start: {
            line: 253,
            column: 24
          },
          end: {
            line: 258,
            column: 3
          }
        }
      },
      '19': {
        name: '(anonymous_19)',
        decl: {
          start: {
            line: 260,
            column: 2
          },
          end: {
            line: 260,
            column: 3
          }
        },
        loc: {
          start: {
            line: 260,
            column: 16
          },
          end: {
            line: 262,
            column: 3
          }
        }
      },
      '20': {
        name: '(anonymous_20)',
        decl: {
          start: {
            line: 261,
            column: 31
          },
          end: {
            line: 261,
            column: 32
          }
        },
        loc: {
          start: {
            line: 261,
            column: 39
          },
          end: {
            line: 261,
            column: 47
          }
        }
      },
      '21': {
        name: '(anonymous_21)',
        decl: {
          start: {
            line: 264,
            column: 2
          },
          end: {
            line: 264,
            column: 3
          }
        },
        loc: {
          start: {
            line: 264,
            column: 17
          },
          end: {
            line: 267,
            column: 3
          }
        }
      },
      '22': {
        name: '(anonymous_22)',
        decl: {
          start: {
            line: 266,
            column: 11
          },
          end: {
            line: 266,
            column: 12
          }
        },
        loc: {
          start: {
            line: 266,
            column: 17
          },
          end: {
            line: 266,
            column: 46
          }
        }
      },
      '23': {
        name: 'getURL',
        decl: {
          start: {
            line: 270,
            column: 9
          },
          end: {
            line: 270,
            column: 15
          }
        },
        loc: {
          start: {
            line: 270,
            column: 19
          },
          end: {
            line: 272,
            column: 1
          }
        }
      },
      '24': {
        name: 'toRoute',
        decl: {
          start: {
            line: 274,
            column: 9
          },
          end: {
            line: 274,
            column: 16
          }
        },
        loc: {
          start: {
            line: 274,
            column: 24
          },
          end: {
            line: 276,
            column: 1
          }
        }
      },
      '25': {
        name: 'loadComponent',
        decl: {
          start: {
            line: 278,
            column: 9
          },
          end: {
            line: 278,
            column: 22
          }
        },
        loc: {
          start: {
            line: 278,
            column: 33
          },
          end: {
            line: 292,
            column: 1
          }
        }
      },
      '26': {
        name: '(anonymous_26)',
        decl: {
          start: {
            line: 279,
            column: 23
          },
          end: {
            line: 279,
            column: 24
          }
        },
        loc: {
          start: {
            line: 279,
            column: 38
          },
          end: {
            line: 291,
            column: 3
          }
        }
      },
      '27': {
        name: 'loadJSON',
        decl: {
          start: {
            line: 294,
            column: 9
          },
          end: {
            line: 294,
            column: 17
          }
        },
        loc: {
          start: {
            line: 294,
            column: 28
          },
          end: {
            line: 321,
            column: 1
          }
        }
      },
      '28': {
        name: '(anonymous_28)',
        decl: {
          start: {
            line: 296,
            column: 15
          },
          end: {
            line: 296,
            column: 16
          }
        },
        loc: {
          start: {
            line: 296,
            column: 21
          },
          end: {
            line: 307,
            column: 3
          }
        }
      },
      '29': {
        name: '(anonymous_29)',
        decl: {
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 308,
            column: 17
          }
        },
        loc: {
          start: {
            line: 308,
            column: 22
          },
          end: {
            line: 310,
            column: 3
          }
        }
      },
      '30': {
        name: '(anonymous_30)',
        decl: {
          start: {
            line: 311,
            column: 16
          },
          end: {
            line: 311,
            column: 17
          }
        },
        loc: {
          start: {
            line: 311,
            column: 22
          },
          end: {
            line: 315,
            column: 3
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 11,
            column: 32
          },
          end: {
            line: 11,
            column: 71
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        }, {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 26
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 39,
            column: 28
          },
          end: {
            line: 39,
            column: 36
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 39,
            column: 41
          },
          end: {
            line: 39,
            column: 54
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        }, {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }, {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 57,
            column: 32
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }, {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }]
      },
      '9': {
        loc: {
          start: {
            line: 73,
            column: 17
          },
          end: {
            line: 73,
            column: 45
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '10': {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }]
      },
      '11': {
        loc: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 36
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 36
          }
        }, {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 36
          }
        }]
      },
      '12': {
        loc: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }, {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }]
      },
      '13': {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 98,
            column: 32
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '14': {
        loc: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        }, {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        }]
      },
      '15': {
        loc: {
          start: {
            line: 117,
            column: 13
          },
          end: {
            line: 117,
            column: 21
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '16': {
        loc: {
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 121,
            column: 24
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '17': {
        loc: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        }, {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        }]
      },
      '18': {
        loc: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }, {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }]
      },
      '19': {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 32
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '20': {
        loc: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        }, {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        }]
      },
      '21': {
        loc: {
          start: {
            line: 162,
            column: 6
          },
          end: {
            line: 164,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 162,
            column: 6
          },
          end: {
            line: 164,
            column: 7
          }
        }, {
          start: {
            line: 162,
            column: 6
          },
          end: {
            line: 164,
            column: 7
          }
        }]
      },
      '22': {
        loc: {
          start: {
            line: 162,
            column: 10
          },
          end: {
            line: 162,
            column: 51
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '23': {
        loc: {
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 178,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 178,
            column: 7
          }
        }, {
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 178,
            column: 7
          }
        }]
      },
      '24': {
        loc: {
          start: {
            line: 199,
            column: 11
          },
          end: {
            line: 199,
            column: 74
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '25': {
        loc: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        }, {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        }]
      },
      '26': {
        loc: {
          start: {
            line: 209,
            column: 10
          },
          end: {
            line: 214,
            column: 11
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 209,
            column: 10
          },
          end: {
            line: 214,
            column: 11
          }
        }, {
          start: {
            line: 209,
            column: 10
          },
          end: {
            line: 214,
            column: 11
          }
        }]
      },
      '27': {
        loc: {
          start: {
            line: 219,
            column: 10
          },
          end: {
            line: 219,
            column: 37
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 219,
            column: 10
          },
          end: {
            line: 219,
            column: 37
          }
        }, {
          start: {
            line: 219,
            column: 10
          },
          end: {
            line: 219,
            column: 37
          }
        }]
      },
      '28': {
        loc: {
          start: {
            line: 224,
            column: 6
          },
          end: {
            line: 226,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 224,
            column: 6
          },
          end: {
            line: 226,
            column: 7
          }
        }, {
          start: {
            line: 224,
            column: 6
          },
          end: {
            line: 226,
            column: 7
          }
        }]
      },
      '29': {
        loc: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        }, {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        }]
      },
      '30': {
        loc: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        }, {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        }]
      },
      '31': {
        loc: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        }, {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        }]
      },
      '32': {
        loc: {
          start: {
            line: 271,
            column: 37
          },
          end: {
            line: 271,
            column: 65
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '33': {
        loc: {
          start: {
            line: 271,
            column: 70
          },
          end: {
            line: 271,
            column: 96
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '34': {
        loc: {
          start: {
            line: 275,
            column: 9
          },
          end: {
            line: 275,
            column: 39
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '35': {
        loc: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 27
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 27
          }
        }, {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 27
          }
        }]
      },
      '36': {
        loc: {
          start: {
            line: 289,
            column: 22
          },
          end: {
            line: 289,
            column: 46
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0,
      '42': 0,
      '43': 0,
      '44': 0,
      '45': 0,
      '46': 0,
      '47': 0,
      '48': 0,
      '49': 0,
      '50': 0,
      '51': 0,
      '52': 0,
      '53': 0,
      '54': 0,
      '55': 0,
      '56': 0,
      '57': 0,
      '58': 0,
      '59': 0,
      '60': 0,
      '61': 0,
      '62': 0,
      '63': 0,
      '64': 0,
      '65': 0,
      '66': 0,
      '67': 0,
      '68': 0,
      '69': 0,
      '70': 0,
      '71': 0,
      '72': 0,
      '73': 0,
      '74': 0,
      '75': 0,
      '76': 0,
      '77': 0,
      '78': 0,
      '79': 0,
      '80': 0,
      '81': 0,
      '82': 0,
      '83': 0,
      '84': 0,
      '85': 0,
      '86': 0,
      '87': 0,
      '88': 0,
      '89': 0,
      '90': 0,
      '91': 0,
      '92': 0,
      '93': 0,
      '94': 0,
      '95': 0,
      '96': 0,
      '97': 0,
      '98': 0,
      '99': 0,
      '100': 0,
      '101': 0,
      '102': 0,
      '103': 0,
      '104': 0,
      '105': 0,
      '106': 0,
      '107': 0,
      '108': 0,
      '109': 0,
      '110': 0,
      '111': 0,
      '112': 0,
      '113': 0,
      '114': 0,
      '115': 0,
      '116': 0,
      '117': 0,
      '118': 0,
      '119': 0,
      '120': 0,
      '121': 0,
      '122': 0,
      '123': 0,
      '124': 0,
      '125': 0,
      '126': 0,
      '127': 0,
      '128': 0,
      '129': 0,
      '130': 0,
      '131': 0,
      '132': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0
    },
    b: {
      '0': [0],
      '1': [0, 0],
      '2': [0],
      '3': [0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0],
      '10': [0, 0],
      '11': [0, 0],
      '12': [0, 0],
      '13': [0, 0],
      '14': [0, 0],
      '15': [0],
      '16': [0],
      '17': [0, 0],
      '18': [0, 0],
      '19': [0, 0],
      '20': [0, 0],
      '21': [0, 0],
      '22': [0, 0],
      '23': [0, 0],
      '24': [0, 0],
      '25': [0, 0],
      '26': [0, 0],
      '27': [0, 0],
      '28': [0, 0],
      '29': [0, 0],
      '30': [0, 0],
      '31': [0, 0],
      '32': [0, 0],
      '33': [0, 0],
      '34': [0, 0],
      '35': [0, 0],
      '36': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = __webpack_require__(47);

var _promise2 = _interopRequireDefault(_promise);

var _regenerator = __webpack_require__(67);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = __webpack_require__(94);

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = __webpack_require__(66);

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _set = __webpack_require__(93);

var _set2 = _interopRequireDefault(_set);

var _defineProperty2 = __webpack_require__(249);

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _getPrototypeOf = __webpack_require__(25);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(19);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(20);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(27);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(26);

var _inherits3 = _interopRequireDefault(_inherits2);

var cov_1lmtbaxwkx = function () {
  var path = '/data/zeit/next.js/lib/router/router.js',
      hash = '40a52466e34cb636f11124e73473bc9c4475c591',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/router/router.js',
    statementMap: {
      '0': {
        start: {
          line: 12,
          column: 4
        },
        end: {
          line: 12,
          column: 11
        }
      },
      '1': {
        start: {
          line: 14,
          column: 4
        },
        end: {
          line: 14,
          column: 34
        }
      },
      '2': {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 58
        }
      },
      '3': {
        start: {
          line: 19,
          column: 4
        },
        end: {
          line: 19,
          column: 40
        }
      },
      '4': {
        start: {
          line: 20,
          column: 4
        },
        end: {
          line: 20,
          column: 28
        }
      },
      '5': {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 21,
          column: 22
        }
      },
      '6': {
        start: {
          line: 22,
          column: 4
        },
        end: {
          line: 22,
          column: 34
        }
      },
      '7': {
        start: {
          line: 24,
          column: 4
        },
        end: {
          line: 24,
          column: 35
        }
      },
      '8': {
        start: {
          line: 25,
          column: 4
        },
        end: {
          line: 25,
          column: 48
        }
      },
      '9': {
        start: {
          line: 27,
          column: 4
        },
        end: {
          line: 33,
          column: 5
        }
      },
      '10': {
        start: {
          line: 30,
          column: 6
        },
        end: {
          line: 30,
          column: 57
        }
      },
      '11': {
        start: {
          line: 32,
          column: 6
        },
        end: {
          line: 32,
          column: 58
        }
      },
      '12': {
        start: {
          line: 37,
          column: 4
        },
        end: {
          line: 37,
          column: 29
        }
      },
      '13': {
        start: {
          line: 39,
          column: 41
        },
        end: {
          line: 39,
          column: 54
        }
      },
      '14': {
        start: {
          line: 40,
          column: 32
        },
        end: {
          line: 40,
          column: 48
        }
      },
      '15': {
        start: {
          line: 42,
          column: 4
        },
        end: {
          line: 46,
          column: 5
        }
      },
      '16': {
        start: {
          line: 43,
          column: 6
        },
        end: {
          line: 43,
          column: 39
        }
      },
      '17': {
        start: {
          line: 44,
          column: 6
        },
        end: {
          line: 44,
          column: 42
        }
      },
      '18': {
        start: {
          line: 45,
          column: 6
        },
        end: {
          line: 45,
          column: 12
        }
      },
      '19': {
        start: {
          line: 48,
          column: 18
        },
        end: {
          line: 48,
          column: 35
        }
      },
      '20': {
        start: {
          line: 50,
          column: 4
        },
        end: {
          line: 50,
          column: 37
        }
      },
      '21': {
        start: {
          line: 55,
          column: 8
        },
        end: {
          line: 55,
          column: 55
        }
      },
      '22': {
        start: {
          line: 57,
          column: 4
        },
        end: {
          line: 60,
          column: 5
        }
      },
      '23': {
        start: {
          line: 58,
          column: 6
        },
        end: {
          line: 58,
          column: 46
        }
      },
      '24': {
        start: {
          line: 59,
          column: 6
        },
        end: {
          line: 59,
          column: 12
        }
      },
      '25': {
        start: {
          line: 62,
          column: 4
        },
        end: {
          line: 62,
          column: 22
        }
      },
      '26': {
        start: {
          line: 63,
          column: 4
        },
        end: {
          line: 63,
          column: 49
        }
      },
      '27': {
        start: {
          line: 65,
          column: 4
        },
        end: {
          line: 69,
          column: 5
        }
      },
      '28': {
        start: {
          line: 66,
          column: 6
        },
        end: {
          line: 66,
          column: 46
        }
      },
      '29': {
        start: {
          line: 68,
          column: 6
        },
        end: {
          line: 68,
          column: 42
        }
      },
      '30': {
        start: {
          line: 73,
          column: 17
        },
        end: {
          line: 73,
          column: 45
        }
      },
      '31': {
        start: {
          line: 74,
          column: 20
        },
        end: {
          line: 74,
          column: 42
        }
      },
      '32': {
        start: {
          line: 75,
          column: 4
        },
        end: {
          line: 75,
          column: 36
        }
      },
      '33': {
        start: {
          line: 77,
          column: 4
        },
        end: {
          line: 79,
          column: 5
        }
      },
      '34': {
        start: {
          line: 78,
          column: 6
        },
        end: {
          line: 78,
          column: 26
        }
      },
      '35': {
        start: {
          line: 83,
          column: 4
        },
        end: {
          line: 83,
          column: 33
        }
      },
      '36': {
        start: {
          line: 84,
          column: 4
        },
        end: {
          line: 84,
          column: 35
        }
      },
      '37': {
        start: {
          line: 86,
          column: 4
        },
        end: {
          line: 86,
          column: 36
        }
      },
      '38': {
        start: {
          line: 86,
          column: 30
        },
        end: {
          line: 86,
          column: 36
        }
      },
      '39': {
        start: {
          line: 88,
          column: 16
        },
        end: {
          line: 88,
          column: 36
        }
      },
      '40': {
        start: {
          line: 89,
          column: 32
        },
        end: {
          line: 89,
          column: 48
        }
      },
      '41': {
        start: {
          line: 91,
          column: 4
        },
        end: {
          line: 91,
          column: 38
        }
      },
      '42': {
        start: {
          line: 96,
          column: 8
        },
        end: {
          line: 96,
          column: 55
        }
      },
      '43': {
        start: {
          line: 98,
          column: 4
        },
        end: {
          line: 101,
          column: 5
        }
      },
      '44': {
        start: {
          line: 99,
          column: 6
        },
        end: {
          line: 99,
          column: 47
        }
      },
      '45': {
        start: {
          line: 100,
          column: 6
        },
        end: {
          line: 100,
          column: 12
        }
      },
      '46': {
        start: {
          line: 103,
          column: 4
        },
        end: {
          line: 103,
          column: 35
        }
      },
      '47': {
        start: {
          line: 105,
          column: 4
        },
        end: {
          line: 108,
          column: 5
        }
      },
      '48': {
        start: {
          line: 106,
          column: 6
        },
        end: {
          line: 106,
          column: 47
        }
      },
      '49': {
        start: {
          line: 107,
          column: 6
        },
        end: {
          line: 107,
          column: 17
        }
      },
      '50': {
        start: {
          line: 110,
          column: 4
        },
        end: {
          line: 110,
          column: 41
        }
      },
      '51': {
        start: {
          line: 114,
          column: 4
        },
        end: {
          line: 114,
          column: 25
        }
      },
      '52': {
        start: {
          line: 118,
          column: 4
        },
        end: {
          line: 118,
          column: 44
        }
      },
      '53': {
        start: {
          line: 122,
          column: 4
        },
        end: {
          line: 122,
          column: 47
        }
      },
      '54': {
        start: {
          line: 126,
          column: 4
        },
        end: {
          line: 126,
          column: 29
        }
      },
      '55': {
        start: {
          line: 127,
          column: 32
        },
        end: {
          line: 127,
          column: 48
        }
      },
      '56': {
        start: {
          line: 129,
          column: 4
        },
        end: {
          line: 134,
          column: 5
        }
      },
      '57': {
        start: {
          line: 130,
          column: 6
        },
        end: {
          line: 130,
          column: 39
        }
      },
      '58': {
        start: {
          line: 131,
          column: 6
        },
        end: {
          line: 131,
          column: 19
        }
      },
      '59': {
        start: {
          line: 132,
          column: 6
        },
        end: {
          line: 132,
          column: 42
        }
      },
      '60': {
        start: {
          line: 133,
          column: 6
        },
        end: {
          line: 133,
          column: 17
        }
      },
      '61': {
        start: {
          line: 136,
          column: 18
        },
        end: {
          line: 136,
          column: 35
        }
      },
      '62': {
        start: {
          line: 138,
          column: 4
        },
        end: {
          line: 138,
          column: 37
        }
      },
      '63': {
        start: {
          line: 141,
          column: 8
        },
        end: {
          line: 141,
          column: 55
        }
      },
      '64': {
        start: {
          line: 143,
          column: 4
        },
        end: {
          line: 146,
          column: 5
        }
      },
      '65': {
        start: {
          line: 144,
          column: 6
        },
        end: {
          line: 144,
          column: 46
        }
      },
      '66': {
        start: {
          line: 145,
          column: 6
        },
        end: {
          line: 145,
          column: 18
        }
      },
      '67': {
        start: {
          line: 148,
          column: 4
        },
        end: {
          line: 148,
          column: 17
        }
      },
      '68': {
        start: {
          line: 150,
          column: 4
        },
        end: {
          line: 150,
          column: 22
        }
      },
      '69': {
        start: {
          line: 151,
          column: 4
        },
        end: {
          line: 151,
          column: 49
        }
      },
      '70': {
        start: {
          line: 153,
          column: 4
        },
        end: {
          line: 156,
          column: 5
        }
      },
      '71': {
        start: {
          line: 154,
          column: 6
        },
        end: {
          line: 154,
          column: 46
        }
      },
      '72': {
        start: {
          line: 155,
          column: 6
        },
        end: {
          line: 155,
          column: 17
        }
      },
      '73': {
        start: {
          line: 158,
          column: 4
        },
        end: {
          line: 158,
          column: 40
        }
      },
      '74': {
        start: {
          line: 159,
          column: 4
        },
        end: {
          line: 159,
          column: 15
        }
      },
      '75': {
        start: {
          line: 162,
          column: 6
        },
        end: {
          line: 164,
          column: 7
        }
      },
      '76': {
        start: {
          line: 163,
          column: 8
        },
        end: {
          line: 163,
          column: 53
        }
      },
      '77': {
        start: {
          line: 169,
          column: 22
        },
        end: {
          line: 169,
          column: 24
        }
      },
      '78': {
        start: {
          line: 171,
          column: 4
        },
        end: {
          line: 187,
          column: 5
        }
      },
      '79': {
        start: {
          line: 172,
          column: 38
        },
        end: {
          line: 172,
          column: 87
        }
      },
      '80': {
        start: {
          line: 173,
          column: 18
        },
        end: {
          line: 173,
          column: 47
        }
      },
      '81': {
        start: {
          line: 174,
          column: 6
        },
        end: {
          line: 174,
          column: 66
        }
      },
      '82': {
        start: {
          line: 176,
          column: 6
        },
        end: {
          line: 178,
          column: 7
        }
      },
      '83': {
        start: {
          line: 177,
          column: 8
        },
        end: {
          line: 177,
          column: 29
        }
      },
      '84': {
        start: {
          line: 180,
          column: 24
        },
        end: {
          line: 180,
          column: 43
        }
      },
      '85': {
        start: {
          line: 181,
          column: 6
        },
        end: {
          line: 181,
          column: 41
        }
      },
      '86': {
        start: {
          line: 182,
          column: 18
        },
        end: {
          line: 182,
          column: 42
        }
      },
      '87': {
        start: {
          line: 183,
          column: 6
        },
        end: {
          line: 183,
          column: 66
        }
      },
      '88': {
        start: {
          line: 185,
          column: 6
        },
        end: {
          line: 185,
          column: 27
        }
      },
      '89': {
        start: {
          line: 186,
          column: 6
        },
        end: {
          line: 186,
          column: 24
        }
      },
      '90': {
        start: {
          line: 189,
          column: 4
        },
        end: {
          line: 189,
          column: 20
        }
      },
      '91': {
        start: {
          line: 193,
          column: 4
        },
        end: {
          line: 193,
          column: 28
        }
      },
      '92': {
        start: {
          line: 194,
          column: 4
        },
        end: {
          line: 194,
          column: 22
        }
      },
      '93': {
        start: {
          line: 195,
          column: 4
        },
        end: {
          line: 195,
          column: 21
        }
      },
      '94': {
        start: {
          line: 199,
          column: 4
        },
        end: {
          line: 199,
          column: 74
        }
      },
      '95': {
        start: {
          line: 203,
          column: 15
        },
        end: {
          line: 203,
          column: 37
        }
      },
      '96': {
        start: {
          line: 204,
          column: 4
        },
        end: {
          line: 229,
          column: 5
        }
      },
      '97': {
        start: {
          line: 207,
          column: 6
        },
        end: {
          line: 222,
          column: 8
        }
      },
      '98': {
        start: {
          line: 208,
          column: 8
        },
        end: {
          line: 215,
          column: 9
        }
      },
      '99': {
        start: {
          line: 209,
          column: 10
        },
        end: {
          line: 214,
          column: 11
        }
      },
      '100': {
        start: {
          line: 210,
          column: 12
        },
        end: {
          line: 210,
          column: 23
        }
      },
      '101': {
        start: {
          line: 211,
          column: 26
        },
        end: {
          line: 211,
          column: 68
        }
      },
      '102': {
        start: {
          line: 212,
          column: 12
        },
        end: {
          line: 212,
          column: 34
        }
      },
      '103': {
        start: {
          line: 213,
          column: 12
        },
        end: {
          line: 213,
          column: 25
        }
      },
      '104': {
        start: {
          line: 217,
          column: 20
        },
        end: {
          line: 217,
          column: 67
        }
      },
      '105': {
        start: {
          line: 218,
          column: 20
        },
        end: {
          line: 221,
          column: 10
        }
      },
      '106': {
        start: {
          line: 219,
          column: 10
        },
        end: {
          line: 219,
          column: 37
        }
      },
      '107': {
        start: {
          line: 219,
          column: 19
        },
        end: {
          line: 219,
          column: 37
        }
      },
      '108': {
        start: {
          line: 220,
          column: 10
        },
        end: {
          line: 220,
          column: 35
        }
      },
      '109': {
        start: {
          line: 224,
          column: 6
        },
        end: {
          line: 226,
          column: 7
        }
      },
      '110': {
        start: {
          line: 225,
          column: 8
        },
        end: {
          line: 225,
          column: 39
        }
      },
      '111': {
        start: {
          line: 228,
          column: 6
        },
        end: {
          line: 228,
          column: 35
        }
      },
      '112': {
        start: {
          line: 230,
          column: 4
        },
        end: {
          line: 230,
          column: 15
        }
      },
      '113': {
        start: {
          line: 234,
          column: 20
        },
        end: {
          line: 234,
          column: 25
        }
      },
      '114': {
        start: {
          line: 235,
          column: 19
        },
        end: {
          line: 235,
          column: 45
        }
      },
      '115': {
        start: {
          line: 235,
          column: 27
        },
        end: {
          line: 235,
          column: 43
        }
      },
      '116': {
        start: {
          line: 236,
          column: 4
        },
        end: {
          line: 236,
          column: 37
        }
      },
      '117': {
        start: {
          line: 238,
          column: 18
        },
        end: {
          line: 238,
          column: 59
        }
      },
      '118': {
        start: {
          line: 240,
          column: 4
        },
        end: {
          line: 242,
          column: 5
        }
      },
      '119': {
        start: {
          line: 241,
          column: 6
        },
        end: {
          line: 241,
          column: 37
        }
      },
      '120': {
        start: {
          line: 244,
          column: 4
        },
        end: {
          line: 248,
          column: 5
        }
      },
      '121': {
        start: {
          line: 245,
          column: 18
        },
        end: {
          line: 245,
          column: 62
        }
      },
      '122': {
        start: {
          line: 246,
          column: 6
        },
        end: {
          line: 246,
          column: 26
        }
      },
      '123': {
        start: {
          line: 247,
          column: 6
        },
        end: {
          line: 247,
          column: 15
        }
      },
      '124': {
        start: {
          line: 250,
          column: 4
        },
        end: {
          line: 250,
          column: 16
        }
      },
      '125': {
        start: {
          line: 254,
          column: 4
        },
        end: {
          line: 257,
          column: 5
        }
      },
      '126': {
        start: {
          line: 255,
          column: 6
        },
        end: {
          line: 255,
          column: 32
        }
      },
      '127': {
        start: {
          line: 256,
          column: 6
        },
        end: {
          line: 256,
          column: 37
        }
      },
      '128': {
        start: {
          line: 261,
          column: 4
        },
        end: {
          line: 261,
          column: 48
        }
      },
      '129': {
        start: {
          line: 261,
          column: 39
        },
        end: {
          line: 261,
          column: 47
        }
      },
      '130': {
        start: {
          line: 265,
          column: 4
        },
        end: {
          line: 265,
          column: 30
        }
      },
      '131': {
        start: {
          line: 266,
          column: 4
        },
        end: {
          line: 266,
          column: 46
        }
      },
      '132': {
        start: {
          line: 266,
          column: 17
        },
        end: {
          line: 266,
          column: 46
        }
      },
      '133': {
        start: {
          line: 271,
          column: 2
        },
        end: {
          line: 271,
          column: 97
        }
      },
      '134': {
        start: {
          line: 275,
          column: 2
        },
        end: {
          line: 275,
          column: 39
        }
      },
      '135': {
        start: {
          line: 279,
          column: 2
        },
        end: {
          line: 291,
          column: 4
        }
      },
      '136': {
        start: {
          line: 280,
          column: 4
        },
        end: {
          line: 280,
          column: 27
        }
      },
      '137': {
        start: {
          line: 280,
          column: 13
        },
        end: {
          line: 280,
          column: 27
        }
      },
      '138': {
        start: {
          line: 283,
          column: 4
        },
        end: {
          line: 287,
          column: 5
        }
      },
      '139': {
        start: {
          line: 284,
          column: 6
        },
        end: {
          line: 284,
          column: 41
        }
      },
      '140': {
        start: {
          line: 286,
          column: 6
        },
        end: {
          line: 286,
          column: 20
        }
      },
      '141': {
        start: {
          line: 289,
          column: 22
        },
        end: {
          line: 289,
          column: 46
        }
      },
      '142': {
        start: {
          line: 290,
          column: 4
        },
        end: {
          line: 290,
          column: 42
        }
      },
      '143': {
        start: {
          line: 295,
          column: 14
        },
        end: {
          line: 295,
          column: 41
        }
      },
      '144': {
        start: {
          line: 296,
          column: 2
        },
        end: {
          line: 307,
          column: 3
        }
      },
      '145': {
        start: {
          line: 299,
          column: 4
        },
        end: {
          line: 304,
          column: 5
        }
      },
      '146': {
        start: {
          line: 300,
          column: 6
        },
        end: {
          line: 300,
          column: 41
        }
      },
      '147': {
        start: {
          line: 302,
          column: 6
        },
        end: {
          line: 302,
          column: 53
        }
      },
      '148': {
        start: {
          line: 303,
          column: 6
        },
        end: {
          line: 303,
          column: 12
        }
      },
      '149': {
        start: {
          line: 306,
          column: 4
        },
        end: {
          line: 306,
          column: 18
        }
      },
      '150': {
        start: {
          line: 308,
          column: 2
        },
        end: {
          line: 310,
          column: 3
        }
      },
      '151': {
        start: {
          line: 309,
          column: 4
        },
        end: {
          line: 309,
          column: 54
        }
      },
      '152': {
        start: {
          line: 311,
          column: 2
        },
        end: {
          line: 315,
          column: 3
        }
      },
      '153': {
        start: {
          line: 312,
          column: 16
        },
        end: {
          line: 312,
          column: 40
        }
      },
      '154': {
        start: {
          line: 313,
          column: 4
        },
        end: {
          line: 313,
          column: 24
        }
      },
      '155': {
        start: {
          line: 314,
          column: 4
        },
        end: {
          line: 314,
          column: 11
        }
      },
      '156': {
        start: {
          line: 316,
          column: 2
        },
        end: {
          line: 316,
          column: 22
        }
      },
      '157': {
        start: {
          line: 317,
          column: 2
        },
        end: {
          line: 317,
          column: 52
        }
      },
      '158': {
        start: {
          line: 318,
          column: 2
        },
        end: {
          line: 318,
          column: 12
        }
      },
      '159': {
        start: {
          line: 320,
          column: 2
        },
        end: {
          line: 320,
          column: 12
        }
      }
    },
    fnMap: {
      '0': {
        name: '(anonymous_0)',
        decl: {
          start: {
            line: 11,
            column: 2
          },
          end: {
            line: 11,
            column: 3
          }
        },
        loc: {
          start: {
            line: 11,
            column: 73
          },
          end: {
            line: 34,
            column: 3
          }
        }
      },
      '1': {
        name: '(anonymous_1)',
        decl: {
          start: {
            line: 36,
            column: 2
          },
          end: {
            line: 36,
            column: 3
          }
        },
        loc: {
          start: {
            line: 36,
            column: 23
          },
          end: {
            line: 70,
            column: 3
          }
        }
      },
      '2': {
        name: '(anonymous_2)',
        decl: {
          start: {
            line: 72,
            column: 2
          },
          end: {
            line: 72,
            column: 3
          }
        },
        loc: {
          start: {
            line: 72,
            column: 28
          },
          end: {
            line: 80,
            column: 3
          }
        }
      },
      '3': {
        name: '(anonymous_3)',
        decl: {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 82,
            column: 3
          }
        },
        loc: {
          start: {
            line: 82,
            column: 23
          },
          end: {
            line: 111,
            column: 3
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 113,
            column: 2
          },
          end: {
            line: 113,
            column: 3
          }
        },
        loc: {
          start: {
            line: 113,
            column: 10
          },
          end: {
            line: 115,
            column: 3
          }
        }
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 117,
            column: 2
          },
          end: {
            line: 117,
            column: 3
          }
        },
        loc: {
          start: {
            line: 117,
            column: 23
          },
          end: {
            line: 119,
            column: 3
          }
        }
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 121,
            column: 2
          },
          end: {
            line: 121,
            column: 3
          }
        },
        loc: {
          start: {
            line: 121,
            column: 26
          },
          end: {
            line: 123,
            column: 3
          }
        }
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 125,
            column: 2
          },
          end: {
            line: 125,
            column: 3
          }
        },
        loc: {
          start: {
            line: 125,
            column: 33
          },
          end: {
            line: 166,
            column: 3
          }
        }
      },
      '8': {
        name: 'changeState',
        decl: {
          start: {
            line: 161,
            column: 13
          },
          end: {
            line: 161,
            column: 24
          }
        },
        loc: {
          start: {
            line: 161,
            column: 28
          },
          end: {
            line: 165,
            column: 5
          }
        }
      },
      '9': {
        name: '(anonymous_9)',
        decl: {
          start: {
            line: 168,
            column: 2
          },
          end: {
            line: 168,
            column: 3
          }
        },
        loc: {
          start: {
            line: 168,
            column: 46
          },
          end: {
            line: 190,
            column: 3
          }
        }
      },
      '10': {
        name: '(anonymous_10)',
        decl: {
          start: {
            line: 192,
            column: 2
          },
          end: {
            line: 192,
            column: 3
          }
        },
        loc: {
          start: {
            line: 192,
            column: 30
          },
          end: {
            line: 196,
            column: 3
          }
        }
      },
      '11': {
        name: '(anonymous_11)',
        decl: {
          start: {
            line: 198,
            column: 2
          },
          end: {
            line: 198,
            column: 3
          }
        },
        loc: {
          start: {
            line: 198,
            column: 29
          },
          end: {
            line: 200,
            column: 3
          }
        }
      },
      '12': {
        name: '(anonymous_12)',
        decl: {
          start: {
            line: 202,
            column: 2
          },
          end: {
            line: 202,
            column: 3
          }
        },
        loc: {
          start: {
            line: 202,
            column: 31
          },
          end: {
            line: 231,
            column: 3
          }
        }
      },
      '13': {
        name: '(anonymous_13)',
        decl: {
          start: {
            line: 207,
            column: 31
          },
          end: {
            line: 207,
            column: 32
          }
        },
        loc: {
          start: {
            line: 207,
            column: 52
          },
          end: {
            line: 222,
            column: 7
          }
        }
      },
      '14': {
        name: '(anonymous_14)',
        decl: {
          start: {
            line: 208,
            column: 44
          },
          end: {
            line: 208,
            column: 45
          }
        },
        loc: {
          start: {
            line: 208,
            column: 50
          },
          end: {
            line: 215,
            column: 9
          }
        }
      },
      '15': {
        name: '(anonymous_15)',
        decl: {
          start: {
            line: 218,
            column: 39
          },
          end: {
            line: 218,
            column: 40
          }
        },
        loc: {
          start: {
            line: 218,
            column: 54
          },
          end: {
            line: 221,
            column: 9
          }
        }
      },
      '16': {
        name: '(anonymous_16)',
        decl: {
          start: {
            line: 233,
            column: 2
          },
          end: {
            line: 233,
            column: 3
          }
        },
        loc: {
          start: {
            line: 233,
            column: 41
          },
          end: {
            line: 251,
            column: 3
          }
        }
      },
      '17': {
        name: '(anonymous_17)',
        decl: {
          start: {
            line: 235,
            column: 19
          },
          end: {
            line: 235,
            column: 20
          }
        },
        loc: {
          start: {
            line: 235,
            column: 25
          },
          end: {
            line: 235,
            column: 45
          }
        }
      },
      '18': {
        name: '(anonymous_18)',
        decl: {
          start: {
            line: 253,
            column: 2
          },
          end: {
            line: 253,
            column: 3
          }
        },
        loc: {
          start: {
            line: 253,
            column: 24
          },
          end: {
            line: 258,
            column: 3
          }
        }
      },
      '19': {
        name: '(anonymous_19)',
        decl: {
          start: {
            line: 260,
            column: 2
          },
          end: {
            line: 260,
            column: 3
          }
        },
        loc: {
          start: {
            line: 260,
            column: 16
          },
          end: {
            line: 262,
            column: 3
          }
        }
      },
      '20': {
        name: '(anonymous_20)',
        decl: {
          start: {
            line: 261,
            column: 31
          },
          end: {
            line: 261,
            column: 32
          }
        },
        loc: {
          start: {
            line: 261,
            column: 39
          },
          end: {
            line: 261,
            column: 47
          }
        }
      },
      '21': {
        name: '(anonymous_21)',
        decl: {
          start: {
            line: 264,
            column: 2
          },
          end: {
            line: 264,
            column: 3
          }
        },
        loc: {
          start: {
            line: 264,
            column: 17
          },
          end: {
            line: 267,
            column: 3
          }
        }
      },
      '22': {
        name: '(anonymous_22)',
        decl: {
          start: {
            line: 266,
            column: 11
          },
          end: {
            line: 266,
            column: 12
          }
        },
        loc: {
          start: {
            line: 266,
            column: 17
          },
          end: {
            line: 266,
            column: 46
          }
        }
      },
      '23': {
        name: 'getURL',
        decl: {
          start: {
            line: 270,
            column: 9
          },
          end: {
            line: 270,
            column: 15
          }
        },
        loc: {
          start: {
            line: 270,
            column: 19
          },
          end: {
            line: 272,
            column: 1
          }
        }
      },
      '24': {
        name: 'toRoute',
        decl: {
          start: {
            line: 274,
            column: 9
          },
          end: {
            line: 274,
            column: 16
          }
        },
        loc: {
          start: {
            line: 274,
            column: 24
          },
          end: {
            line: 276,
            column: 1
          }
        }
      },
      '25': {
        name: 'loadComponent',
        decl: {
          start: {
            line: 278,
            column: 9
          },
          end: {
            line: 278,
            column: 22
          }
        },
        loc: {
          start: {
            line: 278,
            column: 33
          },
          end: {
            line: 292,
            column: 1
          }
        }
      },
      '26': {
        name: '(anonymous_26)',
        decl: {
          start: {
            line: 279,
            column: 23
          },
          end: {
            line: 279,
            column: 24
          }
        },
        loc: {
          start: {
            line: 279,
            column: 38
          },
          end: {
            line: 291,
            column: 3
          }
        }
      },
      '27': {
        name: 'loadJSON',
        decl: {
          start: {
            line: 294,
            column: 9
          },
          end: {
            line: 294,
            column: 17
          }
        },
        loc: {
          start: {
            line: 294,
            column: 28
          },
          end: {
            line: 321,
            column: 1
          }
        }
      },
      '28': {
        name: '(anonymous_28)',
        decl: {
          start: {
            line: 296,
            column: 15
          },
          end: {
            line: 296,
            column: 16
          }
        },
        loc: {
          start: {
            line: 296,
            column: 21
          },
          end: {
            line: 307,
            column: 3
          }
        }
      },
      '29': {
        name: '(anonymous_29)',
        decl: {
          start: {
            line: 308,
            column: 16
          },
          end: {
            line: 308,
            column: 17
          }
        },
        loc: {
          start: {
            line: 308,
            column: 22
          },
          end: {
            line: 310,
            column: 3
          }
        }
      },
      '30': {
        name: '(anonymous_30)',
        decl: {
          start: {
            line: 311,
            column: 16
          },
          end: {
            line: 311,
            column: 17
          }
        },
        loc: {
          start: {
            line: 311,
            column: 22
          },
          end: {
            line: 315,
            column: 3
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 11,
            column: 32
          },
          end: {
            line: 11,
            column: 71
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 11,
            column: 69
          },
          end: {
            line: 11,
            column: 71
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        }, {
          start: {
            line: 27,
            column: 4
          },
          end: {
            line: 33,
            column: 5
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 39,
            column: 12
          },
          end: {
            line: 39,
            column: 26
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 39,
            column: 18
          },
          end: {
            line: 39,
            column: 26
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 39,
            column: 28
          },
          end: {
            line: 39,
            column: 36
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 39,
            column: 33
          },
          end: {
            line: 39,
            column: 36
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 39,
            column: 41
          },
          end: {
            line: 39,
            column: 54
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 39,
            column: 41
          },
          end: {
            line: 39,
            column: 48
          }
        }, {
          start: {
            line: 39,
            column: 52
          },
          end: {
            line: 39,
            column: 54
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        }, {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 46,
            column: 5
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }, {
          start: {
            line: 57,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 57,
            column: 32
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 57,
            column: 13
          }
        }, {
          start: {
            line: 57,
            column: 17
          },
          end: {
            line: 57,
            column: 32
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }, {
          start: {
            line: 65,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        }]
      },
      '9': {
        loc: {
          start: {
            line: 73,
            column: 17
          },
          end: {
            line: 73,
            column: 45
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 73,
            column: 17
          },
          end: {
            line: 73,
            column: 39
          }
        }, {
          start: {
            line: 73,
            column: 43
          },
          end: {
            line: 73,
            column: 45
          }
        }]
      },
      '10': {
        loc: {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }, {
          start: {
            line: 77,
            column: 4
          },
          end: {
            line: 79,
            column: 5
          }
        }]
      },
      '11': {
        loc: {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 36
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 36
          }
        }, {
          start: {
            line: 86,
            column: 4
          },
          end: {
            line: 86,
            column: 36
          }
        }]
      },
      '12': {
        loc: {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }, {
          start: {
            line: 98,
            column: 4
          },
          end: {
            line: 101,
            column: 5
          }
        }]
      },
      '13': {
        loc: {
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 98,
            column: 32
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 98,
            column: 8
          },
          end: {
            line: 98,
            column: 13
          }
        }, {
          start: {
            line: 98,
            column: 17
          },
          end: {
            line: 98,
            column: 32
          }
        }]
      },
      '14': {
        loc: {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        }, {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 108,
            column: 5
          }
        }]
      },
      '15': {
        loc: {
          start: {
            line: 117,
            column: 13
          },
          end: {
            line: 117,
            column: 21
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 117,
            column: 18
          },
          end: {
            line: 117,
            column: 21
          }
        }]
      },
      '16': {
        loc: {
          start: {
            line: 121,
            column: 16
          },
          end: {
            line: 121,
            column: 24
          }
        },
        type: 'default-arg',
        locations: [{
          start: {
            line: 121,
            column: 21
          },
          end: {
            line: 121,
            column: 24
          }
        }]
      },
      '17': {
        loc: {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        }, {
          start: {
            line: 129,
            column: 4
          },
          end: {
            line: 134,
            column: 5
          }
        }]
      },
      '18': {
        loc: {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }, {
          start: {
            line: 143,
            column: 4
          },
          end: {
            line: 146,
            column: 5
          }
        }]
      },
      '19': {
        loc: {
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 32
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 143,
            column: 8
          },
          end: {
            line: 143,
            column: 13
          }
        }, {
          start: {
            line: 143,
            column: 17
          },
          end: {
            line: 143,
            column: 32
          }
        }]
      },
      '20': {
        loc: {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        }, {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 156,
            column: 5
          }
        }]
      },
      '21': {
        loc: {
          start: {
            line: 162,
            column: 6
          },
          end: {
            line: 164,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 162,
            column: 6
          },
          end: {
            line: 164,
            column: 7
          }
        }, {
          start: {
            line: 162,
            column: 6
          },
          end: {
            line: 164,
            column: 7
          }
        }]
      },
      '22': {
        loc: {
          start: {
            line: 162,
            column: 10
          },
          end: {
            line: 162,
            column: 51
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 162,
            column: 10
          },
          end: {
            line: 162,
            column: 32
          }
        }, {
          start: {
            line: 162,
            column: 36
          },
          end: {
            line: 162,
            column: 51
          }
        }]
      },
      '23': {
        loc: {
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 178,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 178,
            column: 7
          }
        }, {
          start: {
            line: 176,
            column: 6
          },
          end: {
            line: 178,
            column: 7
          }
        }]
      },
      '24': {
        loc: {
          start: {
            line: 199,
            column: 11
          },
          end: {
            line: 199,
            column: 74
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 199,
            column: 11
          },
          end: {
            line: 199,
            column: 37
          }
        }, {
          start: {
            line: 199,
            column: 41
          },
          end: {
            line: 199,
            column: 74
          }
        }]
      },
      '25': {
        loc: {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        }, {
          start: {
            line: 204,
            column: 4
          },
          end: {
            line: 229,
            column: 5
          }
        }]
      },
      '26': {
        loc: {
          start: {
            line: 209,
            column: 10
          },
          end: {
            line: 214,
            column: 11
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 209,
            column: 10
          },
          end: {
            line: 214,
            column: 11
          }
        }, {
          start: {
            line: 209,
            column: 10
          },
          end: {
            line: 214,
            column: 11
          }
        }]
      },
      '27': {
        loc: {
          start: {
            line: 219,
            column: 10
          },
          end: {
            line: 219,
            column: 37
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 219,
            column: 10
          },
          end: {
            line: 219,
            column: 37
          }
        }, {
          start: {
            line: 219,
            column: 10
          },
          end: {
            line: 219,
            column: 37
          }
        }]
      },
      '28': {
        loc: {
          start: {
            line: 224,
            column: 6
          },
          end: {
            line: 226,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 224,
            column: 6
          },
          end: {
            line: 226,
            column: 7
          }
        }, {
          start: {
            line: 224,
            column: 6
          },
          end: {
            line: 226,
            column: 7
          }
        }]
      },
      '29': {
        loc: {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        }, {
          start: {
            line: 240,
            column: 4
          },
          end: {
            line: 242,
            column: 5
          }
        }]
      },
      '30': {
        loc: {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        }, {
          start: {
            line: 244,
            column: 4
          },
          end: {
            line: 248,
            column: 5
          }
        }]
      },
      '31': {
        loc: {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        }, {
          start: {
            line: 254,
            column: 4
          },
          end: {
            line: 257,
            column: 5
          }
        }]
      },
      '32': {
        loc: {
          start: {
            line: 271,
            column: 37
          },
          end: {
            line: 271,
            column: 65
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 271,
            column: 37
          },
          end: {
            line: 271,
            column: 59
          }
        }, {
          start: {
            line: 271,
            column: 63
          },
          end: {
            line: 271,
            column: 65
          }
        }]
      },
      '33': {
        loc: {
          start: {
            line: 271,
            column: 70
          },
          end: {
            line: 271,
            column: 96
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 271,
            column: 70
          },
          end: {
            line: 271,
            column: 90
          }
        }, {
          start: {
            line: 271,
            column: 94
          },
          end: {
            line: 271,
            column: 96
          }
        }]
      },
      '34': {
        loc: {
          start: {
            line: 275,
            column: 9
          },
          end: {
            line: 275,
            column: 39
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 275,
            column: 9
          },
          end: {
            line: 275,
            column: 32
          }
        }, {
          start: {
            line: 275,
            column: 36
          },
          end: {
            line: 275,
            column: 39
          }
        }]
      },
      '35': {
        loc: {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 27
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 27
          }
        }, {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 280,
            column: 27
          }
        }]
      },
      '36': {
        loc: {
          start: {
            line: 289,
            column: 22
          },
          end: {
            line: 289,
            column: 46
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 289,
            column: 22
          },
          end: {
            line: 289,
            column: 36
          }
        }, {
          start: {
            line: 289,
            column: 40
          },
          end: {
            line: 289,
            column: 46
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0,
      '31': 0,
      '32': 0,
      '33': 0,
      '34': 0,
      '35': 0,
      '36': 0,
      '37': 0,
      '38': 0,
      '39': 0,
      '40': 0,
      '41': 0,
      '42': 0,
      '43': 0,
      '44': 0,
      '45': 0,
      '46': 0,
      '47': 0,
      '48': 0,
      '49': 0,
      '50': 0,
      '51': 0,
      '52': 0,
      '53': 0,
      '54': 0,
      '55': 0,
      '56': 0,
      '57': 0,
      '58': 0,
      '59': 0,
      '60': 0,
      '61': 0,
      '62': 0,
      '63': 0,
      '64': 0,
      '65': 0,
      '66': 0,
      '67': 0,
      '68': 0,
      '69': 0,
      '70': 0,
      '71': 0,
      '72': 0,
      '73': 0,
      '74': 0,
      '75': 0,
      '76': 0,
      '77': 0,
      '78': 0,
      '79': 0,
      '80': 0,
      '81': 0,
      '82': 0,
      '83': 0,
      '84': 0,
      '85': 0,
      '86': 0,
      '87': 0,
      '88': 0,
      '89': 0,
      '90': 0,
      '91': 0,
      '92': 0,
      '93': 0,
      '94': 0,
      '95': 0,
      '96': 0,
      '97': 0,
      '98': 0,
      '99': 0,
      '100': 0,
      '101': 0,
      '102': 0,
      '103': 0,
      '104': 0,
      '105': 0,
      '106': 0,
      '107': 0,
      '108': 0,
      '109': 0,
      '110': 0,
      '111': 0,
      '112': 0,
      '113': 0,
      '114': 0,
      '115': 0,
      '116': 0,
      '117': 0,
      '118': 0,
      '119': 0,
      '120': 0,
      '121': 0,
      '122': 0,
      '123': 0,
      '124': 0,
      '125': 0,
      '126': 0,
      '127': 0,
      '128': 0,
      '129': 0,
      '130': 0,
      '131': 0,
      '132': 0,
      '133': 0,
      '134': 0,
      '135': 0,
      '136': 0,
      '137': 0,
      '138': 0,
      '139': 0,
      '140': 0,
      '141': 0,
      '142': 0,
      '143': 0,
      '144': 0,
      '145': 0,
      '146': 0,
      '147': 0,
      '148': 0,
      '149': 0,
      '150': 0,
      '151': 0,
      '152': 0,
      '153': 0,
      '154': 0,
      '155': 0,
      '156': 0,
      '157': 0,
      '158': 0,
      '159': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0,
      '30': 0
    },
    b: {
      '0': [0],
      '1': [0, 0],
      '2': [0],
      '3': [0],
      '4': [0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0],
      '9': [0, 0],
      '10': [0, 0],
      '11': [0, 0],
      '12': [0, 0],
      '13': [0, 0],
      '14': [0, 0],
      '15': [0],
      '16': [0],
      '17': [0, 0],
      '18': [0, 0],
      '19': [0, 0],
      '20': [0, 0],
      '21': [0, 0],
      '22': [0, 0],
      '23': [0, 0],
      '24': [0, 0],
      '25': [0, 0],
      '26': [0, 0],
      '27': [0, 0],
      '28': [0, 0],
      '29': [0, 0],
      '30': [0, 0],
      '31': [0, 0],
      '32': [0, 0],
      '33': [0, 0],
      '34': [0, 0],
      '35': [0, 0],
      '36': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}(); /* global __NEXT_DATA__ */

var _url = __webpack_require__(145);

var _evalScript = __webpack_require__(227);

var _evalScript2 = _interopRequireDefault(_evalScript);

var _shallowEquals = __webpack_require__(229);

var _shallowEquals2 = _interopRequireDefault(_shallowEquals);

var _events = __webpack_require__(312);

var _prefetch = __webpack_require__(534);

var _utils = __webpack_require__(64);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Router = function (_EventEmitter) {
  (0, _inherits3.default)(Router, _EventEmitter);

  function Router(pathname, query) {
    var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : (++cov_1lmtbaxwkx.b[0][0], (++cov_1lmtbaxwkx.b[0][0], {})),
        Component = _ref.Component,
        ErrorComponent = _ref.ErrorComponent,
        err = _ref.err;

    (0, _classCallCheck3.default)(this, Router);
    ++cov_1lmtbaxwkx.f[0];
    ++cov_1lmtbaxwkx.f[0];
    ++cov_1lmtbaxwkx.s[0];
    ++cov_1lmtbaxwkx.s[0];

    // represents the current component key
    var _this = (0, _possibleConstructorReturn3.default)(this, (Router.__proto__ || (0, _getPrototypeOf2.default)(Router)).call(this));

    ++cov_1lmtbaxwkx.s[1];
    ++cov_1lmtbaxwkx.s[1];
    _this.route = toRoute(pathname);

    // set up the component cache (by route keys)
    ++cov_1lmtbaxwkx.s[2];
    ++cov_1lmtbaxwkx.s[2];
    _this.components = (0, _defineProperty3.default)({}, _this.route, { Component: Component, err: err });

    ++cov_1lmtbaxwkx.s[3];
    ++cov_1lmtbaxwkx.s[3];
    _this.ErrorComponent = ErrorComponent;
    ++cov_1lmtbaxwkx.s[4];
    ++cov_1lmtbaxwkx.s[4];
    _this.pathname = pathname;
    ++cov_1lmtbaxwkx.s[5];
    ++cov_1lmtbaxwkx.s[5];
    _this.query = query;
    ++cov_1lmtbaxwkx.s[6];
    ++cov_1lmtbaxwkx.s[6];
    _this.subscriptions = new _set2.default();

    ++cov_1lmtbaxwkx.s[7];
    ++cov_1lmtbaxwkx.s[7];
    _this.componentLoadCancel = null;
    ++cov_1lmtbaxwkx.s[8];
    ++cov_1lmtbaxwkx.s[8];
    _this.onPopState = _this.onPopState.bind(_this);

    ++cov_1lmtbaxwkx.s[9];
    ++cov_1lmtbaxwkx.s[9];
    if (typeof window !== 'undefined') {
      ++cov_1lmtbaxwkx.b[1][0];
      ++cov_1lmtbaxwkx.b[1][0];
      ++cov_1lmtbaxwkx.s[10];
      ++cov_1lmtbaxwkx.s[10];

      // in order for `e.state` to work on the `onpopstate` event
      // we have to register the initial route upon initialization
      _this.replace((0, _url.format)({ pathname: pathname, query: query }), getURL());

      ++cov_1lmtbaxwkx.s[11];
      ++cov_1lmtbaxwkx.s[11];
      window.addEventListener('popstate', _this.onPopState);
    } else {
      ++cov_1lmtbaxwkx.b[1][1];
      ++cov_1lmtbaxwkx.b[1][1];
    }
    return _this;
  }

  (0, _createClass3.default)(Router, [{
    key: 'onPopState',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(e) {
        var _ref3, _ref3$url, url, _ref3$as, as, _ref4, pathname, query, route, _ref5, data, props, error;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                ++cov_1lmtbaxwkx.f[1];
                ++cov_1lmtbaxwkx.f[1];
                ++cov_1lmtbaxwkx.s[12];
                ++cov_1lmtbaxwkx.s[12];

                this.abortComponentLoad();

                _ref3 = (++cov_1lmtbaxwkx.s[13], (++cov_1lmtbaxwkx.b[4][0], (++cov_1lmtbaxwkx.b[4][0], e.state)) || (++cov_1lmtbaxwkx.b[4][1], (++cov_1lmtbaxwkx.b[4][1], {}))), _ref3$url = _ref3.url, url = _ref3$url === undefined ? (++cov_1lmtbaxwkx.b[2][0], (++cov_1lmtbaxwkx.b[2][0], getURL())) : _ref3$url, _ref3$as = _ref3.as, as = _ref3$as === undefined ? (++cov_1lmtbaxwkx.b[3][0], (++cov_1lmtbaxwkx.b[3][0], url)) : _ref3$as;
                _ref4 = (++cov_1lmtbaxwkx.s[14], (0, _url.parse)(url, true)), pathname = _ref4.pathname, query = _ref4.query;
                ++cov_1lmtbaxwkx.s[15];
                ++cov_1lmtbaxwkx.s[13];

                if (this.urlIsNew(pathname, query)) {
                  _context.next = 23;
                  break;
                }

                ++cov_1lmtbaxwkx.b[5][0];
                ++cov_1lmtbaxwkx.b[5][0];
                ++cov_1lmtbaxwkx.s[16];
                ++cov_1lmtbaxwkx.s[14];

                this.emit('routeChangeStart', as);
                ++cov_1lmtbaxwkx.s[17];
                ++cov_1lmtbaxwkx.s[15];
                this.emit('routeChangeComplete', as);
                ++cov_1lmtbaxwkx.s[18];
                ++cov_1lmtbaxwkx.s[16];
                return _context.abrupt('return');

              case 23:
                ++cov_1lmtbaxwkx.b[5][1];
                ++cov_1lmtbaxwkx.b[5][1];

              case 25:
                route = (++cov_1lmtbaxwkx.s[19], toRoute(pathname));
                ++cov_1lmtbaxwkx.s[20];
                ++cov_1lmtbaxwkx.s[17];


                this.emit('routeChangeStart', as);
                ++cov_1lmtbaxwkx.s[21];
                _context.next = 32;
                return this.getRouteInfo(route, pathname, query);

              case 32:
                _ref5 = _context.sent;
                data = _ref5.data;
                props = _ref5.props;
                error = _ref5.error;
                ++cov_1lmtbaxwkx.s[22];
                ++cov_1lmtbaxwkx.s[18];

                if (!((++cov_1lmtbaxwkx.b[7][0], (++cov_1lmtbaxwkx.b[7][0], error)) && (++cov_1lmtbaxwkx.b[7][1], (++cov_1lmtbaxwkx.b[7][1], error.cancelled)))) {
                  _context.next = 49;
                  break;
                }

                ++cov_1lmtbaxwkx.b[6][0];
                ++cov_1lmtbaxwkx.b[6][0];
                ++cov_1lmtbaxwkx.s[23];
                ++cov_1lmtbaxwkx.s[19];

                this.emit('routeChangeError', error, as);
                ++cov_1lmtbaxwkx.s[24];
                ++cov_1lmtbaxwkx.s[20];
                return _context.abrupt('return');

              case 49:
                ++cov_1lmtbaxwkx.b[6][1];
                ++cov_1lmtbaxwkx.b[6][1];

              case 51:
                ++cov_1lmtbaxwkx.s[25];
                ++cov_1lmtbaxwkx.s[21];


                this.route = route;
                ++cov_1lmtbaxwkx.s[26];
                ++cov_1lmtbaxwkx.s[22];
                this.set(pathname, query, (0, _extends3.default)({}, data, { props: props }));

                ++cov_1lmtbaxwkx.s[27];
                ++cov_1lmtbaxwkx.s[23];
                if (error) {
                  ++cov_1lmtbaxwkx.b[8][0];
                  ++cov_1lmtbaxwkx.b[8][0];
                  ++cov_1lmtbaxwkx.s[28];
                  ++cov_1lmtbaxwkx.s[24];

                  this.emit('routeChangeError', error, as);
                } else {
                  ++cov_1lmtbaxwkx.b[8][1];
                  ++cov_1lmtbaxwkx.b[8][1];
                  ++cov_1lmtbaxwkx.s[29];
                  ++cov_1lmtbaxwkx.s[25];

                  this.emit('routeChangeComplete', as);
                }

              case 60:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function onPopState(_x2) {
        return _ref2.apply(this, arguments);
      }

      return onPopState;
    }()
  }, {
    key: 'update',
    value: function update(route, Component) {
      ++cov_1lmtbaxwkx.f[2];
      ++cov_1lmtbaxwkx.f[2];

      var data = (++cov_1lmtbaxwkx.s[30], (++cov_1lmtbaxwkx.b[9][0], (++cov_1lmtbaxwkx.b[9][0], this.components[route])) || (++cov_1lmtbaxwkx.b[9][1], (++cov_1lmtbaxwkx.b[9][1], {})));
      var newData = (++cov_1lmtbaxwkx.s[31], (0, _extends3.default)({}, data, { Component: Component }));
      ++cov_1lmtbaxwkx.s[32];
      ++cov_1lmtbaxwkx.s[26];
      this.components[route] = newData;

      ++cov_1lmtbaxwkx.s[33];
      ++cov_1lmtbaxwkx.s[27];
      if (route === this.route) {
        ++cov_1lmtbaxwkx.b[10][0];
        ++cov_1lmtbaxwkx.b[10][0];
        ++cov_1lmtbaxwkx.s[34];
        ++cov_1lmtbaxwkx.s[28];

        this.notify(newData);
      } else {
        ++cov_1lmtbaxwkx.b[10][1];
        ++cov_1lmtbaxwkx.b[10][1];
      }
    }
  }, {
    key: 'reload',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(route) {
        var url, _ref7, pathname, query, _ref8, data, props, error;

        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                ++cov_1lmtbaxwkx.f[3];
                ++cov_1lmtbaxwkx.f[3];
                ++cov_1lmtbaxwkx.s[35];
                ++cov_1lmtbaxwkx.s[29];

                delete this.components[route];
                ++cov_1lmtbaxwkx.s[36];
                ++cov_1lmtbaxwkx.s[30];
                _context2.next = 9;
                return (0, _prefetch.reloadIfPrefetched)(route);

              case 9:
                ++cov_1lmtbaxwkx.s[37];
                ++cov_1lmtbaxwkx.s[31];

                if (!(route !== this.route)) {
                  _context2.next = 19;
                  break;
                }

                ++cov_1lmtbaxwkx.b[11][0];
                ++cov_1lmtbaxwkx.b[11][0];
                ++cov_1lmtbaxwkx.s[38];
                ++cov_1lmtbaxwkx.s[32];
                return _context2.abrupt('return');

              case 19:
                ++cov_1lmtbaxwkx.b[11][1];
                ++cov_1lmtbaxwkx.b[11][1];

              case 21:
                url = (++cov_1lmtbaxwkx.s[39], window.location.href);
                _ref7 = (++cov_1lmtbaxwkx.s[40], (0, _url.parse)(url, true)), pathname = _ref7.pathname, query = _ref7.query;
                ++cov_1lmtbaxwkx.s[41];
                ++cov_1lmtbaxwkx.s[33];


                this.emit('routeChangeStart', url);
                ++cov_1lmtbaxwkx.s[42];
                _context2.next = 29;
                return this.getRouteInfo(route, pathname, query);

              case 29:
                _ref8 = _context2.sent;
                data = _ref8.data;
                props = _ref8.props;
                error = _ref8.error;
                ++cov_1lmtbaxwkx.s[43];
                ++cov_1lmtbaxwkx.s[34];

                if (!((++cov_1lmtbaxwkx.b[13][0], (++cov_1lmtbaxwkx.b[13][0], error)) && (++cov_1lmtbaxwkx.b[13][1], (++cov_1lmtbaxwkx.b[13][1], error.cancelled)))) {
                  _context2.next = 46;
                  break;
                }

                ++cov_1lmtbaxwkx.b[12][0];
                ++cov_1lmtbaxwkx.b[12][0];
                ++cov_1lmtbaxwkx.s[44];
                ++cov_1lmtbaxwkx.s[35];

                this.emit('routeChangeError', error, url);
                ++cov_1lmtbaxwkx.s[45];
                ++cov_1lmtbaxwkx.s[36];
                return _context2.abrupt('return');

              case 46:
                ++cov_1lmtbaxwkx.b[12][1];
                ++cov_1lmtbaxwkx.b[12][1];

              case 48:
                ++cov_1lmtbaxwkx.s[46];
                ++cov_1lmtbaxwkx.s[37];


                this.notify((0, _extends3.default)({}, data, { props: props }));

                ++cov_1lmtbaxwkx.s[47];
                ++cov_1lmtbaxwkx.s[38];

                if (!error) {
                  _context2.next = 64;
                  break;
                }

                ++cov_1lmtbaxwkx.b[14][0];
                ++cov_1lmtbaxwkx.b[14][0];
                ++cov_1lmtbaxwkx.s[48];
                ++cov_1lmtbaxwkx.s[39];

                this.emit('routeChangeError', error, url);
                ++cov_1lmtbaxwkx.s[49];
                ++cov_1lmtbaxwkx.s[40];
                throw error;

              case 64:
                ++cov_1lmtbaxwkx.b[14][1];
                ++cov_1lmtbaxwkx.b[14][1];

              case 66:
                ++cov_1lmtbaxwkx.s[50];
                ++cov_1lmtbaxwkx.s[41];


                this.emit('routeChangeComplete', url);

              case 69:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function reload(_x3) {
        return _ref6.apply(this, arguments);
      }

      return reload;
    }()
  }, {
    key: 'back',
    value: function back() {
      ++cov_1lmtbaxwkx.f[4];
      ++cov_1lmtbaxwkx.f[4];
      ++cov_1lmtbaxwkx.s[51];
      ++cov_1lmtbaxwkx.s[42];

      window.history.back();
    }
  }, {
    key: 'push',
    value: function push(url) {
      var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (++cov_1lmtbaxwkx.b[15][0], (++cov_1lmtbaxwkx.b[15][0], url));
      ++cov_1lmtbaxwkx.f[5];
      ++cov_1lmtbaxwkx.f[5];
      ++cov_1lmtbaxwkx.s[52];
      ++cov_1lmtbaxwkx.s[43];

      return this.change('pushState', url, as);
    }
  }, {
    key: 'replace',
    value: function replace(url) {
      var as = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (++cov_1lmtbaxwkx.b[16][0], (++cov_1lmtbaxwkx.b[16][0], url));
      ++cov_1lmtbaxwkx.f[6];
      ++cov_1lmtbaxwkx.f[6];
      ++cov_1lmtbaxwkx.s[53];
      ++cov_1lmtbaxwkx.s[44];

      return this.change('replaceState', url, as);
    }
  }, {
    key: 'change',
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3(method, url, as) {
        var _ref10, pathname, query, route, _ref11, data, props, error, changeState;

        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                changeState = function changeState() {
                  ++cov_1lmtbaxwkx.f[8];
                  ++cov_1lmtbaxwkx.f[8];
                  ++cov_1lmtbaxwkx.s[75];
                  ++cov_1lmtbaxwkx.s[63];

                  if ((++cov_1lmtbaxwkx.b[22][0], (++cov_1lmtbaxwkx.b[22][0], method !== 'pushState')) || (++cov_1lmtbaxwkx.b[22][1], (++cov_1lmtbaxwkx.b[22][1], getURL() !== as))) {
                    ++cov_1lmtbaxwkx.b[21][0];
                    ++cov_1lmtbaxwkx.b[21][0];
                    ++cov_1lmtbaxwkx.s[76];
                    ++cov_1lmtbaxwkx.s[64];

                    window.history[method]({ url: url, as: as }, null, as);
                  } else {
                    ++cov_1lmtbaxwkx.b[21][1];
                    ++cov_1lmtbaxwkx.b[21][1];
                  }
                };

                ++cov_1lmtbaxwkx.f[7];
                ++cov_1lmtbaxwkx.f[7];
                ++cov_1lmtbaxwkx.s[54];
                ++cov_1lmtbaxwkx.s[45];

                this.abortComponentLoad();
                _ref10 = (++cov_1lmtbaxwkx.s[55], (0, _url.parse)(url, true)), pathname = _ref10.pathname, query = _ref10.query;
                ++cov_1lmtbaxwkx.s[56];
                ++cov_1lmtbaxwkx.s[46];

                if (this.urlIsNew(pathname, query)) {
                  _context3.next = 26;
                  break;
                }

                ++cov_1lmtbaxwkx.b[17][0];
                ++cov_1lmtbaxwkx.b[17][0];
                ++cov_1lmtbaxwkx.s[57];
                ++cov_1lmtbaxwkx.s[47];

                this.emit('routeChangeStart', as);
                ++cov_1lmtbaxwkx.s[58];
                ++cov_1lmtbaxwkx.s[48];
                changeState();
                ++cov_1lmtbaxwkx.s[59];
                ++cov_1lmtbaxwkx.s[49];
                this.emit('routeChangeComplete', as);
                ++cov_1lmtbaxwkx.s[60];
                ++cov_1lmtbaxwkx.s[50];
                return _context3.abrupt('return', true);

              case 26:
                ++cov_1lmtbaxwkx.b[17][1];
                ++cov_1lmtbaxwkx.b[17][1];

              case 28:
                route = (++cov_1lmtbaxwkx.s[61], toRoute(pathname));
                ++cov_1lmtbaxwkx.s[62];
                ++cov_1lmtbaxwkx.s[51];


                this.emit('routeChangeStart', as);
                ++cov_1lmtbaxwkx.s[63];
                _context3.next = 35;
                return this.getRouteInfo(route, pathname, query);

              case 35:
                _ref11 = _context3.sent;
                data = _ref11.data;
                props = _ref11.props;
                error = _ref11.error;
                ++cov_1lmtbaxwkx.s[64];
                ++cov_1lmtbaxwkx.s[52];

                if (!((++cov_1lmtbaxwkx.b[19][0], (++cov_1lmtbaxwkx.b[19][0], error)) && (++cov_1lmtbaxwkx.b[19][1], (++cov_1lmtbaxwkx.b[19][1], error.cancelled)))) {
                  _context3.next = 52;
                  break;
                }

                ++cov_1lmtbaxwkx.b[18][0];
                ++cov_1lmtbaxwkx.b[18][0];
                ++cov_1lmtbaxwkx.s[65];
                ++cov_1lmtbaxwkx.s[53];

                this.emit('routeChangeError', error, as);
                ++cov_1lmtbaxwkx.s[66];
                ++cov_1lmtbaxwkx.s[54];
                return _context3.abrupt('return', false);

              case 52:
                ++cov_1lmtbaxwkx.b[18][1];
                ++cov_1lmtbaxwkx.b[18][1];

              case 54:
                ++cov_1lmtbaxwkx.s[67];
                ++cov_1lmtbaxwkx.s[55];


                changeState();

                ++cov_1lmtbaxwkx.s[68];
                ++cov_1lmtbaxwkx.s[56];
                this.route = route;
                ++cov_1lmtbaxwkx.s[69];
                ++cov_1lmtbaxwkx.s[57];
                this.set(pathname, query, (0, _extends3.default)({}, data, { props: props }));

                ++cov_1lmtbaxwkx.s[70];
                ++cov_1lmtbaxwkx.s[58];

                if (!error) {
                  _context3.next = 76;
                  break;
                }

                ++cov_1lmtbaxwkx.b[20][0];
                ++cov_1lmtbaxwkx.b[20][0];
                ++cov_1lmtbaxwkx.s[71];
                ++cov_1lmtbaxwkx.s[59];

                this.emit('routeChangeError', error, as);
                ++cov_1lmtbaxwkx.s[72];
                ++cov_1lmtbaxwkx.s[60];
                throw error;

              case 76:
                ++cov_1lmtbaxwkx.b[20][1];
                ++cov_1lmtbaxwkx.b[20][1];

              case 78:
                ++cov_1lmtbaxwkx.s[73];
                ++cov_1lmtbaxwkx.s[61];


                this.emit('routeChangeComplete', as);
                ++cov_1lmtbaxwkx.s[74];
                ++cov_1lmtbaxwkx.s[62];
                return _context3.abrupt('return', true);

              case 84:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function change(_x6, _x7, _x8) {
        return _ref9.apply(this, arguments);
      }

      return change;
    }()
  }, {
    key: 'getRouteInfo',
    value: function () {
      var _ref12 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4(route, pathname, query) {
        var routeInfo, _ref13, Component, err, _xhr, ctx, _Component, _ctx;

        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                ++cov_1lmtbaxwkx.f[9];
                ++cov_1lmtbaxwkx.f[9];
                routeInfo = (++cov_1lmtbaxwkx.s[77], {});
                ++cov_1lmtbaxwkx.s[78];
                ++cov_1lmtbaxwkx.s[65];
                _context4.prev = 5;
                ++cov_1lmtbaxwkx.s[79];
                _context4.next = 9;
                return this.fetchComponent(route);

              case 9:
                _ref13 = routeInfo.data = _context4.sent;
                Component = _ref13.Component;
                err = _ref13.err;
                _xhr = _ref13.xhr;
                ctx = (++cov_1lmtbaxwkx.s[80], { err: err, xhr: _xhr, pathname: pathname, query: query });
                ++cov_1lmtbaxwkx.s[81];
                ++cov_1lmtbaxwkx.s[66];
                _context4.next = 18;
                return this.getInitialProps(Component, ctx);

              case 18:
                routeInfo.props = _context4.sent;
                _context4.next = 51;
                break;

              case 21:
                _context4.prev = 21;
                _context4.t0 = _context4['catch'](5);
                ++cov_1lmtbaxwkx.s[82];
                ++cov_1lmtbaxwkx.s[67];

                if (!_context4.t0.cancelled) {
                  _context4.next = 33;
                  break;
                }

                ++cov_1lmtbaxwkx.b[23][0];
                ++cov_1lmtbaxwkx.b[23][0];
                ++cov_1lmtbaxwkx.s[83];
                ++cov_1lmtbaxwkx.s[68];
                return _context4.abrupt('return', { error: _context4.t0 });

              case 33:
                ++cov_1lmtbaxwkx.b[23][1];
                ++cov_1lmtbaxwkx.b[23][1];

              case 35:
                _Component = (++cov_1lmtbaxwkx.s[84], this.ErrorComponent);
                ++cov_1lmtbaxwkx.s[85];
                ++cov_1lmtbaxwkx.s[69];

                routeInfo.data = { Component: _Component, err: _context4.t0 };
                _ctx = (++cov_1lmtbaxwkx.s[86], { err: _context4.t0, pathname: pathname, query: query });
                ++cov_1lmtbaxwkx.s[87];
                ++cov_1lmtbaxwkx.s[70];
                _context4.next = 44;
                return this.getInitialProps(_Component, _ctx);

              case 44:
                routeInfo.props = _context4.sent;
                ++cov_1lmtbaxwkx.s[88];
                ++cov_1lmtbaxwkx.s[71];


                routeInfo.error = _context4.t0;
                ++cov_1lmtbaxwkx.s[89];
                ++cov_1lmtbaxwkx.s[72];
                console.error(_context4.t0);

              case 51:
                ++cov_1lmtbaxwkx.s[90];
                ++cov_1lmtbaxwkx.s[73];
                return _context4.abrupt('return', routeInfo);

              case 54:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this, [[5, 21]]);
      }));

      function getRouteInfo(_x9, _x10, _x11) {
        return _ref12.apply(this, arguments);
      }

      return getRouteInfo;
    }()
  }, {
    key: 'set',
    value: function set(pathname, query, data) {
      ++cov_1lmtbaxwkx.f[10];
      ++cov_1lmtbaxwkx.f[10];
      ++cov_1lmtbaxwkx.s[91];
      ++cov_1lmtbaxwkx.s[74];

      this.pathname = pathname;
      ++cov_1lmtbaxwkx.s[92];
      ++cov_1lmtbaxwkx.s[75];
      this.query = query;
      ++cov_1lmtbaxwkx.s[93];
      ++cov_1lmtbaxwkx.s[76];
      this.notify(data);
    }
  }, {
    key: 'urlIsNew',
    value: function urlIsNew(pathname, query) {
      ++cov_1lmtbaxwkx.f[11];
      ++cov_1lmtbaxwkx.f[11];
      ++cov_1lmtbaxwkx.s[94];
      ++cov_1lmtbaxwkx.s[77];

      return (++cov_1lmtbaxwkx.b[24][0], (++cov_1lmtbaxwkx.b[24][0], this.pathname !== pathname)) || (++cov_1lmtbaxwkx.b[24][1], (++cov_1lmtbaxwkx.b[24][1], !(0, _shallowEquals2.default)(query, this.query)));
    }
  }, {
    key: 'fetchComponent',
    value: function () {
      var _ref14 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5(route) {
        var _this2 = this;

        var data, cancel;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                ++cov_1lmtbaxwkx.f[12];
                ++cov_1lmtbaxwkx.f[12];
                data = (++cov_1lmtbaxwkx.s[95], this.components[route]);
                ++cov_1lmtbaxwkx.s[96];
                ++cov_1lmtbaxwkx.s[78];

                if (data) {
                  _context5.next = 22;
                  break;
                }

                ++cov_1lmtbaxwkx.b[25][0];
                ++cov_1lmtbaxwkx.b[25][0];
                cancel = void 0;
                ++cov_1lmtbaxwkx.s[97];
                ++cov_1lmtbaxwkx.s[79];
                _context5.next = 13;
                return new _promise2.default(function (resolve, reject) {
                  ++cov_1lmtbaxwkx.f[13];
                  ++cov_1lmtbaxwkx.f[13];
                  ++cov_1lmtbaxwkx.s[98];
                  ++cov_1lmtbaxwkx.s[80];

                  _this2.componentLoadCancel = cancel = function cancel() {
                    ++cov_1lmtbaxwkx.f[14];
                    ++cov_1lmtbaxwkx.f[14];
                    ++cov_1lmtbaxwkx.s[99];
                    ++cov_1lmtbaxwkx.s[81];

                    if (xhr.abort) {
                      ++cov_1lmtbaxwkx.b[26][0];
                      ++cov_1lmtbaxwkx.b[26][0];
                      ++cov_1lmtbaxwkx.s[100];
                      ++cov_1lmtbaxwkx.s[82];

                      xhr.abort();
                      var error = (++cov_1lmtbaxwkx.s[101], new Error('Fetching componenet cancelled'));
                      ++cov_1lmtbaxwkx.s[102];
                      ++cov_1lmtbaxwkx.s[83];
                      error.cancelled = true;
                      ++cov_1lmtbaxwkx.s[103];
                      ++cov_1lmtbaxwkx.s[84];
                      reject(error);
                    } else {
                      ++cov_1lmtbaxwkx.b[26][1];
                      ++cov_1lmtbaxwkx.b[26][1];
                    }
                  };

                  var url = (++cov_1lmtbaxwkx.s[104], '/_next/' + __NEXT_DATA__.buildId + '/pages' + route);
                  var xhr = (++cov_1lmtbaxwkx.s[105], loadComponent(url, function (err, data) {
                    ++cov_1lmtbaxwkx.f[15];
                    ++cov_1lmtbaxwkx.f[15];
                    ++cov_1lmtbaxwkx.s[106];
                    ++cov_1lmtbaxwkx.s[85];

                    if (err) {
                        ++cov_1lmtbaxwkx.b[27][0];
                        ++cov_1lmtbaxwkx.b[27][0];
                        ++cov_1lmtbaxwkx.s[107];
                        ++cov_1lmtbaxwkx.s[86];
                        return reject(err);
                      } else {
                      ++cov_1lmtbaxwkx.b[27][1];
                      ++cov_1lmtbaxwkx.b[27][1];
                    }++cov_1lmtbaxwkx.s[108];
                    ++cov_1lmtbaxwkx.s[87];
                    resolve((0, _extends3.default)({}, data, { xhr: xhr }));
                  }));
                });

              case 13:
                data = _context5.sent;
                ++cov_1lmtbaxwkx.s[109];
                ++cov_1lmtbaxwkx.s[88];


                if (cancel === this.componentLoadCancel) {
                  ++cov_1lmtbaxwkx.b[28][0];
                  ++cov_1lmtbaxwkx.b[28][0];
                  ++cov_1lmtbaxwkx.s[110];
                  ++cov_1lmtbaxwkx.s[89];

                  this.componentLoadCancel = null;
                } else {
                  ++cov_1lmtbaxwkx.b[28][1];
                  ++cov_1lmtbaxwkx.b[28][1];
                }

                ++cov_1lmtbaxwkx.s[111];
                ++cov_1lmtbaxwkx.s[90];
                this.components[route] = data;
                _context5.next = 24;
                break;

              case 22:
                ++cov_1lmtbaxwkx.b[25][1];
                ++cov_1lmtbaxwkx.b[25][1];

              case 24:
                ++cov_1lmtbaxwkx.s[112];
                ++cov_1lmtbaxwkx.s[91];
                return _context5.abrupt('return', data);

              case 27:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function fetchComponent(_x12) {
        return _ref14.apply(this, arguments);
      }

      return fetchComponent;
    }()
  }, {
    key: 'getInitialProps',
    value: function () {
      var _ref15 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee6(Component, ctx) {
        var cancelled, cancel, props, err;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                ++cov_1lmtbaxwkx.f[16];
                ++cov_1lmtbaxwkx.f[16];
                cancelled = (++cov_1lmtbaxwkx.s[113], false);
                ++cov_1lmtbaxwkx.s[114];
                ++cov_1lmtbaxwkx.s[92];

                cancel = function cancel() {
                  ++cov_1lmtbaxwkx.f[17];
                  ++cov_1lmtbaxwkx.f[17];
                  ++cov_1lmtbaxwkx.s[115];
                  ++cov_1lmtbaxwkx.s[93];
                  cancelled = true;
                };

                ++cov_1lmtbaxwkx.s[116];
                ++cov_1lmtbaxwkx.s[94];

                this.componentLoadCancel = cancel;

                ++cov_1lmtbaxwkx.s[117];
                _context6.next = 12;
                return (0, _utils.loadGetInitialProps)(Component, ctx);

              case 12:
                props = _context6.sent;
                ++cov_1lmtbaxwkx.s[118];
                ++cov_1lmtbaxwkx.s[95];


                if (cancel === this.componentLoadCancel) {
                  ++cov_1lmtbaxwkx.b[29][0];
                  ++cov_1lmtbaxwkx.b[29][0];
                  ++cov_1lmtbaxwkx.s[119];
                  ++cov_1lmtbaxwkx.s[96];

                  this.componentLoadCancel = null;
                } else {
                  ++cov_1lmtbaxwkx.b[29][1];
                  ++cov_1lmtbaxwkx.b[29][1];
                }

                ++cov_1lmtbaxwkx.s[120];
                ++cov_1lmtbaxwkx.s[97];

                if (!cancelled) {
                  _context6.next = 30;
                  break;
                }

                ++cov_1lmtbaxwkx.b[30][0];
                ++cov_1lmtbaxwkx.b[30][0];
                err = (++cov_1lmtbaxwkx.s[121], new Error('Loading initial props cancelled'));
                ++cov_1lmtbaxwkx.s[122];
                ++cov_1lmtbaxwkx.s[98];

                err.cancelled = true;
                ++cov_1lmtbaxwkx.s[123];
                ++cov_1lmtbaxwkx.s[99];
                throw err;

              case 30:
                ++cov_1lmtbaxwkx.b[30][1];
                ++cov_1lmtbaxwkx.b[30][1];

              case 32:
                ++cov_1lmtbaxwkx.s[124];
                ++cov_1lmtbaxwkx.s[100];
                return _context6.abrupt('return', props);

              case 35:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function getInitialProps(_x13, _x14) {
        return _ref15.apply(this, arguments);
      }

      return getInitialProps;
    }()
  }, {
    key: 'abortComponentLoad',
    value: function abortComponentLoad() {
      ++cov_1lmtbaxwkx.f[18];
      ++cov_1lmtbaxwkx.f[18];
      ++cov_1lmtbaxwkx.s[125];
      ++cov_1lmtbaxwkx.s[101];

      if (this.componentLoadCancel) {
        ++cov_1lmtbaxwkx.b[31][0];
        ++cov_1lmtbaxwkx.b[31][0];
        ++cov_1lmtbaxwkx.s[126];
        ++cov_1lmtbaxwkx.s[102];

        this.componentLoadCancel();
        ++cov_1lmtbaxwkx.s[127];
        ++cov_1lmtbaxwkx.s[103];
        this.componentLoadCancel = null;
      } else {
        ++cov_1lmtbaxwkx.b[31][1];
        ++cov_1lmtbaxwkx.b[31][1];
      }
    }
  }, {
    key: 'notify',
    value: function notify(data) {
      ++cov_1lmtbaxwkx.f[19];
      ++cov_1lmtbaxwkx.f[19];
      ++cov_1lmtbaxwkx.s[128];
      ++cov_1lmtbaxwkx.s[104];

      this.subscriptions.forEach(function (fn) {
        ++cov_1lmtbaxwkx.f[20];
        ++cov_1lmtbaxwkx.f[20];
        ++cov_1lmtbaxwkx.s[129];
        ++cov_1lmtbaxwkx.s[105];
        return fn(data);
      });
    }
  }, {
    key: 'subscribe',
    value: function subscribe(fn) {
      var _this3 = this;

      ++cov_1lmtbaxwkx.f[21];
      ++cov_1lmtbaxwkx.f[21];
      ++cov_1lmtbaxwkx.s[130];
      ++cov_1lmtbaxwkx.s[106];

      this.subscriptions.add(fn);
      ++cov_1lmtbaxwkx.s[131];
      ++cov_1lmtbaxwkx.s[107];
      return function () {
        ++cov_1lmtbaxwkx.f[22];
        ++cov_1lmtbaxwkx.f[22];
        ++cov_1lmtbaxwkx.s[132];
        ++cov_1lmtbaxwkx.s[108];
        return _this3.subscriptions.delete(fn);
      };
    }
  }]);
  return Router;
}(_events.EventEmitter);

exports.default = Router;


function getURL() {
  ++cov_1lmtbaxwkx.f[23];
  ++cov_1lmtbaxwkx.f[23];
  ++cov_1lmtbaxwkx.s[133];
  ++cov_1lmtbaxwkx.s[109];

  return window.location.pathname + ((++cov_1lmtbaxwkx.b[32][0], (++cov_1lmtbaxwkx.b[32][0], window.location.search)) || (++cov_1lmtbaxwkx.b[32][1], (++cov_1lmtbaxwkx.b[32][1], ''))) + ((++cov_1lmtbaxwkx.b[33][0], (++cov_1lmtbaxwkx.b[33][0], window.location.hash)) || (++cov_1lmtbaxwkx.b[33][1], (++cov_1lmtbaxwkx.b[33][1], '')));
}

function toRoute(path) {
  ++cov_1lmtbaxwkx.f[24];
  ++cov_1lmtbaxwkx.f[24];
  ++cov_1lmtbaxwkx.s[134];
  ++cov_1lmtbaxwkx.s[110];

  return (++cov_1lmtbaxwkx.b[34][0], (++cov_1lmtbaxwkx.b[34][0], path.replace(/\/$/, ''))) || (++cov_1lmtbaxwkx.b[34][1], (++cov_1lmtbaxwkx.b[34][1], '/'));
}

function loadComponent(url, fn) {
  ++cov_1lmtbaxwkx.f[25];
  ++cov_1lmtbaxwkx.f[25];
  ++cov_1lmtbaxwkx.s[135];
  ++cov_1lmtbaxwkx.s[111];

  return loadJSON(url, function (err, data) {
    ++cov_1lmtbaxwkx.f[26];
    ++cov_1lmtbaxwkx.f[26];
    ++cov_1lmtbaxwkx.s[136];
    ++cov_1lmtbaxwkx.s[112];

    if (err) {
        ++cov_1lmtbaxwkx.b[35][0];
        ++cov_1lmtbaxwkx.b[35][0];
        ++cov_1lmtbaxwkx.s[137];
        ++cov_1lmtbaxwkx.s[113];
        return fn(err);
      } else {
      ++cov_1lmtbaxwkx.b[35][1];
      ++cov_1lmtbaxwkx.b[35][1];
    }var module = void 0;
    ++cov_1lmtbaxwkx.s[138];
    ++cov_1lmtbaxwkx.s[114];
    try {
      ++cov_1lmtbaxwkx.s[139];
      ++cov_1lmtbaxwkx.s[115];

      module = (0, _evalScript2.default)(data.component);
    } catch (err) {
      ++cov_1lmtbaxwkx.s[140];
      ++cov_1lmtbaxwkx.s[116];

      return fn(err);
    }

    var Component = (++cov_1lmtbaxwkx.s[141], (++cov_1lmtbaxwkx.b[36][0], (++cov_1lmtbaxwkx.b[36][0], module.default)) || (++cov_1lmtbaxwkx.b[36][1], (++cov_1lmtbaxwkx.b[36][1], module)));
    ++cov_1lmtbaxwkx.s[142];
    ++cov_1lmtbaxwkx.s[117];
    fn(null, { Component: Component, err: data.err });
  });
}

function loadJSON(url, fn) {
  ++cov_1lmtbaxwkx.f[27];
  ++cov_1lmtbaxwkx.f[27];

  var xhr = (++cov_1lmtbaxwkx.s[143], new window.XMLHttpRequest());
  ++cov_1lmtbaxwkx.s[144];
  ++cov_1lmtbaxwkx.s[118];
  xhr.onload = function () {
    ++cov_1lmtbaxwkx.f[28];
    ++cov_1lmtbaxwkx.f[28];

    var data = void 0;

    ++cov_1lmtbaxwkx.s[145];
    ++cov_1lmtbaxwkx.s[119];
    try {
      ++cov_1lmtbaxwkx.s[146];
      ++cov_1lmtbaxwkx.s[120];

      data = JSON.parse(xhr.responseText);
    } catch (err) {
      ++cov_1lmtbaxwkx.s[147];
      ++cov_1lmtbaxwkx.s[121];

      fn(new Error('Failed to load JSON for ' + url));
      ++cov_1lmtbaxwkx.s[148];
      ++cov_1lmtbaxwkx.s[122];
      return;
    }

    ++cov_1lmtbaxwkx.s[149];
    ++cov_1lmtbaxwkx.s[123];
    fn(null, data);
  };
  ++cov_1lmtbaxwkx.s[150];
  ++cov_1lmtbaxwkx.s[124];
  xhr.onerror = function () {
    ++cov_1lmtbaxwkx.f[29];
    ++cov_1lmtbaxwkx.f[29];
    ++cov_1lmtbaxwkx.s[151];
    ++cov_1lmtbaxwkx.s[125];

    fn(new Error('XHR failed. Status: ' + xhr.status));
  };
  ++cov_1lmtbaxwkx.s[152];
  ++cov_1lmtbaxwkx.s[126];
  xhr.onabort = function () {
    ++cov_1lmtbaxwkx.f[30];
    ++cov_1lmtbaxwkx.f[30];

    var err = (++cov_1lmtbaxwkx.s[153], new Error('XHR aborted'));
    ++cov_1lmtbaxwkx.s[154];
    ++cov_1lmtbaxwkx.s[127];
    err.cancelled = true;
    ++cov_1lmtbaxwkx.s[155];
    ++cov_1lmtbaxwkx.s[128];
    fn(err);
  };
  ++cov_1lmtbaxwkx.s[156];
  ++cov_1lmtbaxwkx.s[129];
  xhr.open('GET', url);
  ++cov_1lmtbaxwkx.s[157];
  ++cov_1lmtbaxwkx.s[130];
  xhr.setRequestHeader('Accept', 'application/json');
  ++cov_1lmtbaxwkx.s[158];
  ++cov_1lmtbaxwkx.s[131];
  xhr.send();

  ++cov_1lmtbaxwkx.s[159];
  ++cov_1lmtbaxwkx.s[132];
  return xhr;
}

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/data/zeit/next.js/dist/lib/router/router.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/data/zeit/next.js/dist/lib/router/router.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

var cov_9koz2pkbt = function () {
  var path = '/data/zeit/next.js/lib/side-effect.js',
      hash = '7f6a876af4f779dce4ed4913a41f313b2569087d',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/side-effect.js',
    statementMap: {
      '0': {
        start: {
          line: 4,
          column: 2
        },
        end: {
          line: 6,
          column: 3
        }
      },
      '1': {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 73
        }
      },
      '2': {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 10,
          column: 3
        }
      },
      '3': {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 75
        }
      },
      '4': {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 14,
          column: 3
        }
      },
      '5': {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 86
        }
      },
      '6': {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 79
        }
      },
      '7': {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 82,
          column: 3
        }
      },
      '8': {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 23,
          column: 5
        }
      },
      '9': {
        start: {
          line: 22,
          column: 6
        },
        end: {
          line: 22,
          column: 75
        }
      },
      '10': {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 29,
          column: 60
        }
      },
      '11': {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 35,
          column: 7
        }
      },
      '12': {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 56
        }
      },
      '13': {
        start: {
          line: 33,
          column: 13
        },
        end: {
          line: 35,
          column: 7
        }
      },
      '14': {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 39
        }
      },
      '15': {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 20
        }
      },
      '16': {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      '17': {
        start: {
          line: 53,
          column: 10
        },
        end: {
          line: 53,
          column: 109
        }
      },
      '18': {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 25
        }
      },
      '19': {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 32
        }
      },
      '20': {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 28
        }
      },
      '21': {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 34
        }
      },
      '22': {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 24
        }
      },
      '23': {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 24
        }
      },
      '24': {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 37
        }
      },
      '25': {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 24
        }
      },
      '26': {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 75
        }
      },
      '27': {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 21
        }
      }
    },
    fnMap: {
      '0': {
        name: 'withSideEffect',
        decl: {
          start: {
            line: 3,
            column: 24
          },
          end: {
            line: 3,
            column: 38
          }
        },
        loc: {
          start: {
            line: 3,
            column: 110
          },
          end: {
            line: 83,
            column: 1
          }
        }
      },
      '1': {
        name: 'getDisplayName',
        decl: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 25
          }
        },
        loc: {
          start: {
            line: 16,
            column: 45
          },
          end: {
            line: 18,
            column: 3
          }
        }
      },
      '2': {
        name: 'wrap',
        decl: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 22
          }
        },
        loc: {
          start: {
            line: 20,
            column: 42
          },
          end: {
            line: 82,
            column: 3
          }
        }
      },
      '3': {
        name: 'emitChange',
        decl: {
          start: {
            line: 28,
            column: 13
          },
          end: {
            line: 28,
            column: 23
          }
        },
        loc: {
          start: {
            line: 28,
            column: 36
          },
          end: {
            line: 36,
            column: 5
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 47,
            column: 6
          },
          end: {
            line: 47,
            column: 7
          }
        },
        loc: {
          start: {
            line: 47,
            column: 21
          },
          end: {
            line: 49,
            column: 7
          }
        }
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 51,
            column: 6
          },
          end: {
            line: 51,
            column: 7
          }
        },
        loc: {
          start: {
            line: 51,
            column: 23
          },
          end: {
            line: 60,
            column: 7
          }
        }
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 62,
            column: 6
          },
          end: {
            line: 62,
            column: 7
          }
        },
        loc: {
          start: {
            line: 62,
            column: 28
          },
          end: {
            line: 65,
            column: 7
          }
        }
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 67,
            column: 7
          }
        },
        loc: {
          start: {
            line: 67,
            column: 28
          },
          end: {
            line: 69,
            column: 7
          }
        }
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 71,
            column: 6
          },
          end: {
            line: 71,
            column: 7
          }
        },
        loc: {
          start: {
            line: 71,
            column: 30
          },
          end: {
            line: 74,
            column: 7
          }
        }
      },
      '9': {
        name: '(anonymous_9)',
        decl: {
          start: {
            line: 76,
            column: 6
          },
          end: {
            line: 76,
            column: 7
          }
        },
        loc: {
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 78,
            column: 7
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 4,
            column: 2
          },
          end: {
            line: 6,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 4,
            column: 2
          },
          end: {
            line: 6,
            column: 3
          }
        }, {
          start: {
            line: 4,
            column: 2
          },
          end: {
            line: 6,
            column: 3
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        }, {
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 14,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 14,
            column: 3
          }
        }, {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 14,
            column: 3
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 12,
            column: 6
          },
          end: {
            line: 12,
            column: 87
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 79
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }, {
          start: {
            line: undefined,
            column: undefined
          },
          end: {
            line: undefined,
            column: undefined
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        }, {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 35,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 35,
            column: 7
          }
        }, {
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 35,
            column: 7
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 33,
            column: 13
          },
          end: {
            line: 35,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 33,
            column: 13
          },
          end: {
            line: 35,
            column: 7
          }
        }, {
          start: {
            line: 33,
            column: 13
          },
          end: {
            line: 35,
            column: 7
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _getPrototypeOf = __webpack_require__(25);

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = __webpack_require__(19);

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = __webpack_require__(20);

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = __webpack_require__(27);

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _inherits2 = __webpack_require__(26);

var _inherits3 = _interopRequireDefault(_inherits2);

var _toConsumableArray2 = __webpack_require__(95);

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _set = __webpack_require__(93);

var _set2 = _interopRequireDefault(_set);

var cov_9koz2pkbt = function () {
  var path = '/data/zeit/next.js/lib/side-effect.js',
      hash = '0b126bc078ff20b931f113a06d9eee690755a3ff',
      global = new Function('return this')(),
      gcv = '__coverage__',
      coverageData = {
    path: '/data/zeit/next.js/lib/side-effect.js',
    statementMap: {
      '0': {
        start: {
          line: 4,
          column: 2
        },
        end: {
          line: 6,
          column: 3
        }
      },
      '1': {
        start: {
          line: 5,
          column: 4
        },
        end: {
          line: 5,
          column: 73
        }
      },
      '2': {
        start: {
          line: 8,
          column: 2
        },
        end: {
          line: 10,
          column: 3
        }
      },
      '3': {
        start: {
          line: 9,
          column: 4
        },
        end: {
          line: 9,
          column: 75
        }
      },
      '4': {
        start: {
          line: 12,
          column: 2
        },
        end: {
          line: 14,
          column: 3
        }
      },
      '5': {
        start: {
          line: 13,
          column: 4
        },
        end: {
          line: 13,
          column: 86
        }
      },
      '6': {
        start: {
          line: 17,
          column: 4
        },
        end: {
          line: 17,
          column: 79
        }
      },
      '7': {
        start: {
          line: 20,
          column: 2
        },
        end: {
          line: 82,
          column: 3
        }
      },
      '8': {
        start: {
          line: 21,
          column: 4
        },
        end: {
          line: 23,
          column: 5
        }
      },
      '9': {
        start: {
          line: 22,
          column: 6
        },
        end: {
          line: 22,
          column: 75
        }
      },
      '10': {
        start: {
          line: 25,
          column: 29
        },
        end: {
          line: 25,
          column: 38
        }
      },
      '11': {
        start: {
          line: 29,
          column: 6
        },
        end: {
          line: 29,
          column: 60
        }
      },
      '12': {
        start: {
          line: 31,
          column: 6
        },
        end: {
          line: 35,
          column: 7
        }
      },
      '13': {
        start: {
          line: 32,
          column: 8
        },
        end: {
          line: 32,
          column: 56
        }
      },
      '14': {
        start: {
          line: 33,
          column: 13
        },
        end: {
          line: 35,
          column: 7
        }
      },
      '15': {
        start: {
          line: 34,
          column: 8
        },
        end: {
          line: 34,
          column: 39
        }
      },
      '16': {
        start: {
          line: 48,
          column: 8
        },
        end: {
          line: 48,
          column: 20
        }
      },
      '17': {
        start: {
          line: 52,
          column: 8
        },
        end: {
          line: 54,
          column: 9
        }
      },
      '18': {
        start: {
          line: 53,
          column: 10
        },
        end: {
          line: 53,
          column: 109
        }
      },
      '19': {
        start: {
          line: 56,
          column: 30
        },
        end: {
          line: 56,
          column: 35
        }
      },
      '20': {
        start: {
          line: 57,
          column: 8
        },
        end: {
          line: 57,
          column: 25
        }
      },
      '21': {
        start: {
          line: 58,
          column: 8
        },
        end: {
          line: 58,
          column: 32
        }
      },
      '22': {
        start: {
          line: 59,
          column: 8
        },
        end: {
          line: 59,
          column: 28
        }
      },
      '23': {
        start: {
          line: 63,
          column: 8
        },
        end: {
          line: 63,
          column: 34
        }
      },
      '24': {
        start: {
          line: 64,
          column: 8
        },
        end: {
          line: 64,
          column: 24
        }
      },
      '25': {
        start: {
          line: 68,
          column: 8
        },
        end: {
          line: 68,
          column: 24
        }
      },
      '26': {
        start: {
          line: 72,
          column: 8
        },
        end: {
          line: 72,
          column: 37
        }
      },
      '27': {
        start: {
          line: 73,
          column: 8
        },
        end: {
          line: 73,
          column: 24
        }
      },
      '28': {
        start: {
          line: 77,
          column: 8
        },
        end: {
          line: 77,
          column: 75
        }
      },
      '29': {
        start: {
          line: 81,
          column: 4
        },
        end: {
          line: 81,
          column: 21
        }
      }
    },
    fnMap: {
      '0': {
        name: 'withSideEffect',
        decl: {
          start: {
            line: 3,
            column: 24
          },
          end: {
            line: 3,
            column: 38
          }
        },
        loc: {
          start: {
            line: 3,
            column: 110
          },
          end: {
            line: 83,
            column: 1
          }
        }
      },
      '1': {
        name: 'getDisplayName',
        decl: {
          start: {
            line: 16,
            column: 11
          },
          end: {
            line: 16,
            column: 25
          }
        },
        loc: {
          start: {
            line: 16,
            column: 45
          },
          end: {
            line: 18,
            column: 3
          }
        }
      },
      '2': {
        name: 'wrap',
        decl: {
          start: {
            line: 20,
            column: 18
          },
          end: {
            line: 20,
            column: 22
          }
        },
        loc: {
          start: {
            line: 20,
            column: 42
          },
          end: {
            line: 82,
            column: 3
          }
        }
      },
      '3': {
        name: 'emitChange',
        decl: {
          start: {
            line: 28,
            column: 13
          },
          end: {
            line: 28,
            column: 23
          }
        },
        loc: {
          start: {
            line: 28,
            column: 36
          },
          end: {
            line: 36,
            column: 5
          }
        }
      },
      '4': {
        name: '(anonymous_4)',
        decl: {
          start: {
            line: 47,
            column: 6
          },
          end: {
            line: 47,
            column: 7
          }
        },
        loc: {
          start: {
            line: 47,
            column: 21
          },
          end: {
            line: 49,
            column: 7
          }
        }
      },
      '5': {
        name: '(anonymous_5)',
        decl: {
          start: {
            line: 51,
            column: 6
          },
          end: {
            line: 51,
            column: 7
          }
        },
        loc: {
          start: {
            line: 51,
            column: 23
          },
          end: {
            line: 60,
            column: 7
          }
        }
      },
      '6': {
        name: '(anonymous_6)',
        decl: {
          start: {
            line: 62,
            column: 6
          },
          end: {
            line: 62,
            column: 7
          }
        },
        loc: {
          start: {
            line: 62,
            column: 28
          },
          end: {
            line: 65,
            column: 7
          }
        }
      },
      '7': {
        name: '(anonymous_7)',
        decl: {
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 67,
            column: 7
          }
        },
        loc: {
          start: {
            line: 67,
            column: 28
          },
          end: {
            line: 69,
            column: 7
          }
        }
      },
      '8': {
        name: '(anonymous_8)',
        decl: {
          start: {
            line: 71,
            column: 6
          },
          end: {
            line: 71,
            column: 7
          }
        },
        loc: {
          start: {
            line: 71,
            column: 30
          },
          end: {
            line: 74,
            column: 7
          }
        }
      },
      '9': {
        name: '(anonymous_9)',
        decl: {
          start: {
            line: 76,
            column: 6
          },
          end: {
            line: 76,
            column: 7
          }
        },
        loc: {
          start: {
            line: 76,
            column: 16
          },
          end: {
            line: 78,
            column: 7
          }
        }
      }
    },
    branchMap: {
      '0': {
        loc: {
          start: {
            line: 4,
            column: 2
          },
          end: {
            line: 6,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 4,
            column: 2
          },
          end: {
            line: 6,
            column: 3
          }
        }, {
          start: {
            line: 4,
            column: 2
          },
          end: {
            line: 6,
            column: 3
          }
        }]
      },
      '1': {
        loc: {
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        }, {
          start: {
            line: 8,
            column: 2
          },
          end: {
            line: 10,
            column: 3
          }
        }]
      },
      '2': {
        loc: {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 14,
            column: 3
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 14,
            column: 3
          }
        }, {
          start: {
            line: 12,
            column: 2
          },
          end: {
            line: 14,
            column: 3
          }
        }]
      },
      '3': {
        loc: {
          start: {
            line: 12,
            column: 6
          },
          end: {
            line: 12,
            column: 87
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 12,
            column: 6
          },
          end: {
            line: 12,
            column: 45
          }
        }, {
          start: {
            line: 12,
            column: 49
          },
          end: {
            line: 12,
            column: 87
          }
        }]
      },
      '4': {
        loc: {
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 79
          }
        },
        type: 'binary-expr',
        locations: [{
          start: {
            line: 17,
            column: 11
          },
          end: {
            line: 17,
            column: 39
          }
        }, {
          start: {
            line: 17,
            column: 43
          },
          end: {
            line: 17,
            column: 64
          }
        }, {
          start: {
            line: 17,
            column: 68
          },
          end: {
            line: 17,
            column: 79
          }
        }]
      },
      '5': {
        loc: {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        }, {
          start: {
            line: 21,
            column: 4
          },
          end: {
            line: 23,
            column: 5
          }
        }]
      },
      '6': {
        loc: {
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 35,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 35,
            column: 7
          }
        }, {
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 35,
            column: 7
          }
        }]
      },
      '7': {
        loc: {
          start: {
            line: 33,
            column: 13
          },
          end: {
            line: 35,
            column: 7
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 33,
            column: 13
          },
          end: {
            line: 35,
            column: 7
          }
        }, {
          start: {
            line: 33,
            column: 13
          },
          end: {
            line: 35,
            column: 7
          }
        }]
      },
      '8': {
        loc: {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        },
        type: 'if',
        locations: [{
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }, {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 54,
            column: 9
          }
        }]
      }
    },
    s: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0,
      '10': 0,
      '11': 0,
      '12': 0,
      '13': 0,
      '14': 0,
      '15': 0,
      '16': 0,
      '17': 0,
      '18': 0,
      '19': 0,
      '20': 0,
      '21': 0,
      '22': 0,
      '23': 0,
      '24': 0,
      '25': 0,
      '26': 0,
      '27': 0,
      '28': 0,
      '29': 0
    },
    f: {
      '0': 0,
      '1': 0,
      '2': 0,
      '3': 0,
      '4': 0,
      '5': 0,
      '6': 0,
      '7': 0,
      '8': 0,
      '9': 0
    },
    b: {
      '0': [0, 0],
      '1': [0, 0],
      '2': [0, 0],
      '3': [0, 0],
      '4': [0, 0, 0],
      '5': [0, 0],
      '6': [0, 0],
      '7': [0, 0],
      '8': [0, 0]
    },
    _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
  },
      coverage = global[gcv] || (global[gcv] = {});

  if (coverage[path] && coverage[path].hash === hash) {
    return coverage[path];
  }

  coverageData.hash = hash;
  return coverage[path] = coverageData;
}();

exports.default = withSideEffect;

var _react = __webpack_require__(8);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function withSideEffect(reduceComponentsToState, handleStateChangeOnClient, mapStateOnServer) {
  ++cov_9koz2pkbt.f[0];
  ++cov_9koz2pkbt.f[0];
  ++cov_9koz2pkbt.s[0];
  ++cov_9koz2pkbt.s[0];

  if (typeof reduceComponentsToState !== 'function') {
    ++cov_9koz2pkbt.b[0][0];
    ++cov_9koz2pkbt.b[0][0];
    ++cov_9koz2pkbt.s[1];
    ++cov_9koz2pkbt.s[1];

    throw new Error('Expected reduceComponentsToState to be a function.');
  } else {
    ++cov_9koz2pkbt.b[0][1];
    ++cov_9koz2pkbt.b[0][1];
  }

  ++cov_9koz2pkbt.s[2];
  ++cov_9koz2pkbt.s[2];
  if (typeof handleStateChangeOnClient !== 'function') {
    ++cov_9koz2pkbt.b[1][0];
    ++cov_9koz2pkbt.b[1][0];
    ++cov_9koz2pkbt.s[3];
    ++cov_9koz2pkbt.s[3];

    throw new Error('Expected handleStateChangeOnClient to be a function.');
  } else {
    ++cov_9koz2pkbt.b[1][1];
    ++cov_9koz2pkbt.b[1][1];
  }

  ++cov_9koz2pkbt.s[4];
  ++cov_9koz2pkbt.s[4];
  if ((++cov_9koz2pkbt.b[3][0], (++cov_9koz2pkbt.b[3][0], typeof mapStateOnServer !== 'undefined')) && (++cov_9koz2pkbt.b[3][1], (++cov_9koz2pkbt.b[3][1], typeof mapStateOnServer !== 'function'))) {
    ++cov_9koz2pkbt.b[2][0];
    ++cov_9koz2pkbt.b[2][0];
    ++cov_9koz2pkbt.s[5];
    ++cov_9koz2pkbt.s[5];

    throw new Error('Expected mapStateOnServer to either be undefined or a function.');
  } else {
    ++cov_9koz2pkbt.b[2][1];
    ++cov_9koz2pkbt.b[2][1];
  }

  function getDisplayName(WrappedComponent) {
    ++cov_9koz2pkbt.f[1];
    ++cov_9koz2pkbt.f[1];
    ++cov_9koz2pkbt.s[6];
    ++cov_9koz2pkbt.s[6];

    return (++cov_9koz2pkbt.b[4][0], (++cov_9koz2pkbt.b[4][0], WrappedComponent.displayName)) || (++cov_9koz2pkbt.b[4][1], (++cov_9koz2pkbt.b[4][1], WrappedComponent.name)) || (++cov_9koz2pkbt.b[4][2], (++cov_9koz2pkbt.b[4][2], 'Component'));
  }

  ++cov_9koz2pkbt.s[7];
  ++cov_9koz2pkbt.s[7];
  return function wrap(WrappedComponent) {
    ++cov_9koz2pkbt.f[2];
    ++cov_9koz2pkbt.f[2];
    ++cov_9koz2pkbt.s[8];
    ++cov_9koz2pkbt.s[8];

    if (typeof WrappedComponent !== 'function') {
      ++cov_9koz2pkbt.b[5][0];
      ++cov_9koz2pkbt.b[5][0];
      ++cov_9koz2pkbt.s[9];
      ++cov_9koz2pkbt.s[9];

      throw new Error('Expected WrappedComponent to be a React component.');
    } else {
      ++cov_9koz2pkbt.b[5][1];
      ++cov_9koz2pkbt.b[5][1];
    }

    var mountedInstances = (++cov_9koz2pkbt.s[10], new _set2.default());
    var state = void 0;

    function emitChange(component) {
      ++cov_9koz2pkbt.f[3];
      ++cov_9koz2pkbt.f[3];
      ++cov_9koz2pkbt.s[11];
      ++cov_9koz2pkbt.s[10];

      state = reduceComponentsToState([].concat((0, _toConsumableArray3.default)(mountedInstances)));

      ++cov_9koz2pkbt.s[12];
      ++cov_9koz2pkbt.s[11];
      if (SideEffect.canUseDOM) {
        ++cov_9koz2pkbt.b[6][0];
        ++cov_9koz2pkbt.b[6][0];
        ++cov_9koz2pkbt.s[13];
        ++cov_9koz2pkbt.s[12];

        handleStateChangeOnClient.call(component, state);
      } else {
          ++cov_9koz2pkbt.b[6][1];
          ++cov_9koz2pkbt.b[6][1];
          ++cov_9koz2pkbt.s[14];
          ++cov_9koz2pkbt.s[13];
          if (mapStateOnServer) {
            ++cov_9koz2pkbt.b[7][0];
            ++cov_9koz2pkbt.b[7][0];
            ++cov_9koz2pkbt.s[15];
            ++cov_9koz2pkbt.s[14];

            state = mapStateOnServer(state);
          } else {
            ++cov_9koz2pkbt.b[7][1];
            ++cov_9koz2pkbt.b[7][1];
          }
        }
    }

    var SideEffect = function (_Component) {
      (0, _inherits3.default)(SideEffect, _Component);

      function SideEffect() {
        (0, _classCallCheck3.default)(this, SideEffect);
        return (0, _possibleConstructorReturn3.default)(this, (SideEffect.__proto__ || (0, _getPrototypeOf2.default)(SideEffect)).apply(this, arguments));
      }

      (0, _createClass3.default)(SideEffect, [{
        key: 'componentWillMount',
        value: function componentWillMount() {
          ++cov_9koz2pkbt.f[6];
          ++cov_9koz2pkbt.f[6];
          ++cov_9koz2pkbt.s[23];
          ++cov_9koz2pkbt.s[21];

          mountedInstances.add(this);
          ++cov_9koz2pkbt.s[24];
          ++cov_9koz2pkbt.s[22];
          emitChange(this);
        }
      }, {
        key: 'componentDidUpdate',
        value: function componentDidUpdate() {
          ++cov_9koz2pkbt.f[7];
          ++cov_9koz2pkbt.f[7];
          ++cov_9koz2pkbt.s[25];
          ++cov_9koz2pkbt.s[23];

          emitChange(this);
        }
      }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
          ++cov_9koz2pkbt.f[8];
          ++cov_9koz2pkbt.f[8];
          ++cov_9koz2pkbt.s[26];
          ++cov_9koz2pkbt.s[24];

          mountedInstances.delete(this);
          ++cov_9koz2pkbt.s[27];
          ++cov_9koz2pkbt.s[25];
          emitChange(this);
        }
      }, {
        key: 'render',
        value: function render() {
          ++cov_9koz2pkbt.f[9];
          ++cov_9koz2pkbt.f[9];
          ++cov_9koz2pkbt.s[28];
          ++cov_9koz2pkbt.s[26];

          return _react2.default.createElement(
            WrappedComponent,
            null,
            this.props.children
          );
        }
      }], [{
        key: 'peek',
        value: function peek() {
          ++cov_9koz2pkbt.f[4];
          ++cov_9koz2pkbt.f[4];
          ++cov_9koz2pkbt.s[16];
          ++cov_9koz2pkbt.s[15];

          return state;
        }

        // Expose canUseDOM so tests can monkeypatch it

        // Try to use displayName of wrapped component

      }, {
        key: 'rewind',
        value: function rewind() {
          ++cov_9koz2pkbt.f[5];
          ++cov_9koz2pkbt.f[5];
          ++cov_9koz2pkbt.s[17];
          ++cov_9koz2pkbt.s[16];

          if (SideEffect.canUseDOM) {
            ++cov_9koz2pkbt.b[8][0];
            ++cov_9koz2pkbt.b[8][0];
            ++cov_9koz2pkbt.s[18];
            ++cov_9koz2pkbt.s[17];

            throw new Error('You may only call rewind() on the server. Call peek() to read the current state.');
          } else {
            ++cov_9koz2pkbt.b[8][1];
            ++cov_9koz2pkbt.b[8][1];
          }

          var recordedState = (++cov_9koz2pkbt.s[19], state);
          ++cov_9koz2pkbt.s[20];
          ++cov_9koz2pkbt.s[18];
          state = undefined;
          ++cov_9koz2pkbt.s[21];
          ++cov_9koz2pkbt.s[19];
          mountedInstances.clear();
          ++cov_9koz2pkbt.s[22];
          ++cov_9koz2pkbt.s[20];
          return recordedState;
        }
      }]);
      return SideEffect;
    }(_react.Component);

    SideEffect.displayName = 'SideEffect(' + getDisplayName(WrappedComponent) + ')';
    SideEffect.contextTypes = WrappedComponent.contextTypes;
    SideEffect.canUseDOM = typeof window !== 'undefined';
    ++cov_9koz2pkbt.s[29];
    ++cov_9koz2pkbt.s[27];


    return SideEffect;
  };
}

 ;(function register() { /* react-hot-loader/webpack */ if (process.env.NODE_ENV !== 'production') { if (typeof __REACT_HOT_LOADER__ === 'undefined') { return; } if (typeof module.exports === 'function') { __REACT_HOT_LOADER__.register(module.exports, 'module.exports', "/data/zeit/next.js/dist/lib/side-effect.js"); return; } for (var key in module.exports) { if (!Object.prototype.hasOwnProperty.call(module.exports, key)) { continue; } var namedExport = void 0; try { namedExport = module.exports[key]; } catch (err) { continue; } __REACT_HOT_LOADER__.register(namedExport, key, "/data/zeit/next.js/dist/lib/side-effect.js"); } } })();
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 537 */,
/* 538 */,
/* 539 */,
/* 540 */,
/* 541 */,
/* 542 */,
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

/**
 * Unescape and unwrap key for human-readable display
 *
 * @param {string} key to unescape.
 * @return {string} the unescaped key.
 */
function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;

/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 * 
 */



var _prodInvariant = __webpack_require__(39);

var invariant = __webpack_require__(2);

/**
 * Static poolers. Several custom versions for each potential number of
 * arguments. A completely generic pooler is easy to implement, but would
 * require accessing the `arguments` object. In each of these, `this` refers to
 * the Class itself, not an instance. If any others are needed, simply add them
 * here, or in their own files.
 */
var oneArgumentPooler = function (copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function (a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function (a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function (a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function (instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

/**
 * Augments `CopyConstructor` to be a poolable class, augmenting only the class
 * itself (statically) not adding any prototypical fields. Any CopyConstructor
 * you give this may have a `poolSize` property, and will look for a
 * prototypical `destructor` on instances.
 *
 * @param {Function} CopyConstructor Constructor that can be used to reset.
 * @param {Function} pooler Customizable pooler.
 */
var addPoolingTo = function (CopyConstructor, pooler) {
  // Casting as any so that flow ignores the actual implementation and trusts
  // it to match the type we declared
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var PooledClass = __webpack_require__(544);
var ReactElement = __webpack_require__(38);

var emptyFunction = __webpack_require__(15);
var traverseAllChildren = __webpack_require__(553);

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * traversal. Allows avoiding binding callbacks.
 *
 * @constructor ForEachBookKeeping
 * @param {!function} forEachFunction Function to perform traversal with.
 * @param {?*} forEachContext Context to perform context with.
 */
function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.foreach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

/**
 * PooledClass representing the bookkeeping associated with performing a child
 * mapping. Allows avoiding binding callbacks.
 *
 * @constructor MapBookKeeping
 * @param {!*} mapResult Object containing the ordered map of results.
 * @param {!function} mapFunction Function to perform mapping with.
 * @param {?*} mapContext Context to perform mapping with.
 */
function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;


  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild,
      // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.map
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.count
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */
function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.toarray
 */
function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;

/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(39),
    _assign = __webpack_require__(4);

var ReactComponent = __webpack_require__(140);
var ReactElement = __webpack_require__(38);
var ReactPropTypeLocationNames = __webpack_require__(142);
var ReactNoopUpdateQueue = __webpack_require__(141);

var emptyObject = __webpack_require__(54);
var invariant = __webpack_require__(2);
var warning = __webpack_require__(1);

var MIXINS_KEY = 'mixins';

// Helper function to allow the creation of anonymous functions which do not
// have .name set to the name of the variable being assigned to.
function identity(fn) {
  return fn;
}

/**
 * Policies that describe methods in `ReactClassInterface`.
 */


var injectedMixins = [];

/**
 * Composite components are higher-level components that compose other composite
 * or host components.
 *
 * To create a new type of `ReactClass`, pass a specification of
 * your new class to `React.createClass`. The only requirement of your class
 * specification is that you implement a `render` method.
 *
 *   var MyComponent = React.createClass({
 *     render: function() {
 *       return <div>Hello World</div>;
 *     }
 *   });
 *
 * The class specification supports a specific protocol of methods that have
 * special meaning (e.g. `render`). See `ReactClassInterface` for
 * more the comprehensive protocol. Any other properties and methods in the
 * class specification will be available on the prototype.
 *
 * @interface ReactClassInterface
 * @internal
 */
var ReactClassInterface = {

  /**
   * An array of Mixin objects to include when defining your component.
   *
   * @type {array}
   * @optional
   */
  mixins: 'DEFINE_MANY',

  /**
   * An object containing properties and methods that should be defined on
   * the component's constructor instead of its prototype (static methods).
   *
   * @type {object}
   * @optional
   */
  statics: 'DEFINE_MANY',

  /**
   * Definition of prop types for this component.
   *
   * @type {object}
   * @optional
   */
  propTypes: 'DEFINE_MANY',

  /**
   * Definition of context types for this component.
   *
   * @type {object}
   * @optional
   */
  contextTypes: 'DEFINE_MANY',

  /**
   * Definition of context types this component sets for its children.
   *
   * @type {object}
   * @optional
   */
  childContextTypes: 'DEFINE_MANY',

  // ==== Definition methods ====

  /**
   * Invoked when the component is mounted. Values in the mapping will be set on
   * `this.props` if that prop is not specified (i.e. using an `in` check).
   *
   * This method is invoked before `getInitialState` and therefore cannot rely
   * on `this.state` or use `this.setState`.
   *
   * @return {object}
   * @optional
   */
  getDefaultProps: 'DEFINE_MANY_MERGED',

  /**
   * Invoked once before the component is mounted. The return value will be used
   * as the initial value of `this.state`.
   *
   *   getInitialState: function() {
   *     return {
   *       isOn: false,
   *       fooBaz: new BazFoo()
   *     }
   *   }
   *
   * @return {object}
   * @optional
   */
  getInitialState: 'DEFINE_MANY_MERGED',

  /**
   * @return {object}
   * @optional
   */
  getChildContext: 'DEFINE_MANY_MERGED',

  /**
   * Uses props from `this.props` and state from `this.state` to render the
   * structure of the component.
   *
   * No guarantees are made about when or how often this method is invoked, so
   * it must not have side effects.
   *
   *   render: function() {
   *     var name = this.props.name;
   *     return <div>Hello, {name}!</div>;
   *   }
   *
   * @return {ReactComponent}
   * @nosideeffects
   * @required
   */
  render: 'DEFINE_ONCE',

  // ==== Delegate methods ====

  /**
   * Invoked when the component is initially created and about to be mounted.
   * This may have side effects, but any external subscriptions or data created
   * by this method must be cleaned up in `componentWillUnmount`.
   *
   * @optional
   */
  componentWillMount: 'DEFINE_MANY',

  /**
   * Invoked when the component has been mounted and has a DOM representation.
   * However, there is no guarantee that the DOM node is in the document.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been mounted (initialized and rendered) for the first time.
   *
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidMount: 'DEFINE_MANY',

  /**
   * Invoked before the component receives new props.
   *
   * Use this as an opportunity to react to a prop transition by updating the
   * state using `this.setState`. Current props are accessed via `this.props`.
   *
   *   componentWillReceiveProps: function(nextProps, nextContext) {
   *     this.setState({
   *       likesIncreasing: nextProps.likeCount > this.props.likeCount
   *     });
   *   }
   *
   * NOTE: There is no equivalent `componentWillReceiveState`. An incoming prop
   * transition may cause a state change, but the opposite is not true. If you
   * need it, you are probably looking for `componentWillUpdate`.
   *
   * @param {object} nextProps
   * @optional
   */
  componentWillReceiveProps: 'DEFINE_MANY',

  /**
   * Invoked while deciding if the component should be updated as a result of
   * receiving new props, state and/or context.
   *
   * Use this as an opportunity to `return false` when you're certain that the
   * transition to the new props/state/context will not require a component
   * update.
   *
   *   shouldComponentUpdate: function(nextProps, nextState, nextContext) {
   *     return !equal(nextProps, this.props) ||
   *       !equal(nextState, this.state) ||
   *       !equal(nextContext, this.context);
   *   }
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @return {boolean} True if the component should update.
   * @optional
   */
  shouldComponentUpdate: 'DEFINE_ONCE',

  /**
   * Invoked when the component is about to update due to a transition from
   * `this.props`, `this.state` and `this.context` to `nextProps`, `nextState`
   * and `nextContext`.
   *
   * Use this as an opportunity to perform preparation before an update occurs.
   *
   * NOTE: You **cannot** use `this.setState()` in this method.
   *
   * @param {object} nextProps
   * @param {?object} nextState
   * @param {?object} nextContext
   * @param {ReactReconcileTransaction} transaction
   * @optional
   */
  componentWillUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component's DOM representation has been updated.
   *
   * Use this as an opportunity to operate on the DOM when the component has
   * been updated.
   *
   * @param {object} prevProps
   * @param {?object} prevState
   * @param {?object} prevContext
   * @param {DOMElement} rootNode DOM element representing the component.
   * @optional
   */
  componentDidUpdate: 'DEFINE_MANY',

  /**
   * Invoked when the component is about to be removed from its parent and have
   * its DOM representation destroyed.
   *
   * Use this as an opportunity to deallocate any external resources.
   *
   * NOTE: There is no `componentDidUnmount` since your component will have been
   * destroyed by that point.
   *
   * @optional
   */
  componentWillUnmount: 'DEFINE_MANY',

  // ==== Advanced methods ====

  /**
   * Updates the component's currently mounted DOM representation.
   *
   * By default, this implements React's rendering and reconciliation algorithm.
   * Sophisticated clients may wish to override this.
   *
   * @param {ReactReconcileTransaction} transaction
   * @internal
   * @overridable
   */
  updateComponent: 'OVERRIDE_BASE'

};

/**
 * Mapping from class specification keys to special processing functions.
 *
 * Although these are declared like instance properties in the specification
 * when defining classes using `React.createClass`, they are actually static
 * and are accessible on the constructor instead of the prototype. Despite
 * being static, they must be defined outside of the "statics" key under
 * which all other static methods are defined.
 */
var RESERVED_SPEC_KEYS = {
  displayName: function (Constructor, displayName) {
    Constructor.displayName = displayName;
  },
  mixins: function (Constructor, mixins) {
    if (mixins) {
      for (var i = 0; i < mixins.length; i++) {
        mixSpecIntoComponent(Constructor, mixins[i]);
      }
    }
  },
  childContextTypes: function (Constructor, childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, childContextTypes, 'childContext');
    }
    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, childContextTypes);
  },
  contextTypes: function (Constructor, contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, contextTypes, 'context');
    }
    Constructor.contextTypes = _assign({}, Constructor.contextTypes, contextTypes);
  },
  /**
   * Special case getDefaultProps which should move into statics but requires
   * automatic merging.
   */
  getDefaultProps: function (Constructor, getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, getDefaultProps);
    } else {
      Constructor.getDefaultProps = getDefaultProps;
    }
  },
  propTypes: function (Constructor, propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, propTypes, 'prop');
    }
    Constructor.propTypes = _assign({}, Constructor.propTypes, propTypes);
  },
  statics: function (Constructor, statics) {
    mixStaticSpecIntoComponent(Constructor, statics);
  },
  autobind: function () {} };

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      // use a warning instead of an invariant so components
      // don't show up in prod but only in __DEV__
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
    }
  }
}

function validateMethodOverride(isAlreadyDefined, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  // Disallow overriding of base class methods unless explicitly allowed.
  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
  }

  // Disallow defining methods more than once unless explicitly allowed.
  if (isAlreadyDefined) {
    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
  }
}

/**
 * Mixin helper which handles policy validation and reserved
 * specification keys when building React classes.
 */
function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    if (process.env.NODE_ENV !== 'production') {
      var typeofSpec = typeof spec;
      var isMixinValid = typeofSpec === 'object' && spec !== null;

      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
    }

    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

  var proto = Constructor.prototype;
  var autoBindPairs = proto.__reactAutoBindPairs;

  // By handling mixins before any other properties, we ensure the same
  // chaining order is applied to methods with DEFINE_MANY policy, whether
  // mixins are listed before or after these methods in the spec.
  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      // We have already handled mixins in a special case above.
      continue;
    }

    var property = spec[name];
    var isAlreadyDefined = proto.hasOwnProperty(name);
    validateMethodOverride(isAlreadyDefined, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      // Setup methods on prototype:
      // The following member methods should not be automatically bound:
      // 1. Expected ReactClass methods (in the "interface").
      // 2. Overridden methods (that were mixed in).
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        autoBindPairs.push(name, property);
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          // These cases should already be caught by validateMethodOverride.
          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

          // For methods which are defined more than once, call the existing
          // methods before calling the new property, merging if appropriate.
          if (specPolicy === 'DEFINE_MANY_MERGED') {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === 'DEFINE_MANY') {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            // Add verbose displayName to the function, which helps when looking
            // at profiling tools.
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

    var isInherited = name in Constructor;
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
    Constructor[name] = property;
  }
}

/**
 * Merge two objects, but throw if both contain the same key.
 *
 * @param {object} one The first object, which is mutated.
 * @param {object} two The second object
 * @return {object} one after it has been mutated to contain everything in two.
 */
function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
      one[key] = two[key];
    }
  }
  return one;
}

/**
 * Creates a function that invokes two functions and merges their return values.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

/**
 * Creates a function that invokes two functions and ignores their return vales.
 *
 * @param {function} one Function to invoke first.
 * @param {function} two Function to invoke second.
 * @return {function} Function that invokes the two argument functions.
 * @private
 */
function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

/**
 * Binds a method to the component.
 *
 * @param {object} component Component whose method is going to be bound.
 * @param {function} method Method to be bound.
 * @return {function} The bound method.
 */
function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      // User is trying to bind() an autobound method; we effectively will
      // ignore the value of "this" that the user is trying to use, so
      // let's warn.
      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
    };
  }
  return boundMethod;
}

/**
 * Binds all auto-bound methods in a component.
 *
 * @param {object} component Component whose method is going to be bound.
 */
function bindAutoBindMethods(component) {
  var pairs = component.__reactAutoBindPairs;
  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];
    var method = pairs[i + 1];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

/**
 * Add more to the ReactClass base class. These are all legacy features and
 * therefore not already part of the modern ReactComponent.
 */
var ReactClassMixin = {

  /**
   * TODO: This will be deprecated because state should always keep a consistent
   * type signature and the only use case for this, is to avoid that.
   */
  replaceState: function (newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'replaceState');
    }
  },

  /**
   * Checks whether or not this composite component is mounted.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function () {
    return this.updater.isMounted(this);
  }
};

var ReactClassComponent = function () {};
_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

/**
 * Module for creating composite components.
 *
 * @class ReactClass
 */
var ReactClass = {

  /**
   * Creates a composite component class given a class specification.
   * See https://facebook.github.io/react/docs/top-level-api.html#react.createclass
   *
   * @param {object} spec Class specification (which must define `render`).
   * @return {function} Component constructor function.
   * @public
   */
  createClass: function (spec) {
    // To keep our warnings more understandable, we'll use a little hack here to
    // ensure that Constructor.name !== 'Constructor'. This makes sure we don't
    // unnecessarily identify a class without displayName as 'Constructor'.
    var Constructor = identity(function (props, context, updater) {
      // This constructor gets overridden by mocks. The argument is used
      // by mocks to assert on what gets mounted.

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }

      // Wire up auto-binding
      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      // ReactClasses doesn't have constructors. Instead, they use the
      // getInitialState and componentWillMount methods for initialization.

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        // We allow auto-mocks to proceed as if they're returning null.
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          // This is probably bad practice. Consider warning here and
          // deprecating this convenience.
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    // Initialize the defaultProps property after all mixins have been merged.
    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      // This is a tag to indicate that the use of these method names is ok,
      // since it's used with createClass. If it's not, then it's likely a
      // mistake so we'll warn you to use the static property, property
      // initializer or constructor respectively.
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
    }

    // Reduce time spent doing lookups by setting these on the prototype.
    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function (mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(38);

/**
 * Create a factory that creates HTML tag elements.
 *
 * @private
 */
var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = __webpack_require__(232);
  createDOMFactory = ReactElementValidator.createFactory;
}

/**
 * Creates a mapping from supported HTML tags to `ReactDOMComponent` classes.
 * This is also accessible via `React.DOM`.
 *
 * @public
 */
var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  // SVG
  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var ReactElement = __webpack_require__(38);
var ReactPropTypeLocationNames = __webpack_require__(142);
var ReactPropTypesSecret = __webpack_require__(233);

var emptyFunction = __webpack_require__(15);
var getIteratorFn = __webpack_require__(144);
var warning = __webpack_require__(1);

/**
 * Collection of methods that allow declaration and validation of props that are
 * supplied to React components. Example usage:
 *
 *   var Props = require('ReactPropTypes');
 *   var MyArticle = React.createClass({
 *     propTypes: {
 *       // An optional string prop named "description".
 *       description: Props.string,
 *
 *       // A required enum prop named "category".
 *       category: Props.oneOf(['News','Photos']).isRequired,
 *
 *       // A prop named "dialog" that requires an instance of Dialog.
 *       dialog: Props.instanceOf(Dialog).isRequired
 *     },
 *     render: function() { ... }
 *   });
 *
 * A more formal specification of how these methods are used:
 *
 *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
 *   decl := ReactPropTypes.{type}(.isRequired)?
 *
 * Each and every declaration produces a function with the same signature. This
 * allows the creation of custom validation functions. For example:
 *
 *  var MyLink = React.createClass({
 *    propTypes: {
 *      // An optional string or URI prop named "href".
 *      href: function(props, propName, componentName) {
 *        var propValue = props[propName];
 *        if (propValue != null && typeof propValue !== 'string' &&
 *            !(propValue instanceof URI)) {
 *          return new Error(
 *            'Expected a string or an URI for ' + propName + ' in ' +
 *            componentName
 *          );
 *        }
 *      }
 *    },
 *    render: function() {...}
 *  });
 *
 * @internal
 */

var ANONYMOUS = '<<anonymous>>';

var ReactPropTypes = {
  array: createPrimitiveTypeChecker('array'),
  bool: createPrimitiveTypeChecker('boolean'),
  func: createPrimitiveTypeChecker('function'),
  number: createPrimitiveTypeChecker('number'),
  object: createPrimitiveTypeChecker('object'),
  string: createPrimitiveTypeChecker('string'),
  symbol: createPrimitiveTypeChecker('symbol'),

  any: createAnyTypeChecker(),
  arrayOf: createArrayOfTypeChecker,
  element: createElementTypeChecker(),
  instanceOf: createInstanceTypeChecker,
  node: createNodeChecker(),
  objectOf: createObjectOfTypeChecker,
  oneOf: createEnumTypeChecker,
  oneOfType: createUnionTypeChecker,
  shape: createShapeTypeChecker
};

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
/*eslint-disable no-self-compare*/
function is(x, y) {
  // SameValue algorithm
  if (x === y) {
    // Steps 1-5, 7-10
    // Steps 6.b-6.e: +0 != -0
    return x !== 0 || 1 / x === 1 / y;
  } else {
    // Step 6.a: NaN == NaN
    return x !== x && y !== y;
  }
}
/*eslint-enable no-self-compare*/

/**
 * We use an Error-like object for backward compatibility as people may call
 * PropTypes directly and inspect their output. However we don't use real
 * Errors anymore. We don't inspect their stack anyway, and creating them
 * is prohibitively expensive if they are created too often, such as what
 * happens in oneOfType() for any type before the one that matched.
 */
function PropTypeError(message) {
  this.message = message;
  this.stack = '';
}
// Make `instanceof Error` still work for returned errors.
PropTypeError.prototype = Error.prototype;

function createChainableTypeChecker(validate) {
  if (process.env.NODE_ENV !== 'production') {
    var manualPropTypeCallCache = {};
  }
  function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
    componentName = componentName || ANONYMOUS;
    propFullName = propFullName || propName;
    if (process.env.NODE_ENV !== 'production') {
      if (secret !== ReactPropTypesSecret && typeof console !== 'undefined') {
        var cacheKey = componentName + ':' + propName;
        if (!manualPropTypeCallCache[cacheKey]) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will not work in production with the next major version. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName) : void 0;
          manualPropTypeCallCache[cacheKey] = true;
        }
      }
    }
    if (props[propName] == null) {
      var locationName = ReactPropTypeLocationNames[location];
      if (isRequired) {
        if (props[propName] === null) {
          return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
        }
        return new PropTypeError('The ' + locationName + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
      }
      return null;
    } else {
      return validate(props, propName, componentName, location, propFullName);
    }
  }

  var chainedCheckType = checkType.bind(null, false);
  chainedCheckType.isRequired = checkType.bind(null, true);

  return chainedCheckType;
}

function createPrimitiveTypeChecker(expectedType) {
  function validate(props, propName, componentName, location, propFullName, secret) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== expectedType) {
      var locationName = ReactPropTypeLocationNames[location];
      // `propValue` being instance of, say, date/regexp, pass the 'object'
      // check, but we can offer a more precise error message here rather than
      // 'of type `object`'.
      var preciseType = getPreciseType(propValue);

      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createAnyTypeChecker() {
  return createChainableTypeChecker(emptyFunction.thatReturns(null));
}

function createArrayOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
    }
    var propValue = props[propName];
    if (!Array.isArray(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
    }
    for (var i = 0; i < propValue.length; i++) {
      var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
      if (error instanceof Error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createElementTypeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    if (!ReactElement.isValidElement(propValue)) {
      var locationName = ReactPropTypeLocationNames[location];
      var propType = getPropType(propValue);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createInstanceTypeChecker(expectedClass) {
  function validate(props, propName, componentName, location, propFullName) {
    if (!(props[propName] instanceof expectedClass)) {
      var locationName = ReactPropTypeLocationNames[location];
      var expectedClassName = expectedClass.name || ANONYMOUS;
      var actualClassName = getClassName(props[propName]);
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createEnumTypeChecker(expectedValues) {
  if (!Array.isArray(expectedValues)) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;
  }

  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    for (var i = 0; i < expectedValues.length; i++) {
      if (is(propValue, expectedValues[i])) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    var valuesString = JSON.stringify(expectedValues);
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
  }
  return createChainableTypeChecker(validate);
}

function createObjectOfTypeChecker(typeChecker) {
  function validate(props, propName, componentName, location, propFullName) {
    if (typeof typeChecker !== 'function') {
      return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
    }
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
    }
    for (var key in propValue) {
      if (propValue.hasOwnProperty(key)) {
        var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createUnionTypeChecker(arrayOfTypeCheckers) {
  if (!Array.isArray(arrayOfTypeCheckers)) {
    process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
    return emptyFunction.thatReturnsNull;
  }

  function validate(props, propName, componentName, location, propFullName) {
    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
        return null;
      }
    }

    var locationName = ReactPropTypeLocationNames[location];
    return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
  }
  return createChainableTypeChecker(validate);
}

function createNodeChecker() {
  function validate(props, propName, componentName, location, propFullName) {
    if (!isNode(props[propName])) {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function createShapeTypeChecker(shapeTypes) {
  function validate(props, propName, componentName, location, propFullName) {
    var propValue = props[propName];
    var propType = getPropType(propValue);
    if (propType !== 'object') {
      var locationName = ReactPropTypeLocationNames[location];
      return new PropTypeError('Invalid ' + locationName + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }
    for (var key in shapeTypes) {
      var checker = shapeTypes[key];
      if (!checker) {
        continue;
      }
      var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
      if (error) {
        return error;
      }
    }
    return null;
  }
  return createChainableTypeChecker(validate);
}

function isNode(propValue) {
  switch (typeof propValue) {
    case 'number':
    case 'string':
    case 'undefined':
      return true;
    case 'boolean':
      return !propValue;
    case 'object':
      if (Array.isArray(propValue)) {
        return propValue.every(isNode);
      }
      if (propValue === null || ReactElement.isValidElement(propValue)) {
        return true;
      }

      var iteratorFn = getIteratorFn(propValue);
      if (iteratorFn) {
        var iterator = iteratorFn.call(propValue);
        var step;
        if (iteratorFn !== propValue.entries) {
          while (!(step = iterator.next()).done) {
            if (!isNode(step.value)) {
              return false;
            }
          }
        } else {
          // Iterator will provide entry [k,v] tuples rather than values.
          while (!(step = iterator.next()).done) {
            var entry = step.value;
            if (entry) {
              if (!isNode(entry[1])) {
                return false;
              }
            }
          }
        }
      } else {
        return false;
      }

      return true;
    default:
      return false;
  }
}

function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === 'symbol') {
    return true;
  }

  // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
  if (propValue['@@toStringTag'] === 'Symbol') {
    return true;
  }

  // Fallback for non-spec compliant Symbols which are polyfilled.
  if (typeof Symbol === 'function' && propValue instanceof Symbol) {
    return true;
  }

  return false;
}

// Equivalent of `typeof` but with special handling for array and regexp.
function getPropType(propValue) {
  var propType = typeof propValue;
  if (Array.isArray(propValue)) {
    return 'array';
  }
  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return 'object';
  }
  if (isSymbol(propType, propValue)) {
    return 'symbol';
  }
  return propType;
}

// This handles more types than `getPropType`. Only used for error messages.
// See `createPrimitiveTypeChecker`.
function getPreciseType(propValue) {
  var propType = getPropType(propValue);
  if (propType === 'object') {
    if (propValue instanceof Date) {
      return 'date';
    } else if (propValue instanceof RegExp) {
      return 'regexp';
    }
  }
  return propType;
}

// Returns class name of the object, if any.
function getClassName(propValue) {
  if (!propValue.constructor || !propValue.constructor.name) {
    return ANONYMOUS;
  }
  return propValue.constructor.name;
}

module.exports = ReactPropTypes;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _assign = __webpack_require__(4);

var ReactComponent = __webpack_require__(140);
var ReactNoopUpdateQueue = __webpack_require__(141);

var emptyObject = __webpack_require__(54);

/**
 * Base class helpers for the updating state of a component.
 */
function ReactPureComponent(props, context, updater) {
  // Duplicated from ReactComponent.
  this.props = props;
  this.context = context;
  this.refs = emptyObject;
  // We initialize the default updater but the real one gets injected by the
  // renderer.
  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;
// Avoid an extra prototype jump for these methods.
_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = ReactPureComponent;

/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



module.exports = '15.4.2';

/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(39);

var ReactPropTypeLocationNames = __webpack_require__(142);
var ReactPropTypesSecret = __webpack_require__(233);

var invariant = __webpack_require__(2);
var warning = __webpack_require__(1);

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  // Temporary hack.
  // Inline requires don't work well with Jest:
  // https://github.com/facebook/react/issues/7240
  // Remove the inline requires when we don't need them anymore:
  // https://github.com/facebook/react/pull/7178
  ReactComponentTreeHook = __webpack_require__(11);
}

var loggedTypeFailures = {};

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?object} element The React element that is being type-checked
 * @param {?number} debugID The React component instance that is being type-checked
 * @private
 */
function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;
      // Prop type validation may throw. In case they do, we don't want to
      // fail the render phase where it didn't fail before. So we log it.
      // After these have been cleaned up, we'll let them throw.
      try {
        // This is intentionally an invariant that gets caught. It's the same
        // behavior as without this statement except with a better message.
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        // Only monitor this failure once because there tends to be a lot of the
        // same error.
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = __webpack_require__(11);
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */


var _prodInvariant = __webpack_require__(39);

var ReactElement = __webpack_require__(38);

var invariant = __webpack_require__(2);

/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://facebook.github.io/react/docs/top-level-api.html#react.children.only
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */
function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 *
 */



var _prodInvariant = __webpack_require__(39);

var ReactCurrentOwner = __webpack_require__(18);
var REACT_ELEMENT_TYPE = __webpack_require__(231);

var getIteratorFn = __webpack_require__(144);
var invariant = __webpack_require__(2);
var KeyEscapeUtils = __webpack_require__(543);
var warning = __webpack_require__(1);

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

/**
 * This is inlined from ReactElement since this file is shared between
 * isomorphic and renderers. We could extract this to a
 *
 */

/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */

var didWarnAboutMaps = false;

/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */
function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (component && typeof component === 'object' && component.key != null) {
    // Explicit key
    return KeyEscapeUtils.escape(component.key);
  }
  // Implicit key determined by the index in the set
  return index.toString(36);
}

/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' ||
  // The following is inlined from ReactElement. This means we can optimize
  // some checks. React Fiber also inlines this logic for similar purposes.
  type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children,
    // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }
        // Iterator will provide entry [k,v] tuples rather than values.
        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
       true ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */
function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),
/* 554 */,
/* 555 */,
/* 556 */,
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g =
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this;

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(558);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(65)))

/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, process) {/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = arg;

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(65), __webpack_require__(0)))

/***/ }),
/* 559 */,
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var ansiRegex = __webpack_require__(241)();

module.exports = function (str) {
	return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
};


/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _object = __webpack_require__(445);

var _object2 = _interopRequireDefault(_object);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var hasOwnProperty = Object.prototype.hasOwnProperty;

var tags = {};
var prevStyles = {};

exports.default = typeof window === 'undefined' ? renderOnServer : renderOnClient;


function renderOnServer() {}

function renderOnClient(components) {
  var styles = {};
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = components[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var c = _step.value;

      styles[c.props.styleId] = c;
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  patch(diff(prevStyles, styles));

  prevStyles = styles;
}

function diff(a, b) {
  var added = (0, _object2.default)(b).filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
        k = _ref2[0];

    return !hasOwnProperty.call(a, k);
  });
  var removed = (0, _object2.default)(a).filter(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 1),
        k = _ref4[0];

    return !hasOwnProperty.call(b, k);
  });
  return [added, removed];
}

var fromServer = {};

function patch(_ref5) {
  var _ref6 = _slicedToArray(_ref5, 2),
      added = _ref6[0],
      removed = _ref6[1];

  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = added[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _step2$value = _slicedToArray(_step2.value, 2),
          id = _step2$value[0],
          c = _step2$value[1];

      // avoid duplicates from server-rendered markup
      if (undefined === fromServer[id]) {
        fromServer[id] = document.getElementById('__jsx-style-' + id);
      }

      tags[id] = fromServer[id] || makeStyleTag(c.props.css);
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = removed[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      var _step3$value = _slicedToArray(_step3.value, 1),
          id = _step3$value[0];

      var t = tags[id];
      delete tags[id];
      t.parentNode.removeChild(t);
      // avoid checking the DOM later on
      fromServer[id] = null;
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }
}

function makeStyleTag(str) {
  // based on implementation by glamor
  var tag = document.createElement('style');
  tag.appendChild(document.createTextNode(str));

  var head = document.head || document.getElementsByTagName('head')[0];
  head.appendChild(tag);

  return tag;
}

/***/ }),
/* 562 */,
/* 563 */,
/* 564 */,
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


module.exports = {
  isString: function(arg) {
    return typeof(arg) === 'string';
  },
  isObject: function(arg) {
    return typeof(arg) === 'object' && arg !== null;
  },
  isNull: function(arg) {
    return arg === null;
  },
  isNullOrUndefined: function(arg) {
    return arg == null;
  }
};


/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

/*eslint-env browser*/

var clientOverlay = document.createElement('div');
var styles = {
  background: 'rgba(0,0,0,0.85)',
  color: '#E8E8E8',
  lineHeight: '1.2',
  whiteSpace: 'pre',
  fontFamily: 'Menlo, Consolas, monospace',
  fontSize: '13px',
  position: 'fixed',
  zIndex: 9999,
  padding: '10px',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0,
  overflow: 'auto',
  dir: 'ltr'
};
for (var key in styles) {
  clientOverlay.style[key] = styles[key];
}

var ansiHTML = __webpack_require__(146);
var colors = {
  reset: ['transparent', 'transparent'],
  black: '181818',
  red: 'E36049',
  green: 'B3CB74',
  yellow: 'FFD080',
  blue: '7CAFC2',
  magenta: '7FACCA',
  cyan: 'C3C2EF',
  lightgrey: 'EBE7E3',
  darkgrey: '6D7891'
};
ansiHTML.setColors(colors);

var Entities = __webpack_require__(337).AllHtmlEntities;
var entities = new Entities();

exports.showProblems =
function showProblems(type, lines) {
  clientOverlay.innerHTML = '';
  lines.forEach(function(msg) {
    msg = ansiHTML(entities.encode(msg));
    var div = document.createElement('div');
    div.style.marginBottom = '26px';
    div.innerHTML = problemType(type) + ' in ' + msg;
    clientOverlay.appendChild(div);
  });
  if (document.body) {
    document.body.appendChild(clientOverlay);
  }
};

exports.clear =
function clear() {
  if (document.body && clientOverlay.parentNode) {
    document.body.removeChild(clientOverlay);
  }
};

var problemColors = {
  errors: colors.red,
  warnings: colors.yellow
};

function problemType (type) {
  var color = problemColors[type] || colors.red;
  return (
    '<span style="background-color:#' + color + '; color:#fff; padding:2px 4px; border-radius: 2px">' +
      type.slice(0, -1).toUpperCase() +
    '</span>'
  );
}


/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__resourceQuery, module) {/*eslint-env browser*/
/*global __resourceQuery __webpack_public_path__*/

var options = {
  path: "/__webpack_hmr",
  timeout: 20 * 1000,
  overlay: true,
  reload: false,
  log: true,
  warn: true,
  name: ''
};
if (true) {
  var querystring = __webpack_require__(59);
  var overrides = querystring.parse(__resourceQuery.slice(1));
  if (overrides.path) options.path = overrides.path;
  if (overrides.timeout) options.timeout = overrides.timeout;
  if (overrides.overlay) options.overlay = overrides.overlay !== 'false';
  if (overrides.reload) options.reload = overrides.reload !== 'false';
  if (overrides.noInfo && overrides.noInfo !== 'false') {
    options.log = false;
  }
  if (overrides.name) {
    options.name = overrides.name 
  }
  if (overrides.quiet && overrides.quiet !== 'false') {
    options.log = false;
    options.warn = false;
  }
  if (overrides.dynamicPublicPath) {
    options.path = __webpack_require__.p + options.path;
  }
}

if (typeof window === 'undefined') {
  // do nothing
} else if (typeof window.EventSource === 'undefined') {
  console.warn(
    "webpack-hot-middleware's client requires EventSource to work. " +
    "You should include a polyfill if you want to support this browser: " +
    "https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events#Tools"
  );
} else {
  connect(window.EventSource);
}

function connect(EventSource) {
  var source = new EventSource(options.path);
  var lastActivity = new Date();

  source.onopen = handleOnline;
  source.onmessage = handleMessage;
  source.onerror = handleDisconnect;

  var timer = setInterval(function() {
    if ((new Date() - lastActivity) > options.timeout) {
      handleDisconnect();
    }
  }, options.timeout / 2);

  function handleOnline() {
    if (options.log) console.log("[HMR] connected");
    lastActivity = new Date();
  }

  function handleMessage(event) {
    lastActivity = new Date();
    if (event.data == "\uD83D\uDC93") {
      return;
    }
    try {
      processMessage(JSON.parse(event.data));
    } catch (ex) {
      if (options.warn) {
        console.warn("Invalid HMR message: " + event.data + "\n" + ex);
      }
    }
  }

  function handleDisconnect() {
    clearInterval(timer);
    source.close();
    setTimeout(function() { connect(EventSource); }, options.timeout);
  }

}

var reporter;
// the reporter needs to be a singleton on the page
// in case the client is being used by mutliple bundles
// we only want to report once.
// all the errors will go to all clients
var singletonKey = '__webpack_hot_middleware_reporter__';
if (typeof window !== 'undefined' && !window[singletonKey]) {
  reporter = window[singletonKey] = createReporter();
}

function createReporter() {
  var strip = __webpack_require__(560);

  var overlay;
  if (typeof document !== 'undefined' && options.overlay) {
    overlay = __webpack_require__(566);
  }


  var previousProblems = null;

  return {
    cleanProblemsCache: function () {
      previousProblems = null;
    },
    problems: function(type, obj) {
      if (options.warn) {
        var newProblems = obj[type].map(function(msg) { return strip(msg); }).join('\n');

        if (previousProblems !== newProblems) {
          previousProblems = newProblems;
          console.warn("[HMR] bundle has " + type + ":\n" + newProblems);
        }
      }
      if (overlay && type !== 'warnings') overlay.showProblems(type, obj[type]);
    },
    success: function() {
      if (overlay) overlay.clear();
    },
    useCustomOverlay: function(customOverlay) {
      overlay = customOverlay;
    }
  };
}

var processUpdate = __webpack_require__(568);

var customHandler;
var subscribeAllHandler;
function processMessage(obj) {
  switch(obj.action) {
    case "building":
      if (options.log) console.log("[HMR] bundle rebuilding");
      break;
    case "built":
      if (options.log) {
        console.log(
          "[HMR] bundle " + (obj.name ? obj.name + " " : "") +
          "rebuilt in " + obj.time + "ms"
        );
      }
      // fall through
    case "sync":
      if (obj.name && options.name && obj.name !== options.name) {
        return;
      }
      if (obj.errors.length > 0) {
        if (reporter) reporter.problems('errors', obj);
      } else {
        if (reporter) {
          if (obj.warnings.length > 0) {
            reporter.problems('warnings', obj);
          } else {
            reporter.cleanProblemsCache();
          }
          reporter.success();
        }
        processUpdate(obj.hash, obj.modules, options);
      }
      break;
    default:
      if (customHandler) {
        customHandler(obj);
      }
  }

  if (subscribeAllHandler) {
    subscribeAllHandler(obj);
  }
}

if (module) {
  module.exports = {
    subscribeAll: function subscribeAll(handler) {
      subscribeAllHandler = handler;
    },
    subscribe: function subscribe(handler) {
      customHandler = handler;
    },
    useCustomOverlay: function useCustomOverlay(customOverlay) {
      if (reporter) reporter.useCustomOverlay(customOverlay);
    }
  };
}

/* WEBPACK VAR INJECTION */}.call(exports, "?overlay=false&reload=true", __webpack_require__(89)(module)))

/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Based heavily on https://github.com/webpack/webpack/blob/
 *  c0afdf9c6abc1dd70707c594e473802a566f7b6e/hot/only-dev-server.js
 * Original copyright Tobias Koppers @sokra (MIT license)
 */

/* global window __webpack_hash__ */

if (false) {
  throw new Error("[HMR] Hot Module Replacement is disabled.");
}

var hmrDocsUrl = "http://webpack.github.io/docs/hot-module-replacement-with-webpack.html"; // eslint-disable-line max-len

var lastHash;
var failureStatuses = { abort: 1, fail: 1 };
var applyOptions = { ignoreUnaccepted: true };

function upToDate(hash) {
  if (hash) lastHash = hash;
  return lastHash == __webpack_require__.h();
}

module.exports = function(hash, moduleMap, options) {
  var reload = options.reload;
  if (!upToDate(hash) && module.hot.status() == "idle") {
    if (options.log) console.log("[HMR] Checking for updates on the server...");
    check();
  }

  function check() {
    var cb = function(err, updatedModules) {
      if (err) return handleError(err);

      if(!updatedModules) {
        if (options.warn) {
          console.warn("[HMR] Cannot find update (Full reload needed)");
          console.warn("[HMR] (Probably because of restarting the server)");
        }
        performReload();
        return null;
      }

      var applyCallback = function(applyErr, renewedModules) {
        if (applyErr) return handleError(applyErr);

        if (!upToDate()) check();

        logUpdates(updatedModules, renewedModules);
      };

      var applyResult = module.hot.apply(applyOptions, applyCallback);
      // webpack 2 promise
      if (applyResult && applyResult.then) {
        // HotModuleReplacement.runtime.js refers to the result as `outdatedModules`
        applyResult.then(function(outdatedModules) {
          applyCallback(null, outdatedModules);
        });
        applyResult.catch(applyCallback);
      }

    };

    var result = module.hot.check(false, cb);
    // webpack 2 promise
    if (result && result.then) {
        result.then(function(updatedModules) {
            cb(null, updatedModules);
        });
        result.catch(cb);
    }
  }

  function logUpdates(updatedModules, renewedModules) {
    var unacceptedModules = updatedModules.filter(function(moduleId) {
      return renewedModules && renewedModules.indexOf(moduleId) < 0;
    });

    if(unacceptedModules.length > 0) {
      if (options.warn) {
        console.warn(
          "[HMR] The following modules couldn't be hot updated: " +
          "(Full reload needed)\n" +
          "This is usually because the modules which have changed " +
          "(and their parents) do not know how to hot reload themselves. " +
          "See " + hmrDocsUrl + " for more details."
        );
        unacceptedModules.forEach(function(moduleId) {
          console.warn("[HMR]  - " + moduleMap[moduleId]);
        });
      }
      performReload();
      return;
    }

    if (options.log) {
      if(!renewedModules || renewedModules.length === 0) {
        console.log("[HMR] Nothing hot updated.");
      } else {
        console.log("[HMR] Updated modules:");
        renewedModules.forEach(function(moduleId) {
          console.log("[HMR]  - " + moduleMap[moduleId]);
        });
      }

      if (upToDate()) {
        console.log("[HMR] App is up to date.");
      }
    }
  }

  function handleError(err) {
    if (module.hot.status() in failureStatuses) {
      if (options.warn) {
        console.warn("[HMR] Cannot check for update (Full reload needed)");
        console.warn("[HMR] " + err.stack || err.message);
      }
      performReload();
      return;
    }
    if (options.warn) {
      console.warn("[HMR] Update check failed: " + err.stack || err.message);
    }
  }

  function performReload() {
    if (reload) {
      if (options.warn) console.warn("[HMR] Reloading page");
      window.location.reload();
    }
  }
};


/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,